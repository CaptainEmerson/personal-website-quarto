<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Rebecca Barter</title>
<link>https://www.rebeccabarter.com/blog.html</link>
<atom:link href="https://www.rebeccabarter.com/blog.xml" rel="self" type="application/rss+xml"/>
<description>Rebecca Barter&#39;s blog</description>
<generator>quarto-1.2.280</generator>
<lastBuildDate>Tue, 21 Mar 2023 06:00:00 GMT</lastBuildDate>
<item>
  <title>Thanks, Quarto, for saving my blog!</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2023-03-21-quarto-website.html</link>
  <description><![CDATA[ 




<p><img src="https://www.rebeccabarter.com/blog/img/quarto/quarto.jpg" class="img-fluid" alt="Quarto logo"></p>
<p>Hello reader, it’s been a minute!</p>
<p>I’m sure you didn’t notice, but I’ve been kind of silent on here for the past three years. So silent, it’s almost deafening (to my ears, at least).</p>
<p>Fear not, there are good reasons for my absence in this space. I’ve actually spent the past three years writing a book called “<em>Veridical Data Science: the practice of responsible data analysis and decision making</em>”, together with my PhD and postdoc advisor, the Veridical Data Science pioneer, Bin Yu. And I was doing this more-or-less full-time (more on veridical data science to come).</p>
<p>Much to my dismay, it turns out that after a full day of book-writing<sup>1</sup>, it’s hard to summon the energy to do even more writing in the form of blog posts. Book-burnout is <em>real</em>. So what was I doing with my spare time<sup>2</sup> if I wasn’t blogging, you ask? Instead of writing blog posts, I was doing a lot of non-blogging things like weathering a pandemic, climbing dumb rocks, learning to draw, moving all around the country, and other non-blogging things like that.</p>
<p>But now that the book is “<em>done</em>” (as in, it’s been sent to the publishers, which, if you know anything about publishing, means that it’s actually very far from done), and I’ve settled into a new job as an Assistant Research Professor at the University of Utah, I finally feel ready to start blogging again! Hooray!</p>
<p>Except… not actually hooray. When I finally went to update my original blogdown website on my new work computer, R yelled at me. Loudly. <span style="color:red;">In red</span>. And I didn’t like it one bit. The day that I had long feared had finally arrived: I didn’t know how to update my own website without breaking it. Blogdown is fantastic until it’s not.</p>
<p>Fortunately, this happened at the best of possible times. Not only have substantially fewer people been following my website lately (that’ll happen when you don’t add anything new to it in three years…), so I’m not so afraid to make some breaking changes, but we are now living in the magical era of <strong>Quarto</strong>!</p>
<p>Perhaps you’re like me, and it’s taken you a while to realize why this new era of <strong>Quarto</strong> is so magic. My first impression of Quarto was that it’s pretty much R Markdown, but with a few extra features and slightly different syntax. This is true, and also not true.</p>
<p>After hearing so much about how much easier so many things (like making a blog, for instance) are with Quarto, I figured that I might as well give it a go and try to port my broken blogdown website over to Quarto. The alternative seems to be spending my life debugging blogdown, so what have I got to lose?</p>
<p>Now that I’m on the other side, I have to say. Wow. Just wow. I managed to re-create my entire website using quarto without running into a single issue in just 4 hours. For reference, when I originally created my blog using blogdown 5ish years ago, it took around 5 days and I had to try several different themes before I found one that was stable and didn’t break easily.</p>
<p>If you’re looking to make the transition yourself, fortunately there are already several useful resources out there, like <a href="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html">Albert Rapp’s blog post</a> and <a href="https://www.njtierney.com/post/2022/04/11/rmd-to-qmd/">Nick Tierney’s blog post</a>. The <a href="https://quarto.org/docs/websites/website-blog.html">Quarto documentation</a> itself is also really helpful.</p>
<p>The end result of my 4-hours of effort is what you see here. My website looks a bit different (and I got rid of some of the less-visited sections that no one cares about), but I think it’s much cleaner and easier to navigate. I might do some fine-tuning down the line, but I’m in no rush.</p>
<p>Anyway, all this is to say: Welcome to my new website! I hope to be creating a lot more content for you in the near future. I’m excited to oil to my blogging gears, and get back on the road!</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>which mostly involves writing the same paragraph in five different ways before realizing that the point I’m trying to make is irrelevant and subsequently deleting the whole thing↩︎</p></li>
<li id="fn2"><p>I know that this implies that I only blog in my spare time, but if I’m being honest, I don’t think I’ve ever actually blogged in my spare time. I only ever blog during work hours, like the responsible employee that I am. I’m actually at work right now. But shhhh.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>blog</category>
  <guid>https://www.rebeccabarter.com/blog/2023-03-21-quarto-website.html</guid>
  <pubDate>Tue, 21 Mar 2023 06:00:00 GMT</pubDate>
  <media:content url="https://www.rebeccabarter.com/blog/img/quarto/quarto.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>It’s time for statistics departments to start supporting their applied students</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2020-07-30-applied-statistics-universities.html</link>
  <description><![CDATA[ 




<p>I graduated with a PhD from UC Berkeley’s statistics department in December. My PhD dissertation consisted of three 100% applied projects (one of which was a piece of open-source software). This is, unfortunately, incredibly rare.</p>
<p>Over the past few years, I’ve had a number of current and prospective statistics PhD students both at Berkeley and outside Berkeley get in touch with me to ask me how I made my way through a statistics PhD by working only on applied projects. My answer is always as follows: <em>I got lucky</em>. I ended up with an incredibly supportive and advisor, Bin Yu, who went out of her way to find applied projects for me, and was comfortable letting me spend time doing non-conventional things (like learn D3.js, work on my blog, and she even recruited me to be the co-author on a book on Data Science that she wanted to write based on her data science philosophy that she has developed throughout her career). I got a lot out of my PhD, and I’m incredibly grateful to Bin for her guidance. If you’re interested in Bin’s work, I recommend reading her paper, <a href="https://www.pnas.org/content/117/8/3920">Veridical Data Science</a>, which reflects the philosophy that underlies our book.</p>
<p>Unfortunately, my experience is definitely not the norm, even in my own department. I’ve had so many upsetting conversations with fellow applied stats grad students about how they feel lost and unsupported, about how they’re struggling to find applied projects to work on, and when they do finally find a project, they end up having to fight to justify that their project is “statistical enough” to count towards their dissertation. I’ve had these conversations with students from a wide range of statistics departments, not just my own. I actually think that the Berkeley statistics department is a little better than a many other statistics departments on this front - at least at Berkeley it’s <em>possible</em> to graduate with purely applied projects, even if it’s not easy.</p>
<p>While pretty much every statistics department is starting to realize that they need to embrace “Data Science” in order to remain up-to-date and relevant, they are often doing so in a way that is more performative than practical. They’re starting data science master’s programs, but these programs are often just theoretical statistics programs with a “data science” label slapped on it. They’re also trying to recruit more applied students, but they aren’t giving them any of the support they need to be successful. How can you expect your applied students to succeed if you don’t have any truly applied faculty to guide them? And when you do have applied faculty, you don’t give them tenure (because apparently they’re not “furthering the field of statistics”)? Who are these students going to work with? Who is going to show them that it’s possible to succeed as an applied statistician in a statistics department? Unfortunately, the vast majority of statistics departments are sending a strong message that there is no such thing as success in academia for truly applied statisticians. The end result is that applied students are being brought into statistics departments, chewed up a little, and then spat out, often with a fair amount of imposter syndrome, anxiety and depression, and sadly, often without their PhDs.</p>
<p>Maybe at this point you’re getting aggravated and saying: “but most statistics departments <em>do</em> have applied statisticians on their faculty!”. Well, yes, technically that’s true, if your definition of “applied statistics” involves <em>developing a method</em> (or even developing the underlying theory for a method) and then applying it to a nice, clean dataset to show that the method works. What about answering scientific questions and actually solving real-world problems? What about working with real, messy data? What about communication, exploration, and visualization? Are none of these things statistics?</p>
<p>In my view, this failure to embrace truly applied projects as applied statistics is the whole reason Data Science exists. Data Science is what “Applied Statistics” is supposed to be. Didn’t statistics come about in the first place because governments started collecting and analyzing <em>real data</em> to understand their citizens? Sure, they developed methods, but these methods were developed specifically because they were <em>needed</em> to solve <em>real</em> problems! Why is it that today, when grad students want to solve real problems, they’re told that they aren’t doing statistics?</p>
<p>I’m not saying that theory and methods aren’t an important part of statistics, or that having a theoretical background doesn’t help if you want to be an accomplished data scientist. What I’m saying is that theory shouldn’t always be the <em>focus</em>. If you want to support your applied statistics students (or data science students), then you need to have a track in your program that teaches students how to use real world (and messy!) data to ask scientific questions, and communicate about data and the subsequent scientific findings (I could do a whole post on how most statisticians can’t communicate, but I’ll leave that for another day). For that to happen, you need to hire <em>truly</em> applied faculty, who are working on real world problems with real, messy data.</p>
<p>Unfortunately, it’s a bit of a Catch-22. How can you hire more applied faculty if by the time us applied students get out of your programs, we’re so fed up with feeling like the under-class in statistics departments that we have no desire to go down the academic route whatsoever? Statistics, I’ll leave you with two pieces of advice:</p>
<ol type="1">
<li><p>Support your applied students. Let them do applied work, and help them find projects in collaboration with faculty in other departments. Let them graduate, and don’t make them fight for it. Give them a positive grad school experience, rather than leave them with nightmares.</p></li>
<li><p>Seek out applied faculty candidates. And when you hire them, actually <strong>give them f**king tenure</strong>.</p></li>
</ol>



 ]]></description>
  <category>statistics</category>
  <guid>https://www.rebeccabarter.com/blog/2020-07-30-applied-statistics-universities.html</guid>
  <pubDate>Thu, 30 Jul 2020 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Across (dplyr 1.0.0): applying dplyr functions simultaneously across multiple columns</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2020-07-09-across.html</link>
  <description><![CDATA[ 




<p>I often find that I want to use a dplyr function on multiple columns at once. For instance, perhaps I want to scale all of the numeric variables at once using a mutate function, or I want to provide the same summary for three of my variables.</p>
<p>While it’s been possible to do such tasks for a while using <a href="http://www.rebeccabarter.com/blog/2019-01-23_scoped-verbs/">scoped verbs</a>, it’s now even easier - and more consistent - using dplyr’s new <code>across()</code> function.</p>
<p>To demonstrate <code>across()</code>, I’m going to use Palmer’s Penguin dataset, which was originally collected and made available by Dr.&nbsp;Kristen Gorman and the Palmer Station, Antarctica LTER, but has recently been made popular in the R community by <a href="https://twitter.com/allison_horst">Allison Horst</a> as an alternative to the over-used Iris dataset.</p>
<p>To start with, let’s load the penguins dataset (via the <code>palmerpenguins</code> package) and the tidyverse package. If you’re new to the tidyverse (primarily to dplyr and piping, <code>%&gt;%</code>), I suggest taking a look at <a href="http://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse/">my post on the tidyverse</a> before reading this post.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># remotes::install_github("allisonhorst/palmerpenguins")</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(palmerpenguins)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">penguins</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;      &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;int&gt;
 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007
 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007
 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007
 4 Adelie  Torgersen           NA            NA           NA      NA &lt;NA&gt;   2007
 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007
 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007
 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007
 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007
 9 Adelie  Torgersen           34.1          18.1        193    3475 &lt;NA&gt;   2007
10 Adelie  Torgersen           42            20.2        190    4250 &lt;NA&gt;   2007
# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,
#   ²​body_mass_g</code></pre>
</div>
</div>
<p>There are 344 rows in the penguins dataset, one for each penguin, and 7 columns. The first two columns, <code>species</code> and <code>island</code>, specify the species and island of the penguin, the next four specify numeric traits about the penguin, including the bill and flipper length, the bill depth and the body mass.</p>
<p>The new <code>across()</code> function turns all dplyr functions into “scoped” versions of themselves, which means you can specify multiple columns that your dplyr function will apply to.</p>
<p>Ordinarily, if we want to <code>summarise</code> a single column, such as <code>species</code>, by calculating the number of distinct entries (using <code>n_distinct()</code>) it contains, we would typically write</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">distinct_species =</span> <span class="fu" style="color: #4758AB;">n_distinct</span>(species))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
  distinct_species
             &lt;int&gt;
1                3</code></pre>
</div>
</div>
<p>If we wanted to calculate <code>n_distinct()</code> not only across <code>species</code>, but also across <code>island</code> and <code>sex</code>, we would need to write out the <code>n_distinct</code> function three separate times:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">distinct_species =</span> <span class="fu" style="color: #4758AB;">n_distinct</span>(species),</span>
<span id="cb6-3">            <span class="at" style="color: #657422;">distinct_island =</span> <span class="fu" style="color: #4758AB;">n_distinct</span>(island),</span>
<span id="cb6-4">            <span class="at" style="color: #657422;">distinct_sex =</span> <span class="fu" style="color: #4758AB;">n_distinct</span>(sex))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  distinct_species distinct_island distinct_sex
             &lt;int&gt;           &lt;int&gt;        &lt;int&gt;
1                3               3            3</code></pre>
</div>
</div>
<p>Wouldn’t it be nice if we could just write which columns we want to apply <code>n_distinct()</code> to, and then specify <code>n_distinct()</code> once, rather than having to apply n_distinct to each column separately?</p>
<p>This is where <code>across()</code> comes in. It is used <em>inside</em> your favourite dplyr function and the syntax is <code>across(.cols, .fnd)</code>, where <code>.cols</code> specifies the columns that you want the dplyr function to act on. When dplyr functions involve external functions that you’re applying to columns e.g.&nbsp;<code>n_distinct()</code> in the example above, this external function is placed in the <code>.fnd</code> argument. For example, we would to apply <code>n_distinct()</code> to <code>species</code>, <code>island</code>, and <code>sex</code>, we would write <code>across(c(species, island, sex), n_distinct)</code> in the <code>summarise</code> parentheses.</p>
<p>Note that we are specifying which variables we want to involve in the <code>summarise</code> using <code>c()</code>, as if we’re listing the variable names in a vector, but because we’re in dplyr-land, we don’t need to put them in quotes:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">c</span>(species, island, sex), </span>
<span id="cb8-3">                   n_distinct))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  species island   sex
    &lt;int&gt;  &lt;int&gt; &lt;int&gt;
1       3      3     3</code></pre>
</div>
</div>
<p>Something else that’s really neat is that you can also use <code>!c()</code> to negate a set of variables (i.e.&nbsp;to apply the function to all variables <em>except</em> those that you specified in <code>c()</code>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">c</span>(species, island, sex), </span>
<span id="cb10-3">                   n_distinct))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 5
  bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year
           &lt;int&gt;         &lt;int&gt;             &lt;int&gt;       &lt;int&gt; &lt;int&gt;
1            165            81                56          95     3</code></pre>
</div>
</div>
<p>I want to emphasize here that the function <code>n_distinct()</code> <em>is an argument of <code>across()</code></em>, rather than being an argument of the dplyr function (<code>summarise</code>).</p>
<section id="select-helpers-selecting-columns-to-apply-the-function-to" class="level1">
<h1>Select helpers: selecting columns to apply the function to</h1>
<p>So far we’ve seen how to apply a dplyr function to a set of columns using a vector notation <code>c(col1, col2, col3, ...)</code>. However, there are many other ways to specify the columns that you want to apply the dplyr function to.</p>
<ul>
<li><code>everything()</code>: apply the function to all of the columns</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">everything</span>(), n_distinct))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
  species island bill_length_mm bill_depth_mm flipper_leng…¹ body_…²   sex  year
    &lt;int&gt;  &lt;int&gt;          &lt;int&gt;         &lt;int&gt;          &lt;int&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt;
1       3      3            165            81             56      95     3     3
# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g</code></pre>
</div>
</div>
<ul>
<li><code>starts_with()</code>: apply the function to all columns whose name starts with a specific string</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">"bill"</span>), n_distinct))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 2
  bill_length_mm bill_depth_mm
           &lt;int&gt;         &lt;int&gt;
1            165            81</code></pre>
</div>
</div>
<ul>
<li><code>contains()</code>: apply the function to all columns whose name contains a specific string</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">"length"</span>), n_distinct))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 2
  bill_length_mm flipper_length_mm
           &lt;int&gt;             &lt;int&gt;
1            165                56</code></pre>
</div>
</div>
<ul>
<li><code>where()</code> apply the function to all columns that satisfy a logical condition, such as <code>is.numeric()</code></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">where</span>(is.numeric), n_distinct))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 5
  bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year
           &lt;int&gt;         &lt;int&gt;             &lt;int&gt;       &lt;int&gt; &lt;int&gt;
1            165            81                56          95     3</code></pre>
</div>
</div>
<p>The full list of select helpers can be found <a href="https://dplyr.tidyverse.org/reference/select.html">here</a>.</p>
</section>
<section id="using-in-line-functions-with-across" class="level1">
<h1>Using in-line functions with across</h1>
<p>Let’s look at an example of summarizing the columns using a custom function (rather than <code>n_distinct()</code>). I usually do this using the tilde-dot shorthand for inline functions. The notation works by replacing</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb20-2">  x <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb20-3">}</span></code></pre></div>
</div>
<p>with</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="sc" style="color: #5E5E5E;">~</span>{.x <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span>}</span></code></pre></div>
</div>
<p><code>~</code> indicates that you have started an anonymous function, and the argument of the anonymous function can be referred to using <code>.x</code> (or simply <code>.</code>). Unlike normal function arguments that can be anything that you like, the tilde-dot function argument is always <code>.x</code>.</p>
<p>For instance, to identify how many missing values there are in every column, we could specify the inline function <code>~sum(is.na(.))</code>, which calculates how many <code>NA</code> values are in each column (where the column is represented by <code>.</code>) and adds them up:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">everything</span>(), </span>
<span id="cb22-3">                   <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">is.na</span>(.))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
  species island bill_length_mm bill_depth_mm flipper_leng…¹ body_…²   sex  year
    &lt;int&gt;  &lt;int&gt;          &lt;int&gt;         &lt;int&gt;          &lt;int&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt;
1       0      0              2             2              2       2    11     0
# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g</code></pre>
</div>
</div>
<p>This shows that there are missing values in every column except for the first two (<code>species</code> and <code>island</code>).</p>
</section>
<section id="a-mutate-example" class="level1">
<h1>A mutate example</h1>
<p>What if we want to replace the missing values in the numeric columns with 0 (clearly a terrible choice)? Without the <code>across()</code> function, we would apply an <code>if_else()</code> function separately to each numeric column, which will replace all <code>NA</code> values with 0 and leave all non-<code>NA</code> values as they are:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">replace0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;">if_else</span>(<span class="at" style="color: #657422;">condition =</span> <span class="fu" style="color: #4758AB;">is.na</span>(x), </span>
<span id="cb24-3">          <span class="at" style="color: #657422;">true =</span> <span class="dv" style="color: #AD0000;">0</span>, </span>
<span id="cb24-4">          <span class="at" style="color: #657422;">false =</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(x))</span>
<span id="cb24-5">}</span>
<span id="cb24-6">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb24-7">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">bill_length_mm =</span> <span class="fu" style="color: #4758AB;">replace0</span>(bill_length_mm),</span>
<span id="cb24-8">         <span class="at" style="color: #657422;">bill_depth_mm =</span> <span class="fu" style="color: #4758AB;">replace0</span>(bill_depth_mm),</span>
<span id="cb24-9">         <span class="at" style="color: #657422;">flipper_length_mm =</span> <span class="fu" style="color: #4758AB;">replace0</span>(flipper_length_mm),</span>
<span id="cb24-10">         <span class="at" style="color: #657422;">body_mass_g =</span> <span class="fu" style="color: #4758AB;">replace0</span>(body_mass_g))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt; &lt;int&gt;
 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007
 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007
 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007
 4 Adelie  Torgersen            0             0            0       0 &lt;NA&gt;   2007
 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007
 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007
 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007
 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007
 9 Adelie  Torgersen           34.1          18.1        193    3475 &lt;NA&gt;   2007
10 Adelie  Torgersen           42            20.2        190    4250 &lt;NA&gt;   2007
# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,
#   ²​body_mass_g</code></pre>
</div>
</div>
<p>But fortunately, we can do this a lot more efficiently with <code>across()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># define a function to replace NA with 0</span></span>
<span id="cb26-2"></span>
<span id="cb26-3">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb26-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">where</span>(is.numeric), replace0))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt;
 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007
 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007
 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007
 4 Adelie  Torgersen            0             0            0       0 &lt;NA&gt;   2007
 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007
 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007
 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007
 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007
 9 Adelie  Torgersen           34.1          18.1        193    3475 &lt;NA&gt;   2007
10 Adelie  Torgersen           42            20.2        190    4250 &lt;NA&gt;   2007
# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,
#   ²​body_mass_g</code></pre>
</div>
</div>
<p>Although obviously 0 isn’t a great choice, so perhaps we can replace the missing values with the mean value of the column. This time, rather than define a new function (in place of <code>replace0</code>), we’ll be a bit more concise and use the tilde-dot notation to specify the function we want to apply.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb28-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">where</span>(is.numeric), <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">is.na</span>(.), <span class="fu" style="color: #4758AB;">mean</span>(., <span class="at" style="color: #657422;">na.rm =</span> T), <span class="fu" style="color: #4758AB;">as.numeric</span>(.))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt;
 1 Adelie  Torgersen           39.1          18.7       181    3750  male   2007
 2 Adelie  Torgersen           39.5          17.4       186    3800  fema…  2007
 3 Adelie  Torgersen           40.3          18         195    3250  fema…  2007
 4 Adelie  Torgersen           43.9          17.2       201.   4202. &lt;NA&gt;   2007
 5 Adelie  Torgersen           36.7          19.3       193    3450  fema…  2007
 6 Adelie  Torgersen           39.3          20.6       190    3650  male   2007
 7 Adelie  Torgersen           38.9          17.8       181    3625  fema…  2007
 8 Adelie  Torgersen           39.2          19.6       195    4675  male   2007
 9 Adelie  Torgersen           34.1          18.1       193    3475  &lt;NA&gt;   2007
10 Adelie  Torgersen           42            20.2       190    4250  &lt;NA&gt;   2007
# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,
#   ²​body_mass_g</code></pre>
</div>
</div>
<p>Or better yet, perhaps we can replace the missing values with the average value within the relevant species and island.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;">group_by</span>(species, island) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">where</span>(is.numeric), </span>
<span id="cb30-4">                <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">if_else</span>(<span class="at" style="color: #657422;">condition =</span> <span class="fu" style="color: #4758AB;">is.na</span>(.), </span>
<span id="cb30-5">                         <span class="at" style="color: #657422;">true =</span> <span class="fu" style="color: #4758AB;">mean</span>(., <span class="at" style="color: #657422;">na.rm =</span> T), </span>
<span id="cb30-6">                         <span class="at" style="color: #657422;">false =</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(.)))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-7">  <span class="fu" style="color: #4758AB;">ungroup</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 8
   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year
   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt;
 1 Adelie  Torgersen           39.1          18.7       181    3750  male   2007
 2 Adelie  Torgersen           39.5          17.4       186    3800  fema…  2007
 3 Adelie  Torgersen           40.3          18         195    3250  fema…  2007
 4 Adelie  Torgersen           39.0          18.4       191.   3706. &lt;NA&gt;   2007
 5 Adelie  Torgersen           36.7          19.3       193    3450  fema…  2007
 6 Adelie  Torgersen           39.3          20.6       190    3650  male   2007
 7 Adelie  Torgersen           38.9          17.8       181    3625  fema…  2007
 8 Adelie  Torgersen           39.2          19.6       195    4675  male   2007
 9 Adelie  Torgersen           34.1          18.1       193    3475  &lt;NA&gt;   2007
10 Adelie  Torgersen           42            20.2       190    4250  &lt;NA&gt;   2007
# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,
#   ²​body_mass_g</code></pre>
</div>
</div>
</section>
<section id="a-select-example" class="level1">
<h1>A select example</h1>
<p>When you’re using select, you don’t have to include the <code>across()</code> function, because the select helpers have always worked with <code>select()</code>. This means that you can just write</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;">select</span>(<span class="fu" style="color: #4758AB;">where</span>(is.numeric))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 344 × 5
   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year
            &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt; &lt;int&gt;
 1           39.1          18.7               181        3750  2007
 2           39.5          17.4               186        3800  2007
 3           40.3          18                 195        3250  2007
 4           NA            NA                  NA          NA  2007
 5           36.7          19.3               193        3450  2007
 6           39.3          20.6               190        3650  2007
 7           38.9          17.8               181        3625  2007
 8           39.2          19.6               195        4675  2007
 9           34.1          18.1               193        3475  2007
10           42            20.2               190        4250  2007
# … with 334 more rows</code></pre>
</div>
</div>
<p>rather than</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb34-2">  <span class="fu" style="color: #4758AB;">select</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">where</span>(is.numeric)))</span></code></pre></div>
</div>
<p>which will throw an error.</p>
<p>Hopefully <code>across()</code> will make your life easier, as it has mine!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <category>dplyr</category>
  <guid>https://www.rebeccabarter.com/blog/2020-07-09-across.html</guid>
  <pubDate>Thu, 09 Jul 2020 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Tidymodels: tidy machine learning in R</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2020-03-25_machine_learning.html</link>
  <description><![CDATA[ 




<p>There’s a new modeling pipeline in town: tidymodels. Over the past few years, tidymodels has been gradually emerging as the tidyverse’s machine learning toolkit.</p>
<p>Why tidymodels? Well, it turns out that R has a consistency problem. Since everything was made by different people and using different principles, everything has a slightly different interface, and trying to keep everything in line can be frustrating. Several years ago, <a href="https://twitter.com/topepos">Max Kuhn</a> (formerly at Pfeizer, now at RStudio) developed the caret R package (see my <a href="http://www.rebeccabarter.com/blog/2017-11-17-caret_tutorial/">caret tutorial</a>) aimed at creating a uniform interface for the massive variety of machine learning models that exist in R. Caret was great in a lot of ways, but also limited in others. In my own use, I found it to be quite slow whenever I tried to use on problems of any kind of modest size.</p>
<p>That said, caret was a great starting point, so RStudio hired Max Kuhn to work on a tidy version of caret, and he and many other people have developed what has become tidymodels. Tidymodels has been in development for a few years, with snippets of it being released as they were developed (see my <a href="http://www.rebeccabarter.com/blog/2019-06-06_pre_processing/">post on the recipes package</a>). I’ve been holding off writing a post about tidymodels until it seemed as though the different pieces fit together sufficiently for it to all feel cohesive. I feel like they’re finally there - which means it is time for me to learn it! While caret isn’t going anywhere (you can continue to use caret, and your existing caret code isn’t going to stop working), tidymodels will eventually make it redundant.</p>
<p>The main resources I used to learn tidymodels were Alison Hill’s slides from <a href="https://education.rstudio.com/blog/2020/02/conf20-intro-ml/">Introduction to Machine Learning with the Tidyverse</a>, which contains all the slides for the course she prepared with Garrett Grolemund for RStudio::conf(2020), and Edgar Ruiz’s <a href="https://rviews.rstudio.com/2019/06/19/a-gentle-intro-to-tidymodels/">Gentle introduction to tidymodels</a> on the RStudio website.</p>
<p>Note that throughout this post I’ll be assuming basic tidyverse knowledge, primarily of dplyr (e.g.&nbsp;piping <code>%&gt;%</code> and function such as <code>mutate()</code>). Fortunately, for all you purrr-phobes out there, purrr is <em>not</em> required. If you’d like to brush up on your tidyverse skills, check out my <a href="http://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse/">Introduction to the Tidyverse</a> posts. If you’d like to learn purrr (purrr is very handy for working with tidymodels but is no longer a requirement), check out my <a href="http://www.rebeccabarter.com/blog/2019-08-19_purrr/">purrr post</a>.</p>
<section id="what-is-tidymodels" class="level1">
<h1>What is tidymodels</h1>
<p>Much like the tidyverse consists of many core packages, such as ggplot2 and dplyr, tidymodels also consists of several core packages, including</p>
<ul>
<li><p><code>rsample</code>: for sample splitting (e.g.&nbsp;train/test or cross-validation)</p></li>
<li><p><code>recipes</code>: for pre-processing</p></li>
<li><p><code>parsnip</code>: for specifying the model</p></li>
<li><p><code>yardstick</code>: for evaluating the model</p></li>
</ul>
<p>Similarly to how you can load the entire tidyverse suite of packages by typing <code>library(tidyverse)</code>, you can load the entire tidymodels suite of packages by typing <code>library(tidymodels)</code>.</p>
<p>We will also be using the <code>tune</code> package (for parameter tuning procedure) and the <code>workflows</code> package (for putting everything together) that I had thought were a part of CRAN’s tidymodels package bundle, but apparently they aren’t. These will need to be loaded separately for now.</p>
<p>Unlike in my <a href="http://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse/">tidyverse post</a>, I <em>won’t</em> base this post around the packages themselves, but I will mention the packages in passing.</p>
</section>
<section id="getting-set-up" class="level1">
<h1>Getting set up</h1>
<p>First we need to load some libraries: <code>tidymodels</code> and <code>tidyverse</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># load the relevant tidymodels libraries</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(workflows)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(tune)</span></code></pre></div>
</div>
<p>If you don’t already have the tidymodels library (or any of the other libraries) installed, then you’ll need to install it (once only) using <code>install.packages("tidymodels")</code>.</p>
<p>We will use the Pima Indian Women’s diabetes dataset which contains information on 768 Pima Indian women’s diabetes status, as well as many predictive features such as the number of pregnancies (pregnant), plasma glucose concentration (glucose), diastolic blood pressure (pressure), triceps skin fold thickness (triceps), 2-hour serum insulin (insulin), BMI (mass), diabetes pedigree function (pedigree), and their age (age). In case you were wondering, the <a href="https://en.wikipedia.org/wiki/Pima_people">Pima Indians</a> are a group of Native Americans living in an area consisting of what is now central and southern Arizona. The short name, “Pima” is believed to have come from a phrase meaning “I don’t know,” which they used repeatedly in their initial meetings with Spanish colonists. Thanks Wikipedia!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># load the Pima Indians dataset from the mlbench dataset</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(mlbench)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">data</span>(PimaIndiansDiabetes)</span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"># rename dataset to have shorter name because lazy</span></span>
<span id="cb2-5">diabetes_orig <span class="ot" style="color: #003B4F;">&lt;-</span> PimaIndiansDiabetes</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">diabetes_orig</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    pregnant glucose pressure triceps insulin mass pedigree age diabetes
1          6     148       72      35       0 33.6    0.627  50      pos
2          1      85       66      29       0 26.6    0.351  31      neg
3          8     183       64       0       0 23.3    0.672  32      pos
4          1      89       66      23      94 28.1    0.167  21      neg
5          0     137       40      35     168 43.1    2.288  33      pos
6          5     116       74       0       0 25.6    0.201  30      neg
7          3      78       50      32      88 31.0    0.248  26      pos
8         10     115        0       0       0 35.3    0.134  29      neg
9          2     197       70      45     543 30.5    0.158  53      pos
10         8     125       96       0       0  0.0    0.232  54      pos
11         4     110       92       0       0 37.6    0.191  30      neg
12        10     168       74       0       0 38.0    0.537  34      pos
13        10     139       80       0       0 27.1    1.441  57      neg
14         1     189       60      23     846 30.1    0.398  59      pos
15         5     166       72      19     175 25.8    0.587  51      pos
16         7     100        0       0       0 30.0    0.484  32      pos
17         0     118       84      47     230 45.8    0.551  31      pos
18         7     107       74       0       0 29.6    0.254  31      pos
19         1     103       30      38      83 43.3    0.183  33      neg
20         1     115       70      30      96 34.6    0.529  32      pos
21         3     126       88      41     235 39.3    0.704  27      neg
22         8      99       84       0       0 35.4    0.388  50      neg
23         7     196       90       0       0 39.8    0.451  41      pos
24         9     119       80      35       0 29.0    0.263  29      pos
25        11     143       94      33     146 36.6    0.254  51      pos
26        10     125       70      26     115 31.1    0.205  41      pos
27         7     147       76       0       0 39.4    0.257  43      pos
28         1      97       66      15     140 23.2    0.487  22      neg
29        13     145       82      19     110 22.2    0.245  57      neg
30         5     117       92       0       0 34.1    0.337  38      neg
31         5     109       75      26       0 36.0    0.546  60      neg
32         3     158       76      36     245 31.6    0.851  28      pos
33         3      88       58      11      54 24.8    0.267  22      neg
34         6      92       92       0       0 19.9    0.188  28      neg
35        10     122       78      31       0 27.6    0.512  45      neg
36         4     103       60      33     192 24.0    0.966  33      neg
37        11     138       76       0       0 33.2    0.420  35      neg
38         9     102       76      37       0 32.9    0.665  46      pos
39         2      90       68      42       0 38.2    0.503  27      pos
40         4     111       72      47     207 37.1    1.390  56      pos
41         3     180       64      25      70 34.0    0.271  26      neg
42         7     133       84       0       0 40.2    0.696  37      neg
43         7     106       92      18       0 22.7    0.235  48      neg
44         9     171      110      24     240 45.4    0.721  54      pos
45         7     159       64       0       0 27.4    0.294  40      neg
46         0     180       66      39       0 42.0    1.893  25      pos
47         1     146       56       0       0 29.7    0.564  29      neg
48         2      71       70      27       0 28.0    0.586  22      neg
49         7     103       66      32       0 39.1    0.344  31      pos
50         7     105        0       0       0  0.0    0.305  24      neg
51         1     103       80      11      82 19.4    0.491  22      neg
52         1     101       50      15      36 24.2    0.526  26      neg
53         5      88       66      21      23 24.4    0.342  30      neg
54         8     176       90      34     300 33.7    0.467  58      pos
55         7     150       66      42     342 34.7    0.718  42      neg
56         1      73       50      10       0 23.0    0.248  21      neg
57         7     187       68      39     304 37.7    0.254  41      pos
58         0     100       88      60     110 46.8    0.962  31      neg
59         0     146       82       0       0 40.5    1.781  44      neg
60         0     105       64      41     142 41.5    0.173  22      neg
61         2      84        0       0       0  0.0    0.304  21      neg
62         8     133       72       0       0 32.9    0.270  39      pos
63         5      44       62       0       0 25.0    0.587  36      neg
64         2     141       58      34     128 25.4    0.699  24      neg
65         7     114       66       0       0 32.8    0.258  42      pos
66         5      99       74      27       0 29.0    0.203  32      neg
67         0     109       88      30       0 32.5    0.855  38      pos
68         2     109       92       0       0 42.7    0.845  54      neg
69         1      95       66      13      38 19.6    0.334  25      neg
70         4     146       85      27     100 28.9    0.189  27      neg
71         2     100       66      20      90 32.9    0.867  28      pos
72         5     139       64      35     140 28.6    0.411  26      neg
73        13     126       90       0       0 43.4    0.583  42      pos
74         4     129       86      20     270 35.1    0.231  23      neg
75         1      79       75      30       0 32.0    0.396  22      neg
76         1       0       48      20       0 24.7    0.140  22      neg
77         7      62       78       0       0 32.6    0.391  41      neg
78         5      95       72      33       0 37.7    0.370  27      neg
79         0     131        0       0       0 43.2    0.270  26      pos
80         2     112       66      22       0 25.0    0.307  24      neg
81         3     113       44      13       0 22.4    0.140  22      neg
82         2      74        0       0       0  0.0    0.102  22      neg
83         7      83       78      26      71 29.3    0.767  36      neg
84         0     101       65      28       0 24.6    0.237  22      neg
85         5     137      108       0       0 48.8    0.227  37      pos
86         2     110       74      29     125 32.4    0.698  27      neg
87        13     106       72      54       0 36.6    0.178  45      neg
88         2     100       68      25      71 38.5    0.324  26      neg
89        15     136       70      32     110 37.1    0.153  43      pos
90         1     107       68      19       0 26.5    0.165  24      neg
91         1      80       55       0       0 19.1    0.258  21      neg
92         4     123       80      15     176 32.0    0.443  34      neg
93         7      81       78      40      48 46.7    0.261  42      neg
94         4     134       72       0       0 23.8    0.277  60      pos
95         2     142       82      18      64 24.7    0.761  21      neg
96         6     144       72      27     228 33.9    0.255  40      neg
97         2      92       62      28       0 31.6    0.130  24      neg
98         1      71       48      18      76 20.4    0.323  22      neg
99         6      93       50      30      64 28.7    0.356  23      neg
100        1     122       90      51     220 49.7    0.325  31      pos
101        1     163       72       0       0 39.0    1.222  33      pos
102        1     151       60       0       0 26.1    0.179  22      neg
103        0     125       96       0       0 22.5    0.262  21      neg
104        1      81       72      18      40 26.6    0.283  24      neg
105        2      85       65       0       0 39.6    0.930  27      neg
106        1     126       56      29     152 28.7    0.801  21      neg
107        1      96      122       0       0 22.4    0.207  27      neg
108        4     144       58      28     140 29.5    0.287  37      neg
109        3      83       58      31      18 34.3    0.336  25      neg
110        0      95       85      25      36 37.4    0.247  24      pos
111        3     171       72      33     135 33.3    0.199  24      pos
112        8     155       62      26     495 34.0    0.543  46      pos
113        1      89       76      34      37 31.2    0.192  23      neg
114        4      76       62       0       0 34.0    0.391  25      neg
115        7     160       54      32     175 30.5    0.588  39      pos
116        4     146       92       0       0 31.2    0.539  61      pos
117        5     124       74       0       0 34.0    0.220  38      pos
118        5      78       48       0       0 33.7    0.654  25      neg
119        4      97       60      23       0 28.2    0.443  22      neg
120        4      99       76      15      51 23.2    0.223  21      neg
121        0     162       76      56     100 53.2    0.759  25      pos
122        6     111       64      39       0 34.2    0.260  24      neg
123        2     107       74      30     100 33.6    0.404  23      neg
124        5     132       80       0       0 26.8    0.186  69      neg
125        0     113       76       0       0 33.3    0.278  23      pos
126        1      88       30      42      99 55.0    0.496  26      pos
127        3     120       70      30     135 42.9    0.452  30      neg
128        1     118       58      36      94 33.3    0.261  23      neg
129        1     117       88      24     145 34.5    0.403  40      pos
130        0     105       84       0       0 27.9    0.741  62      pos
131        4     173       70      14     168 29.7    0.361  33      pos
132        9     122       56       0       0 33.3    1.114  33      pos
133        3     170       64      37     225 34.5    0.356  30      pos
134        8      84       74      31       0 38.3    0.457  39      neg
135        2      96       68      13      49 21.1    0.647  26      neg
136        2     125       60      20     140 33.8    0.088  31      neg
137        0     100       70      26      50 30.8    0.597  21      neg
138        0      93       60      25      92 28.7    0.532  22      neg
139        0     129       80       0       0 31.2    0.703  29      neg
140        5     105       72      29     325 36.9    0.159  28      neg
141        3     128       78       0       0 21.1    0.268  55      neg
142        5     106       82      30       0 39.5    0.286  38      neg
143        2     108       52      26      63 32.5    0.318  22      neg
144       10     108       66       0       0 32.4    0.272  42      pos
145        4     154       62      31     284 32.8    0.237  23      neg
146        0     102       75      23       0  0.0    0.572  21      neg
147        9      57       80      37       0 32.8    0.096  41      neg
148        2     106       64      35     119 30.5    1.400  34      neg
149        5     147       78       0       0 33.7    0.218  65      neg
150        2      90       70      17       0 27.3    0.085  22      neg
151        1     136       74      50     204 37.4    0.399  24      neg
152        4     114       65       0       0 21.9    0.432  37      neg
153        9     156       86      28     155 34.3    1.189  42      pos
154        1     153       82      42     485 40.6    0.687  23      neg
155        8     188       78       0       0 47.9    0.137  43      pos
156        7     152       88      44       0 50.0    0.337  36      pos
157        2      99       52      15      94 24.6    0.637  21      neg
158        1     109       56      21     135 25.2    0.833  23      neg
159        2      88       74      19      53 29.0    0.229  22      neg
160       17     163       72      41     114 40.9    0.817  47      pos
161        4     151       90      38       0 29.7    0.294  36      neg
162        7     102       74      40     105 37.2    0.204  45      neg
163        0     114       80      34     285 44.2    0.167  27      neg
164        2     100       64      23       0 29.7    0.368  21      neg
165        0     131       88       0       0 31.6    0.743  32      pos
166        6     104       74      18     156 29.9    0.722  41      pos
167        3     148       66      25       0 32.5    0.256  22      neg
168        4     120       68       0       0 29.6    0.709  34      neg
169        4     110       66       0       0 31.9    0.471  29      neg
170        3     111       90      12      78 28.4    0.495  29      neg
171        6     102       82       0       0 30.8    0.180  36      pos
172        6     134       70      23     130 35.4    0.542  29      pos
173        2      87        0      23       0 28.9    0.773  25      neg
174        1      79       60      42      48 43.5    0.678  23      neg
175        2      75       64      24      55 29.7    0.370  33      neg
176        8     179       72      42     130 32.7    0.719  36      pos
177        6      85       78       0       0 31.2    0.382  42      neg
178        0     129      110      46     130 67.1    0.319  26      pos
179        5     143       78       0       0 45.0    0.190  47      neg
180        5     130       82       0       0 39.1    0.956  37      pos
181        6      87       80       0       0 23.2    0.084  32      neg
182        0     119       64      18      92 34.9    0.725  23      neg
183        1       0       74      20      23 27.7    0.299  21      neg
184        5      73       60       0       0 26.8    0.268  27      neg
185        4     141       74       0       0 27.6    0.244  40      neg
186        7     194       68      28       0 35.9    0.745  41      pos
187        8     181       68      36     495 30.1    0.615  60      pos
188        1     128       98      41      58 32.0    1.321  33      pos
189        8     109       76      39     114 27.9    0.640  31      pos
190        5     139       80      35     160 31.6    0.361  25      pos
191        3     111       62       0       0 22.6    0.142  21      neg
192        9     123       70      44      94 33.1    0.374  40      neg
193        7     159       66       0       0 30.4    0.383  36      pos
194       11     135        0       0       0 52.3    0.578  40      pos
195        8      85       55      20       0 24.4    0.136  42      neg
196        5     158       84      41     210 39.4    0.395  29      pos
197        1     105       58       0       0 24.3    0.187  21      neg
198        3     107       62      13      48 22.9    0.678  23      pos
199        4     109       64      44      99 34.8    0.905  26      pos
200        4     148       60      27     318 30.9    0.150  29      pos
201        0     113       80      16       0 31.0    0.874  21      neg
202        1     138       82       0       0 40.1    0.236  28      neg
203        0     108       68      20       0 27.3    0.787  32      neg
204        2      99       70      16      44 20.4    0.235  27      neg
205        6     103       72      32     190 37.7    0.324  55      neg
206        5     111       72      28       0 23.9    0.407  27      neg
207        8     196       76      29     280 37.5    0.605  57      pos
208        5     162      104       0       0 37.7    0.151  52      pos
209        1      96       64      27      87 33.2    0.289  21      neg
210        7     184       84      33       0 35.5    0.355  41      pos
211        2      81       60      22       0 27.7    0.290  25      neg
212        0     147       85      54       0 42.8    0.375  24      neg
213        7     179       95      31       0 34.2    0.164  60      neg
214        0     140       65      26     130 42.6    0.431  24      pos
215        9     112       82      32     175 34.2    0.260  36      pos
216       12     151       70      40     271 41.8    0.742  38      pos
217        5     109       62      41     129 35.8    0.514  25      pos
218        6     125       68      30     120 30.0    0.464  32      neg
219        5      85       74      22       0 29.0    1.224  32      pos
220        5     112       66       0       0 37.8    0.261  41      pos
221        0     177       60      29     478 34.6    1.072  21      pos
222        2     158       90       0       0 31.6    0.805  66      pos
223        7     119        0       0       0 25.2    0.209  37      neg
224        7     142       60      33     190 28.8    0.687  61      neg
225        1     100       66      15      56 23.6    0.666  26      neg
226        1      87       78      27      32 34.6    0.101  22      neg
227        0     101       76       0       0 35.7    0.198  26      neg
228        3     162       52      38       0 37.2    0.652  24      pos
229        4     197       70      39     744 36.7    2.329  31      neg
230        0     117       80      31      53 45.2    0.089  24      neg
231        4     142       86       0       0 44.0    0.645  22      pos
232        6     134       80      37     370 46.2    0.238  46      pos
233        1      79       80      25      37 25.4    0.583  22      neg
234        4     122       68       0       0 35.0    0.394  29      neg
235        3      74       68      28      45 29.7    0.293  23      neg
236        4     171       72       0       0 43.6    0.479  26      pos
237        7     181       84      21     192 35.9    0.586  51      pos
238        0     179       90      27       0 44.1    0.686  23      pos
239        9     164       84      21       0 30.8    0.831  32      pos
240        0     104       76       0       0 18.4    0.582  27      neg
241        1      91       64      24       0 29.2    0.192  21      neg
242        4      91       70      32      88 33.1    0.446  22      neg
243        3     139       54       0       0 25.6    0.402  22      pos
244        6     119       50      22     176 27.1    1.318  33      pos
245        2     146       76      35     194 38.2    0.329  29      neg
246        9     184       85      15       0 30.0    1.213  49      pos
247       10     122       68       0       0 31.2    0.258  41      neg
248        0     165       90      33     680 52.3    0.427  23      neg
249        9     124       70      33     402 35.4    0.282  34      neg
250        1     111       86      19       0 30.1    0.143  23      neg
251        9     106       52       0       0 31.2    0.380  42      neg
252        2     129       84       0       0 28.0    0.284  27      neg
253        2      90       80      14      55 24.4    0.249  24      neg
254        0      86       68      32       0 35.8    0.238  25      neg
255       12      92       62       7     258 27.6    0.926  44      pos
256        1     113       64      35       0 33.6    0.543  21      pos
257        3     111       56      39       0 30.1    0.557  30      neg
258        2     114       68      22       0 28.7    0.092  25      neg
259        1     193       50      16     375 25.9    0.655  24      neg
260       11     155       76      28     150 33.3    1.353  51      pos
261        3     191       68      15     130 30.9    0.299  34      neg
262        3     141        0       0       0 30.0    0.761  27      pos
263        4      95       70      32       0 32.1    0.612  24      neg
264        3     142       80      15       0 32.4    0.200  63      neg
265        4     123       62       0       0 32.0    0.226  35      pos
266        5      96       74      18      67 33.6    0.997  43      neg
267        0     138        0       0       0 36.3    0.933  25      pos
268        2     128       64      42       0 40.0    1.101  24      neg
269        0     102       52       0       0 25.1    0.078  21      neg
270        2     146        0       0       0 27.5    0.240  28      pos
271       10     101       86      37       0 45.6    1.136  38      pos
272        2     108       62      32      56 25.2    0.128  21      neg
273        3     122       78       0       0 23.0    0.254  40      neg
274        1      71       78      50      45 33.2    0.422  21      neg
275       13     106       70       0       0 34.2    0.251  52      neg
276        2     100       70      52      57 40.5    0.677  25      neg
277        7     106       60      24       0 26.5    0.296  29      pos
278        0     104       64      23     116 27.8    0.454  23      neg
279        5     114       74       0       0 24.9    0.744  57      neg
280        2     108       62      10     278 25.3    0.881  22      neg
281        0     146       70       0       0 37.9    0.334  28      pos
282       10     129       76      28     122 35.9    0.280  39      neg
283        7     133       88      15     155 32.4    0.262  37      neg
284        7     161       86       0       0 30.4    0.165  47      pos
285        2     108       80       0       0 27.0    0.259  52      pos
286        7     136       74      26     135 26.0    0.647  51      neg
287        5     155       84      44     545 38.7    0.619  34      neg
288        1     119       86      39     220 45.6    0.808  29      pos
289        4      96       56      17      49 20.8    0.340  26      neg
290        5     108       72      43      75 36.1    0.263  33      neg
291        0      78       88      29      40 36.9    0.434  21      neg
292        0     107       62      30      74 36.6    0.757  25      pos
293        2     128       78      37     182 43.3    1.224  31      pos
294        1     128       48      45     194 40.5    0.613  24      pos
295        0     161       50       0       0 21.9    0.254  65      neg
296        6     151       62      31     120 35.5    0.692  28      neg
297        2     146       70      38     360 28.0    0.337  29      pos
298        0     126       84      29     215 30.7    0.520  24      neg
299       14     100       78      25     184 36.6    0.412  46      pos
300        8     112       72       0       0 23.6    0.840  58      neg
301        0     167        0       0       0 32.3    0.839  30      pos
302        2     144       58      33     135 31.6    0.422  25      pos
303        5      77       82      41      42 35.8    0.156  35      neg
304        5     115       98       0       0 52.9    0.209  28      pos
305        3     150       76       0       0 21.0    0.207  37      neg
306        2     120       76      37     105 39.7    0.215  29      neg
307       10     161       68      23     132 25.5    0.326  47      pos
308        0     137       68      14     148 24.8    0.143  21      neg
309        0     128       68      19     180 30.5    1.391  25      pos
310        2     124       68      28     205 32.9    0.875  30      pos
311        6      80       66      30       0 26.2    0.313  41      neg
312        0     106       70      37     148 39.4    0.605  22      neg
313        2     155       74      17      96 26.6    0.433  27      pos
314        3     113       50      10      85 29.5    0.626  25      neg
315        7     109       80      31       0 35.9    1.127  43      pos
316        2     112       68      22      94 34.1    0.315  26      neg
317        3      99       80      11      64 19.3    0.284  30      neg
318        3     182       74       0       0 30.5    0.345  29      pos
319        3     115       66      39     140 38.1    0.150  28      neg
320        6     194       78       0       0 23.5    0.129  59      pos
321        4     129       60      12     231 27.5    0.527  31      neg
322        3     112       74      30       0 31.6    0.197  25      pos
323        0     124       70      20       0 27.4    0.254  36      pos
324       13     152       90      33      29 26.8    0.731  43      pos
325        2     112       75      32       0 35.7    0.148  21      neg
326        1     157       72      21     168 25.6    0.123  24      neg
327        1     122       64      32     156 35.1    0.692  30      pos
328       10     179       70       0       0 35.1    0.200  37      neg
329        2     102       86      36     120 45.5    0.127  23      pos
330        6     105       70      32      68 30.8    0.122  37      neg
331        8     118       72      19       0 23.1    1.476  46      neg
332        2      87       58      16      52 32.7    0.166  25      neg
333        1     180        0       0       0 43.3    0.282  41      pos
334       12     106       80       0       0 23.6    0.137  44      neg
335        1      95       60      18      58 23.9    0.260  22      neg
336        0     165       76      43     255 47.9    0.259  26      neg
337        0     117        0       0       0 33.8    0.932  44      neg
338        5     115       76       0       0 31.2    0.343  44      pos
339        9     152       78      34     171 34.2    0.893  33      pos
340        7     178       84       0       0 39.9    0.331  41      pos
341        1     130       70      13     105 25.9    0.472  22      neg
342        1      95       74      21      73 25.9    0.673  36      neg
343        1       0       68      35       0 32.0    0.389  22      neg
344        5     122       86       0       0 34.7    0.290  33      neg
345        8      95       72       0       0 36.8    0.485  57      neg
346        8     126       88      36     108 38.5    0.349  49      neg
347        1     139       46      19      83 28.7    0.654  22      neg
348        3     116        0       0       0 23.5    0.187  23      neg
349        3      99       62      19      74 21.8    0.279  26      neg
350        5       0       80      32       0 41.0    0.346  37      pos
351        4      92       80       0       0 42.2    0.237  29      neg
352        4     137       84       0       0 31.2    0.252  30      neg
353        3      61       82      28       0 34.4    0.243  46      neg
354        1      90       62      12      43 27.2    0.580  24      neg
355        3      90       78       0       0 42.7    0.559  21      neg
356        9     165       88       0       0 30.4    0.302  49      pos
357        1     125       50      40     167 33.3    0.962  28      pos
358       13     129        0      30       0 39.9    0.569  44      pos
359       12      88       74      40      54 35.3    0.378  48      neg
360        1     196       76      36     249 36.5    0.875  29      pos
361        5     189       64      33     325 31.2    0.583  29      pos
362        5     158       70       0       0 29.8    0.207  63      neg
363        5     103      108      37       0 39.2    0.305  65      neg
364        4     146       78       0       0 38.5    0.520  67      pos
365        4     147       74      25     293 34.9    0.385  30      neg
366        5      99       54      28      83 34.0    0.499  30      neg
367        6     124       72       0       0 27.6    0.368  29      pos
368        0     101       64      17       0 21.0    0.252  21      neg
369        3      81       86      16      66 27.5    0.306  22      neg
370        1     133      102      28     140 32.8    0.234  45      pos
371        3     173       82      48     465 38.4    2.137  25      pos
372        0     118       64      23      89  0.0    1.731  21      neg
373        0      84       64      22      66 35.8    0.545  21      neg
374        2     105       58      40      94 34.9    0.225  25      neg
375        2     122       52      43     158 36.2    0.816  28      neg
376       12     140       82      43     325 39.2    0.528  58      pos
377        0      98       82      15      84 25.2    0.299  22      neg
378        1      87       60      37      75 37.2    0.509  22      neg
379        4     156       75       0       0 48.3    0.238  32      pos
380        0      93      100      39      72 43.4    1.021  35      neg
381        1     107       72      30      82 30.8    0.821  24      neg
382        0     105       68      22       0 20.0    0.236  22      neg
383        1     109       60       8     182 25.4    0.947  21      neg
384        1      90       62      18      59 25.1    1.268  25      neg
385        1     125       70      24     110 24.3    0.221  25      neg
386        1     119       54      13      50 22.3    0.205  24      neg
387        5     116       74      29       0 32.3    0.660  35      pos
388        8     105      100      36       0 43.3    0.239  45      pos
389        5     144       82      26     285 32.0    0.452  58      pos
390        3     100       68      23      81 31.6    0.949  28      neg
391        1     100       66      29     196 32.0    0.444  42      neg
392        5     166       76       0       0 45.7    0.340  27      pos
393        1     131       64      14     415 23.7    0.389  21      neg
394        4     116       72      12      87 22.1    0.463  37      neg
395        4     158       78       0       0 32.9    0.803  31      pos
396        2     127       58      24     275 27.7    1.600  25      neg
397        3      96       56      34     115 24.7    0.944  39      neg
398        0     131       66      40       0 34.3    0.196  22      pos
399        3      82       70       0       0 21.1    0.389  25      neg
400        3     193       70      31       0 34.9    0.241  25      pos
401        4      95       64       0       0 32.0    0.161  31      pos
402        6     137       61       0       0 24.2    0.151  55      neg
403        5     136       84      41      88 35.0    0.286  35      pos
404        9      72       78      25       0 31.6    0.280  38      neg
405        5     168       64       0       0 32.9    0.135  41      pos
406        2     123       48      32     165 42.1    0.520  26      neg
407        4     115       72       0       0 28.9    0.376  46      pos
408        0     101       62       0       0 21.9    0.336  25      neg
409        8     197       74       0       0 25.9    1.191  39      pos
410        1     172       68      49     579 42.4    0.702  28      pos
411        6     102       90      39       0 35.7    0.674  28      neg
412        1     112       72      30     176 34.4    0.528  25      neg
413        1     143       84      23     310 42.4    1.076  22      neg
414        1     143       74      22      61 26.2    0.256  21      neg
415        0     138       60      35     167 34.6    0.534  21      pos
416        3     173       84      33     474 35.7    0.258  22      pos
417        1      97       68      21       0 27.2    1.095  22      neg
418        4     144       82      32       0 38.5    0.554  37      pos
419        1      83       68       0       0 18.2    0.624  27      neg
420        3     129       64      29     115 26.4    0.219  28      pos
421        1     119       88      41     170 45.3    0.507  26      neg
422        2      94       68      18      76 26.0    0.561  21      neg
423        0     102       64      46      78 40.6    0.496  21      neg
424        2     115       64      22       0 30.8    0.421  21      neg
425        8     151       78      32     210 42.9    0.516  36      pos
426        4     184       78      39     277 37.0    0.264  31      pos
427        0      94        0       0       0  0.0    0.256  25      neg
428        1     181       64      30     180 34.1    0.328  38      pos
429        0     135       94      46     145 40.6    0.284  26      neg
430        1      95       82      25     180 35.0    0.233  43      pos
431        2      99        0       0       0 22.2    0.108  23      neg
432        3      89       74      16      85 30.4    0.551  38      neg
433        1      80       74      11      60 30.0    0.527  22      neg
434        2     139       75       0       0 25.6    0.167  29      neg
435        1      90       68       8       0 24.5    1.138  36      neg
436        0     141        0       0       0 42.4    0.205  29      pos
437       12     140       85      33       0 37.4    0.244  41      neg
438        5     147       75       0       0 29.9    0.434  28      neg
439        1      97       70      15       0 18.2    0.147  21      neg
440        6     107       88       0       0 36.8    0.727  31      neg
441        0     189      104      25       0 34.3    0.435  41      pos
442        2      83       66      23      50 32.2    0.497  22      neg
443        4     117       64      27     120 33.2    0.230  24      neg
444        8     108       70       0       0 30.5    0.955  33      pos
445        4     117       62      12       0 29.7    0.380  30      pos
446        0     180       78      63      14 59.4    2.420  25      pos
447        1     100       72      12      70 25.3    0.658  28      neg
448        0      95       80      45      92 36.5    0.330  26      neg
449        0     104       64      37      64 33.6    0.510  22      pos
450        0     120       74      18      63 30.5    0.285  26      neg
451        1      82       64      13      95 21.2    0.415  23      neg
452        2     134       70       0       0 28.9    0.542  23      pos
453        0      91       68      32     210 39.9    0.381  25      neg
454        2     119        0       0       0 19.6    0.832  72      neg
455        2     100       54      28     105 37.8    0.498  24      neg
456       14     175       62      30       0 33.6    0.212  38      pos
457        1     135       54       0       0 26.7    0.687  62      neg
458        5      86       68      28      71 30.2    0.364  24      neg
459       10     148       84      48     237 37.6    1.001  51      pos
460        9     134       74      33      60 25.9    0.460  81      neg
461        9     120       72      22      56 20.8    0.733  48      neg
462        1      71       62       0       0 21.8    0.416  26      neg
463        8      74       70      40      49 35.3    0.705  39      neg
464        5      88       78      30       0 27.6    0.258  37      neg
465       10     115       98       0       0 24.0    1.022  34      neg
466        0     124       56      13     105 21.8    0.452  21      neg
467        0      74       52      10      36 27.8    0.269  22      neg
468        0      97       64      36     100 36.8    0.600  25      neg
469        8     120        0       0       0 30.0    0.183  38      pos
470        6     154       78      41     140 46.1    0.571  27      neg
471        1     144       82      40       0 41.3    0.607  28      neg
472        0     137       70      38       0 33.2    0.170  22      neg
473        0     119       66      27       0 38.8    0.259  22      neg
474        7     136       90       0       0 29.9    0.210  50      neg
475        4     114       64       0       0 28.9    0.126  24      neg
476        0     137       84      27       0 27.3    0.231  59      neg
477        2     105       80      45     191 33.7    0.711  29      pos
478        7     114       76      17     110 23.8    0.466  31      neg
479        8     126       74      38      75 25.9    0.162  39      neg
480        4     132       86      31       0 28.0    0.419  63      neg
481        3     158       70      30     328 35.5    0.344  35      pos
482        0     123       88      37       0 35.2    0.197  29      neg
483        4      85       58      22      49 27.8    0.306  28      neg
484        0      84       82      31     125 38.2    0.233  23      neg
485        0     145        0       0       0 44.2    0.630  31      pos
486        0     135       68      42     250 42.3    0.365  24      pos
487        1     139       62      41     480 40.7    0.536  21      neg
488        0     173       78      32     265 46.5    1.159  58      neg
489        4      99       72      17       0 25.6    0.294  28      neg
490        8     194       80       0       0 26.1    0.551  67      neg
491        2      83       65      28      66 36.8    0.629  24      neg
492        2      89       90      30       0 33.5    0.292  42      neg
493        4      99       68      38       0 32.8    0.145  33      neg
494        4     125       70      18     122 28.9    1.144  45      pos
495        3      80        0       0       0  0.0    0.174  22      neg
496        6     166       74       0       0 26.6    0.304  66      neg
497        5     110       68       0       0 26.0    0.292  30      neg
498        2      81       72      15      76 30.1    0.547  25      neg
499        7     195       70      33     145 25.1    0.163  55      pos
500        6     154       74      32     193 29.3    0.839  39      neg
501        2     117       90      19      71 25.2    0.313  21      neg
502        3      84       72      32       0 37.2    0.267  28      neg
503        6       0       68      41       0 39.0    0.727  41      pos
504        7      94       64      25      79 33.3    0.738  41      neg
505        3      96       78      39       0 37.3    0.238  40      neg
506       10      75       82       0       0 33.3    0.263  38      neg
507        0     180       90      26      90 36.5    0.314  35      pos
508        1     130       60      23     170 28.6    0.692  21      neg
509        2      84       50      23      76 30.4    0.968  21      neg
510        8     120       78       0       0 25.0    0.409  64      neg
511       12      84       72      31       0 29.7    0.297  46      pos
512        0     139       62      17     210 22.1    0.207  21      neg
513        9      91       68       0       0 24.2    0.200  58      neg
514        2      91       62       0       0 27.3    0.525  22      neg
515        3      99       54      19      86 25.6    0.154  24      neg
516        3     163       70      18     105 31.6    0.268  28      pos
517        9     145       88      34     165 30.3    0.771  53      pos
518        7     125       86       0       0 37.6    0.304  51      neg
519       13      76       60       0       0 32.8    0.180  41      neg
520        6     129       90       7     326 19.6    0.582  60      neg
521        2      68       70      32      66 25.0    0.187  25      neg
522        3     124       80      33     130 33.2    0.305  26      neg
523        6     114        0       0       0  0.0    0.189  26      neg
524        9     130       70       0       0 34.2    0.652  45      pos
525        3     125       58       0       0 31.6    0.151  24      neg
526        3      87       60      18       0 21.8    0.444  21      neg
527        1      97       64      19      82 18.2    0.299  21      neg
528        3     116       74      15     105 26.3    0.107  24      neg
529        0     117       66      31     188 30.8    0.493  22      neg
530        0     111       65       0       0 24.6    0.660  31      neg
531        2     122       60      18     106 29.8    0.717  22      neg
532        0     107       76       0       0 45.3    0.686  24      neg
533        1      86       66      52      65 41.3    0.917  29      neg
534        6      91        0       0       0 29.8    0.501  31      neg
535        1      77       56      30      56 33.3    1.251  24      neg
536        4     132        0       0       0 32.9    0.302  23      pos
537        0     105       90       0       0 29.6    0.197  46      neg
538        0      57       60       0       0 21.7    0.735  67      neg
539        0     127       80      37     210 36.3    0.804  23      neg
540        3     129       92      49     155 36.4    0.968  32      pos
541        8     100       74      40     215 39.4    0.661  43      pos
542        3     128       72      25     190 32.4    0.549  27      pos
543       10      90       85      32       0 34.9    0.825  56      pos
544        4      84       90      23      56 39.5    0.159  25      neg
545        1      88       78      29      76 32.0    0.365  29      neg
546        8     186       90      35     225 34.5    0.423  37      pos
547        5     187       76      27     207 43.6    1.034  53      pos
548        4     131       68      21     166 33.1    0.160  28      neg
549        1     164       82      43      67 32.8    0.341  50      neg
550        4     189      110      31       0 28.5    0.680  37      neg
551        1     116       70      28       0 27.4    0.204  21      neg
552        3      84       68      30     106 31.9    0.591  25      neg
553        6     114       88       0       0 27.8    0.247  66      neg
554        1      88       62      24      44 29.9    0.422  23      neg
555        1      84       64      23     115 36.9    0.471  28      neg
556        7     124       70      33     215 25.5    0.161  37      neg
557        1      97       70      40       0 38.1    0.218  30      neg
558        8     110       76       0       0 27.8    0.237  58      neg
559       11     103       68      40       0 46.2    0.126  42      neg
560       11      85       74       0       0 30.1    0.300  35      neg
561        6     125       76       0       0 33.8    0.121  54      pos
562        0     198       66      32     274 41.3    0.502  28      pos
563        1      87       68      34      77 37.6    0.401  24      neg
564        6      99       60      19      54 26.9    0.497  32      neg
565        0      91       80       0       0 32.4    0.601  27      neg
566        2      95       54      14      88 26.1    0.748  22      neg
567        1      99       72      30      18 38.6    0.412  21      neg
568        6      92       62      32     126 32.0    0.085  46      neg
569        4     154       72      29     126 31.3    0.338  37      neg
570        0     121       66      30     165 34.3    0.203  33      pos
571        3      78       70       0       0 32.5    0.270  39      neg
572        2     130       96       0       0 22.6    0.268  21      neg
573        3     111       58      31      44 29.5    0.430  22      neg
574        2      98       60      17     120 34.7    0.198  22      neg
575        1     143       86      30     330 30.1    0.892  23      neg
576        1     119       44      47      63 35.5    0.280  25      neg
577        6     108       44      20     130 24.0    0.813  35      neg
578        2     118       80       0       0 42.9    0.693  21      pos
579       10     133       68       0       0 27.0    0.245  36      neg
580        2     197       70      99       0 34.7    0.575  62      pos
581        0     151       90      46       0 42.1    0.371  21      pos
582        6     109       60      27       0 25.0    0.206  27      neg
583       12     121       78      17       0 26.5    0.259  62      neg
584        8     100       76       0       0 38.7    0.190  42      neg
585        8     124       76      24     600 28.7    0.687  52      pos
586        1      93       56      11       0 22.5    0.417  22      neg
587        8     143       66       0       0 34.9    0.129  41      pos
588        6     103       66       0       0 24.3    0.249  29      neg
589        3     176       86      27     156 33.3    1.154  52      pos
590        0      73        0       0       0 21.1    0.342  25      neg
591       11     111       84      40       0 46.8    0.925  45      pos
592        2     112       78      50     140 39.4    0.175  24      neg
593        3     132       80       0       0 34.4    0.402  44      pos
594        2      82       52      22     115 28.5    1.699  25      neg
595        6     123       72      45     230 33.6    0.733  34      neg
596        0     188       82      14     185 32.0    0.682  22      pos
597        0      67       76       0       0 45.3    0.194  46      neg
598        1      89       24      19      25 27.8    0.559  21      neg
599        1     173       74       0       0 36.8    0.088  38      pos
600        1     109       38      18     120 23.1    0.407  26      neg
601        1     108       88      19       0 27.1    0.400  24      neg
602        6      96        0       0       0 23.7    0.190  28      neg
603        1     124       74      36       0 27.8    0.100  30      neg
604        7     150       78      29     126 35.2    0.692  54      pos
605        4     183        0       0       0 28.4    0.212  36      pos
606        1     124       60      32       0 35.8    0.514  21      neg
607        1     181       78      42     293 40.0    1.258  22      pos
608        1      92       62      25      41 19.5    0.482  25      neg
609        0     152       82      39     272 41.5    0.270  27      neg
610        1     111       62      13     182 24.0    0.138  23      neg
611        3     106       54      21     158 30.9    0.292  24      neg
612        3     174       58      22     194 32.9    0.593  36      pos
613        7     168       88      42     321 38.2    0.787  40      pos
614        6     105       80      28       0 32.5    0.878  26      neg
615       11     138       74      26     144 36.1    0.557  50      pos
616        3     106       72       0       0 25.8    0.207  27      neg
617        6     117       96       0       0 28.7    0.157  30      neg
618        2      68       62      13      15 20.1    0.257  23      neg
619        9     112       82      24       0 28.2    1.282  50      pos
620        0     119        0       0       0 32.4    0.141  24      pos
621        2     112       86      42     160 38.4    0.246  28      neg
622        2      92       76      20       0 24.2    1.698  28      neg
623        6     183       94       0       0 40.8    1.461  45      neg
624        0      94       70      27     115 43.5    0.347  21      neg
625        2     108       64       0       0 30.8    0.158  21      neg
626        4      90       88      47      54 37.7    0.362  29      neg
627        0     125       68       0       0 24.7    0.206  21      neg
628        0     132       78       0       0 32.4    0.393  21      neg
629        5     128       80       0       0 34.6    0.144  45      neg
630        4      94       65      22       0 24.7    0.148  21      neg
631        7     114       64       0       0 27.4    0.732  34      pos
632        0     102       78      40      90 34.5    0.238  24      neg
633        2     111       60       0       0 26.2    0.343  23      neg
634        1     128       82      17     183 27.5    0.115  22      neg
635       10      92       62       0       0 25.9    0.167  31      neg
636       13     104       72       0       0 31.2    0.465  38      pos
637        5     104       74       0       0 28.8    0.153  48      neg
638        2      94       76      18      66 31.6    0.649  23      neg
639        7      97       76      32      91 40.9    0.871  32      pos
640        1     100       74      12      46 19.5    0.149  28      neg
641        0     102       86      17     105 29.3    0.695  27      neg
642        4     128       70       0       0 34.3    0.303  24      neg
643        6     147       80       0       0 29.5    0.178  50      pos
644        4      90        0       0       0 28.0    0.610  31      neg
645        3     103       72      30     152 27.6    0.730  27      neg
646        2     157       74      35     440 39.4    0.134  30      neg
647        1     167       74      17     144 23.4    0.447  33      pos
648        0     179       50      36     159 37.8    0.455  22      pos
649       11     136       84      35     130 28.3    0.260  42      pos
650        0     107       60      25       0 26.4    0.133  23      neg
651        1      91       54      25     100 25.2    0.234  23      neg
652        1     117       60      23     106 33.8    0.466  27      neg
653        5     123       74      40      77 34.1    0.269  28      neg
654        2     120       54       0       0 26.8    0.455  27      neg
655        1     106       70      28     135 34.2    0.142  22      neg
656        2     155       52      27     540 38.7    0.240  25      pos
657        2     101       58      35      90 21.8    0.155  22      neg
658        1     120       80      48     200 38.9    1.162  41      neg
659       11     127      106       0       0 39.0    0.190  51      neg
660        3      80       82      31      70 34.2    1.292  27      pos
661       10     162       84       0       0 27.7    0.182  54      neg
662        1     199       76      43       0 42.9    1.394  22      pos
663        8     167      106      46     231 37.6    0.165  43      pos
664        9     145       80      46     130 37.9    0.637  40      pos
665        6     115       60      39       0 33.7    0.245  40      pos
666        1     112       80      45     132 34.8    0.217  24      neg
667        4     145       82      18       0 32.5    0.235  70      pos
668       10     111       70      27       0 27.5    0.141  40      pos
669        6      98       58      33     190 34.0    0.430  43      neg
670        9     154       78      30     100 30.9    0.164  45      neg
671        6     165       68      26     168 33.6    0.631  49      neg
672        1      99       58      10       0 25.4    0.551  21      neg
673       10      68      106      23      49 35.5    0.285  47      neg
674        3     123      100      35     240 57.3    0.880  22      neg
675        8      91       82       0       0 35.6    0.587  68      neg
676        6     195       70       0       0 30.9    0.328  31      pos
677        9     156       86       0       0 24.8    0.230  53      pos
678        0      93       60       0       0 35.3    0.263  25      neg
679        3     121       52       0       0 36.0    0.127  25      pos
680        2     101       58      17     265 24.2    0.614  23      neg
681        2      56       56      28      45 24.2    0.332  22      neg
682        0     162       76      36       0 49.6    0.364  26      pos
683        0      95       64      39     105 44.6    0.366  22      neg
684        4     125       80       0       0 32.3    0.536  27      pos
685        5     136       82       0       0  0.0    0.640  69      neg
686        2     129       74      26     205 33.2    0.591  25      neg
687        3     130       64       0       0 23.1    0.314  22      neg
688        1     107       50      19       0 28.3    0.181  29      neg
689        1     140       74      26     180 24.1    0.828  23      neg
690        1     144       82      46     180 46.1    0.335  46      pos
691        8     107       80       0       0 24.6    0.856  34      neg
692       13     158      114       0       0 42.3    0.257  44      pos
693        2     121       70      32      95 39.1    0.886  23      neg
694        7     129       68      49     125 38.5    0.439  43      pos
695        2      90       60       0       0 23.5    0.191  25      neg
696        7     142       90      24     480 30.4    0.128  43      pos
697        3     169       74      19     125 29.9    0.268  31      pos
698        0      99        0       0       0 25.0    0.253  22      neg
699        4     127       88      11     155 34.5    0.598  28      neg
700        4     118       70       0       0 44.5    0.904  26      neg
701        2     122       76      27     200 35.9    0.483  26      neg
702        6     125       78      31       0 27.6    0.565  49      pos
703        1     168       88      29       0 35.0    0.905  52      pos
704        2     129        0       0       0 38.5    0.304  41      neg
705        4     110       76      20     100 28.4    0.118  27      neg
706        6      80       80      36       0 39.8    0.177  28      neg
707       10     115        0       0       0  0.0    0.261  30      pos
708        2     127       46      21     335 34.4    0.176  22      neg
709        9     164       78       0       0 32.8    0.148  45      pos
710        2      93       64      32     160 38.0    0.674  23      pos
711        3     158       64      13     387 31.2    0.295  24      neg
712        5     126       78      27      22 29.6    0.439  40      neg
713       10     129       62      36       0 41.2    0.441  38      pos
714        0     134       58      20     291 26.4    0.352  21      neg
715        3     102       74       0       0 29.5    0.121  32      neg
716        7     187       50      33     392 33.9    0.826  34      pos
717        3     173       78      39     185 33.8    0.970  31      pos
718       10      94       72      18       0 23.1    0.595  56      neg
719        1     108       60      46     178 35.5    0.415  24      neg
720        5      97       76      27       0 35.6    0.378  52      pos
721        4      83       86      19       0 29.3    0.317  34      neg
722        1     114       66      36     200 38.1    0.289  21      neg
723        1     149       68      29     127 29.3    0.349  42      pos
724        5     117       86      30     105 39.1    0.251  42      neg
725        1     111       94       0       0 32.8    0.265  45      neg
726        4     112       78      40       0 39.4    0.236  38      neg
727        1     116       78      29     180 36.1    0.496  25      neg
728        0     141       84      26       0 32.4    0.433  22      neg
729        2     175       88       0       0 22.9    0.326  22      neg
730        2      92       52       0       0 30.1    0.141  22      neg
731        3     130       78      23      79 28.4    0.323  34      pos
732        8     120       86       0       0 28.4    0.259  22      pos
733        2     174       88      37     120 44.5    0.646  24      pos
734        2     106       56      27     165 29.0    0.426  22      neg
735        2     105       75       0       0 23.3    0.560  53      neg
736        4      95       60      32       0 35.4    0.284  28      neg
737        0     126       86      27     120 27.4    0.515  21      neg
738        8      65       72      23       0 32.0    0.600  42      neg
739        2      99       60      17     160 36.6    0.453  21      neg
740        1     102       74       0       0 39.5    0.293  42      pos
741       11     120       80      37     150 42.3    0.785  48      pos
742        3     102       44      20      94 30.8    0.400  26      neg
743        1     109       58      18     116 28.5    0.219  22      neg
744        9     140       94       0       0 32.7    0.734  45      pos
745       13     153       88      37     140 40.6    1.174  39      neg
746       12     100       84      33     105 30.0    0.488  46      neg
747        1     147       94      41       0 49.3    0.358  27      pos
748        1      81       74      41      57 46.3    1.096  32      neg
749        3     187       70      22     200 36.4    0.408  36      pos
750        6     162       62       0       0 24.3    0.178  50      pos
751        4     136       70       0       0 31.2    1.182  22      pos
752        1     121       78      39      74 39.0    0.261  28      neg
753        3     108       62      24       0 26.0    0.223  25      neg
754        0     181       88      44     510 43.3    0.222  26      pos
755        8     154       78      32       0 32.4    0.443  45      pos
756        1     128       88      39     110 36.5    1.057  37      pos
757        7     137       90      41       0 32.0    0.391  39      neg
758        0     123       72       0       0 36.3    0.258  52      pos
759        1     106       76       0       0 37.5    0.197  26      neg
760        6     190       92       0       0 35.5    0.278  66      pos
761        2      88       58      26      16 28.4    0.766  22      neg
762        9     170       74      31       0 44.0    0.403  43      pos
763        9      89       62       0       0 22.5    0.142  33      neg
764       10     101       76      48     180 32.9    0.171  63      neg
765        2     122       70      27       0 36.8    0.340  27      neg
766        5     121       72      23     112 26.2    0.245  30      neg
767        1     126       60       0       0 30.1    0.349  47      pos
768        1      93       70      31       0 30.4    0.315  23      neg</code></pre>
</div>
</div>
<p>A quick exploration reveals that there are more zeros in the data than expected (especially since a BMI or tricep skin fold thickness of 0 is impossible), implying that missing values are recorded as zeros. See for instance the histogram of the tricep skin fold thickness, which has a number of 0 entries that are set apart from the other entries.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">ggplot</span>(diabetes_orig) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> triceps))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2020-03-25_machine_learning_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This phenomena can also seen in the glucose, pressure, insulin and mass variables. Thus, we convert the 0 entries in all variables (other than “pregnant”) to <code>NA</code>. To do that, we use the <code>mutate_at()</code> function (which will soon be superseded by <code>mutate()</code> with <code>across()</code>) to specify which variables we want to apply our mutating function to, and we use the <code>if_else()</code> function to specify what to replace the value with if the condition is true or false.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">diabetes_clean <span class="ot" style="color: #003B4F;">&lt;-</span> diabetes_orig <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(triceps, glucose, pressure, insulin, mass), </span>
<span id="cb7-3">            <span class="cf" style="color: #003B4F;">function</span>(.var) { </span>
<span id="cb7-4">              <span class="fu" style="color: #4758AB;">if_else</span>(<span class="at" style="color: #657422;">condition =</span> (.var <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># if true (i.e. the entry is 0)</span></span>
<span id="cb7-5">                      <span class="at" style="color: #657422;">true =</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(<span class="cn" style="color: #8f5902;">NA</span>),  <span class="co" style="color: #5E5E5E;"># replace the value with NA</span></span>
<span id="cb7-6">                      <span class="at" style="color: #657422;">false =</span> .var <span class="co" style="color: #5E5E5E;"># otherwise leave it as it is</span></span>
<span id="cb7-7">                      )</span>
<span id="cb7-8">            })</span></code></pre></div>
</div>
<p>Our data is ready. Hopefully you’ve replenished your cup of tea (or coffee if you’re into that for some reason). Let’s start making some tidy models!</p>
</section>
<section id="split-into-traintest" class="level1">
<h1>Split into train/test</h1>
<p>First, let’s split our dataset into training and testing data. The training data will be used to fit our model and tune its parameters, where the testing data will be used to evaluate our final model’s performance.</p>
<p>This split can be done automatically using the <code>inital_split()</code> function (from <code>rsample</code>) which creates a special “split” object.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">234589</span>)</span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;"># split the data into trainng (75%) and testing (25%)</span></span>
<span id="cb8-3">diabetes_split <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">initial_split</span>(diabetes_clean, </span>
<span id="cb8-4">                                <span class="at" style="color: #657422;">prop =</span> <span class="dv" style="color: #AD0000;">3</span><span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb8-5">diabetes_split</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Training/Testing/Total&gt;
&lt;576/192/768&gt;</code></pre>
</div>
</div>
<p>The printed output of <code>diabetes_split</code>, our split object, tells us how many observations we have in the training set, the testing set, and overall: <code>&lt;train/test/total&gt;</code>.</p>
<p>The training and testing sets can be extracted from the “split” object using the <code>training()</code> and <code>testing()</code> functions. Although, we won’t actually use these objects in the pipeline (we will be using the <code>diabetes_split</code> object itself).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># extract training and testing sets</span></span>
<span id="cb10-2">diabetes_train <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">training</span>(diabetes_split)</span>
<span id="cb10-3">diabetes_test <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">testing</span>(diabetes_split)</span></code></pre></div>
</div>
<p>At some point we’re going to want to do some parameter tuning, and to do that we’re going to want to use cross-validation. So we can create a cross-validated version of the training set in preparation for that moment using <code>vfold_cv()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># create CV object from training data</span></span>
<span id="cb11-2">diabetes_cv <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vfold_cv</span>(diabetes_train)</span></code></pre></div>
</div>
</section>
<section id="define-a-recipe" class="level1">
<h1>Define a recipe</h1>
<p>Recipes allow you to specify the role of each variable as an outcome or predictor variable (using a “formula”), and any pre-processing steps you want to conduct (such as normalization, imputation, PCA, etc).</p>
<p>Creating a recipe has two parts (layered on top of one another using pipes <code>%&gt;%</code>):</p>
<ol type="1">
<li><p><strong>Specify the formula</strong> (<code>recipe()</code>): specify the outcome variable and predictor variables</p></li>
<li><p><strong>Specify pre-processing steps</strong> (<code>step_zzz()</code>): define the pre-processing steps, such as imputation, creating dummy variables, scaling, and more</p></li>
</ol>
<p>For instance, we can define the following recipe</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># define the recipe</span></span>
<span id="cb12-2">diabetes_recipe <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb12-3">  <span class="co" style="color: #5E5E5E;"># which consists of the formula (outcome ~ predictors)</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;">recipe</span>(diabetes <span class="sc" style="color: #5E5E5E;">~</span> pregnant <span class="sc" style="color: #5E5E5E;">+</span> glucose <span class="sc" style="color: #5E5E5E;">+</span> pressure <span class="sc" style="color: #5E5E5E;">+</span> triceps <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb12-5">           insulin <span class="sc" style="color: #5E5E5E;">+</span> mass <span class="sc" style="color: #5E5E5E;">+</span> pedigree <span class="sc" style="color: #5E5E5E;">+</span> age, </span>
<span id="cb12-6">         <span class="at" style="color: #657422;">data =</span> diabetes_clean) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb12-7">  <span class="co" style="color: #5E5E5E;"># and some pre-processing steps</span></span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb12-9">  <span class="fu" style="color: #4758AB;">step_impute_knn</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>())</span></code></pre></div>
</div>
<p>If you’ve ever seen formulas before (e.g.&nbsp;using the <code>lm()</code> function in R), you might have noticed that we could have written our formula much more efficiently using the formula short-hand where <code>.</code> represents all of the variables in the data: <code>outcome ~ .</code> will fit a model that predicts the outcome using <em>all other columns</em>.</p>
<p>The full list of pre-processing steps available can be found <a href="https://tidymodels.github.io/recipes/articles/Custom_Steps.html">here</a>. In the recipe steps above we used the functions <code>all_numeric()</code> and <code>all_predictors()</code> as arguments to the pre-processing steps. These are called “role selections”, and they specify that we want to apply the step to “all numeric” variables or “all predictor variables”. The list of all potential role selectors can be found by typing <code>?selections</code> into your console.</p>
<p>Note that we used the original <code>diabetes_clean</code> data object (we set <code>recipe(..., data = diabetes_clean)</code>), rather than the <code>diabetes_train</code> object or the <code>diabetes_split</code> object. It turns out we could have used any of these. All recipes takes from the data object at this point is the <em>names and roles</em> of the outcome and predictor variables. We will apply this recipe to specific datasets later. This means that for large data sets, the head of the data could be used to pass the recipe a smaller data set to save time and memory.</p>
<p>Indeed, if we print a summary of the <code>diabetes_recipe</code> object, it just shows us how many predictor variables we’ve specified and the steps we’ve specified (but it doesn’t actually implement them yet!).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">diabetes_recipe</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Recipe ──────────────────────────────────────────────────────────────────────</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Inputs </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Number of variables by role</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>outcome:   1
predictor: 8</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Operations </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• Centering and scaling for: all_numeric()</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• K-nearest neighbor imputation for: all_predictors()</code></pre>
</div>
</div>
<p>If you want to extract the pre-processed dataset itself, you can first <code>prep()</code> the recipe for a specific dataset and <code>juice()</code> the prepped recipe to extract the pre-processed data. It turns out that extracting the pre-processed data isn’t actually necessary for the pipeline, since this will be done under the hood when the model is fit, but sometimes it’s useful anyway.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">diabetes_train_preprocessed <span class="ot" style="color: #003B4F;">&lt;-</span> diabetes_recipe <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb24-2">  <span class="co" style="color: #5E5E5E;"># apply the recipe to the training data</span></span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;">prep</span>(diabetes_train) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb24-4">  <span class="co" style="color: #5E5E5E;"># extract the pre-processed training dataset</span></span>
<span id="cb24-5">  <span class="fu" style="color: #4758AB;">juice</span>()</span>
<span id="cb24-6">diabetes_train_preprocessed</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 576 × 9
   pregnant glucose pressure triceps insulin     mass pedigree     age diabetes
      &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt;   
 1   1.23   -0.390    0.262   0.892   -0.317 -0.656      0.502 -0.201  pos     
 2   0.0447  1.09    -0.0616 -0.0348  -0.219 -0.168     -0.400  0.301  neg     
 3   1.82    1.91    -0.224   0.595    0.146  0.379     -0.813  0.301  neg     
 4  -1.14   -0.0948  -0.710  -0.591   -0.522 -0.311      3.76  -1.04   neg     
 5  -0.548   0.233    0.424   0.706    0.239  1.56       2.25  -0.201  pos     
 6   0.637  -0.0620  -1.84   -0.683    0.190 -0.771      2.53  -0.0335 pos     
 7  -0.844  -1.64    -2.01   -1.05    -0.629 -1.73      -0.445 -0.953  neg     
 8  -0.548  -0.423   -1.68   -0.313   -0.735  0.00505   -0.460 -0.953  neg     
 9  -1.14    0.463   -0.386   1.17     0.796  1.41      -0.320 -0.786  pos     
10   1.53    1.41     0.424   0.150    0.877  0.0482    -0.968  0.969  pos     
# … with 566 more rows</code></pre>
</div>
</div>
<p>I wrote a much longer <a href="http://www.rebeccabarter.com/blog/2019-06-06_pre_processing/">post on recipes</a> if you’d like to check out more details. However, note that the preparation and bake steps described in that post are no longer necessary in the tidymodels pipeline, since they’re now implemented under the hood by the later model fitting functions in this pipeline.</p>
</section>
<section id="specify-the-model" class="level1">
<h1>Specify the model</h1>
<p>So far we’ve split our data into training/testing, and we’ve specified our pre-processing steps using a recipe. The next thing we want to specify is our model (using the <code>parsnip</code> package).</p>
<p>Parsnip offers a unified interface for the massive variety of models that exist in R. This means that you only have to learn one way of specifying a model, and you can use this specification and have it generate a linear model, a random forest model, a support vector machine model, and more with a single line of code.</p>
<p>There are a few primary components that you need to provide for the model specification</p>
<ol type="1">
<li><p>The <strong>model type</strong>: what kind of model you want to fit, set using a different function depending on the model, such as <code>rand_forest()</code> for random forest, <code>logistic_reg()</code> for logistic regression, <code>svm_poly()</code> for a polynomial SVM model etc. The full list of models available via parsnip can be found <a href="https://tidymodels.github.io/parsnip/articles/articles/Models.html">here</a>.</p></li>
<li><p>The <strong>arguments</strong>: the model parameter values (now consistently named across different models), set using <code>set_args()</code>.</p></li>
<li><p>The <strong>engine</strong>: the underlying package the model should come from (e.g.&nbsp;“ranger” for the ranger implementation of Random Forest), set using <code>set_engine()</code>.</p></li>
<li><p>The <strong>mode</strong>: the type of prediction - since several packages can do both classification (binary/categorical prediction) and regression (continuous prediction), set using <code>set_mode()</code>.</p></li>
</ol>
<p>For instance, if we want to fit a random forest model as implemented by the <code>ranger</code> package for the purpose of classification and we want to tune the <code>mtry</code> parameter (the number of randomly selected variables to be considered at each split in the trees), then we would define the following model specification:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">rf_model <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb26-2">  <span class="co" style="color: #5E5E5E;"># specify that the model is a random forest</span></span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;">rand_forest</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb26-4">  <span class="co" style="color: #5E5E5E;"># specify that the `mtry` parameter needs to be tuned</span></span>
<span id="cb26-5">  <span class="fu" style="color: #4758AB;">set_args</span>(<span class="at" style="color: #657422;">mtry =</span> <span class="fu" style="color: #4758AB;">tune</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb26-6">  <span class="co" style="color: #5E5E5E;"># select the engine/package that underlies the model</span></span>
<span id="cb26-7">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"ranger"</span>, <span class="at" style="color: #657422;">importance =</span> <span class="st" style="color: #20794D;">"impurity"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb26-8">  <span class="co" style="color: #5E5E5E;"># choose either the continuous regression or binary classification mode</span></span>
<span id="cb26-9">  <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">"classification"</span>) </span></code></pre></div>
</div>
<p>If you want to be able to examine the variable importance of your final model later, you will need to set <code>importance</code> argument when setting the engine. For ranger, the importance options are <code>"impurity"</code> or <code>"permutation"</code>.</p>
<p>As another example, the following code would instead specify a logistic regression model from the <code>glm</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">lr_model <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb27-2">  <span class="co" style="color: #5E5E5E;"># specify that the model is a random forest</span></span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;">logistic_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb27-4">  <span class="co" style="color: #5E5E5E;"># select the engine/package that underlies the model</span></span>
<span id="cb27-5">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"glm"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb27-6">  <span class="co" style="color: #5E5E5E;"># choose either the continuous regression or binary classification mode</span></span>
<span id="cb27-7">  <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">"classification"</span>) </span></code></pre></div>
</div>
<p>Note that this code doesn’t actually fit the model. Like the recipe, it just outlines a description of the model. Moreover, setting a parameter to <code>tune()</code> means that it will be tuned later in the tune stage of the pipeline (i.e.&nbsp;the value of the parameter that yields the best performance will be chosen). You could also just specify a particular value of the parameter if you don’t want to tune it e.g.&nbsp;using <code>set_args(mtry = 4)</code>.</p>
<p>Another thing to note is that nothing about this model specification is specific to the diabetes dataset.</p>
</section>
<section id="put-it-all-together-in-a-workflow" class="level1">
<h1>Put it all together in a workflow</h1>
<p>We’re now ready to put the model and recipes together into a workflow. You initiate a workflow using <code>workflow()</code> (from the <code>workflows</code> package) and then you can add a recipe and add a model to it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># set the workflow</span></span>
<span id="cb28-2">rf_workflow <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb28-3">  <span class="co" style="color: #5E5E5E;"># add the recipe</span></span>
<span id="cb28-4">  <span class="fu" style="color: #4758AB;">add_recipe</span>(diabetes_recipe) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb28-5">  <span class="co" style="color: #5E5E5E;"># add the model</span></span>
<span id="cb28-6">  <span class="fu" style="color: #4758AB;">add_model</span>(rf_model)</span></code></pre></div>
</div>
<p>Note that we still haven’t yet implemented the pre-processing steps in the recipe nor have we fit the model. We’ve just written the framework. It is only when we tune the parameters or fit the model that the recipe and model frameworks are actually implemented.</p>
</section>
<section id="tune-the-parameters" class="level1">
<h1>Tune the parameters</h1>
<p>Since we had a parameter that we designated to be tuned (<code>mtry</code>), we need to tune it (i.e.&nbsp;choose the value that leads to the best performance) before fitting our model. If you don’t have any parameters to tune, you can skip this step.</p>
<p>Note that we will do our tuning using the cross-validation object (<code>diabetes_cv</code>). To do this, we specify the range of <code>mtry</code> values we want to try, and then we add a tuning layer to our workflow using <code>tune_grid()</code> (from the <code>tune</code> package). Note that we focus on two metrics: <code>accuracy</code> and <code>roc_auc</code> (from the <code>yardstick</code> package).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># specify which values eant to try</span></span>
<span id="cb29-2">rf_grid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">expand.grid</span>(<span class="at" style="color: #657422;">mtry =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb29-3"><span class="co" style="color: #5E5E5E;"># extract results</span></span>
<span id="cb29-4">rf_tune_results <span class="ot" style="color: #003B4F;">&lt;-</span> rf_workflow <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb29-5">  <span class="fu" style="color: #4758AB;">tune_grid</span>(<span class="at" style="color: #657422;">resamples =</span> diabetes_cv, <span class="co" style="color: #5E5E5E;">#CV object</span></span>
<span id="cb29-6">            <span class="at" style="color: #657422;">grid =</span> rf_grid, <span class="co" style="color: #5E5E5E;"># grid of values to try</span></span>
<span id="cb29-7">            <span class="at" style="color: #657422;">metrics =</span> <span class="fu" style="color: #4758AB;">metric_set</span>(accuracy, roc_auc) <span class="co" style="color: #5E5E5E;"># metrics we care about</span></span>
<span id="cb29-8">            )</span></code></pre></div>
</div>
<p>You can tune multiple parameters at once by providing multiple parameters to the <code>expand.grid()</code> function, e.g.&nbsp;<code>expand.grid(mtry = c(3, 4, 5), trees = c(100, 500))</code>.</p>
<p>It’s always a good idea to explore the results of the cross-validation. <code>collect_metrics()</code> is a really handy function that can be used in a variety of circumstances to extract any metrics that have been calculated within the object it’s being used on. In this case, the metrics come from the cross-validation performance across the different values of the parameters.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;"># print results</span></span>
<span id="cb30-2">rf_tune_results <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-3">  <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 7
   mtry .metric  .estimator  mean     n std_err .config             
  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               
1     3 accuracy binary     0.762    10  0.0108 Preprocessor1_Model1
2     3 roc_auc  binary     0.840    10  0.0116 Preprocessor1_Model1
3     4 accuracy binary     0.767    10  0.0130 Preprocessor1_Model2
4     4 roc_auc  binary     0.840    10  0.0128 Preprocessor1_Model2
5     5 accuracy binary     0.766    10  0.0108 Preprocessor1_Model3
6     5 roc_auc  binary     0.837    10  0.0118 Preprocessor1_Model3</code></pre>
</div>
</div>
<p>Across both accuracy and AUC, <code>mtry = 4</code> yields the best performance (<em>just</em>).</p>
</section>
<section id="finalize-the-workflow" class="level1">
<h1>Finalize the workflow</h1>
<p>We want to add a layer to our workflow that corresponds to the tuned parameter, i.e.&nbsp;sets <code>mtry</code> to be the value that yielded the best results. If you didn’t tune any parameters, you can skip this step.</p>
<p>We can extract the best value for the accuracy metric by applying the <code>select_best()</code> function to the tune object.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">param_final <span class="ot" style="color: #003B4F;">&lt;-</span> rf_tune_results <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;">select_best</span>(<span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"accuracy"</span>)</span>
<span id="cb32-3">param_final</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 2
   mtry .config             
  &lt;dbl&gt; &lt;chr&gt;               
1     4 Preprocessor1_Model2</code></pre>
</div>
</div>
<p>Then we can add this parameter to the workflow using the <code>finalize_workflow()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">rf_workflow <span class="ot" style="color: #003B4F;">&lt;-</span> rf_workflow <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb34-2">  <span class="fu" style="color: #4758AB;">finalize_workflow</span>(param_final)</span></code></pre></div>
</div>
</section>
<section id="evaluate-the-model-on-the-test-set" class="level1">
<h1>Evaluate the model on the test set</h1>
<p>Now we’ve defined our recipe, our model, and tuned the model’s parameters, we’re ready to actually fit the final model. Since all of this information is contained within the workflow object, we will apply the <code>last_fit()</code> function to our workflow and our train/test split object. This will automatically train the model specified by the workflow using the training data, and produce evaluations based on the test set.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">rf_fit <span class="ot" style="color: #003B4F;">&lt;-</span> rf_workflow <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb35-2">  <span class="co" style="color: #5E5E5E;"># fit on the training set and evaluate on test set</span></span>
<span id="cb35-3">  <span class="fu" style="color: #4758AB;">last_fit</span>(diabetes_split)</span></code></pre></div>
</div>
<p>Note that the fit object that is created is a data-frame-like object; specifically, it is a tibble with list columns.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">rf_fit</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># Resampling results
# Manual resampling 
# A tibble: 1 × 6
  splits            id               .metrics .notes   .predictions .workflow 
  &lt;list&gt;            &lt;chr&gt;            &lt;list&gt;   &lt;list&gt;   &lt;list&gt;       &lt;list&gt;    
1 &lt;split [576/192]&gt; train/test split &lt;tibble&gt; &lt;tibble&gt; &lt;tibble&gt;     &lt;workflow&gt;</code></pre>
</div>
</div>
<p>This is a really nice feature of tidymodels (and is what makes it work so nicely with the tidyverse) since you can do all of your tidyverse operations to the model object. While truly taking advantage of this flexibility requires proficiency with purrr, if you don’t want to deal with purrr and list-columns, there are functions that can extract the relevant information from the fit object that remove the need for purrr as we will see below.</p>
<p>Since we supplied the train/test object when we fit the workflow, the metrics are evaluated on the <em>test</em> set. Now when we use the <code>collect_metrics()</code> function (recall we used this when tuning our parameters), it extracts the performance of the final model (since <code>rf_fit</code> now consists of a single final model) applied to the <em>test</em> set.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">test_performance <span class="ot" style="color: #003B4F;">&lt;-</span> rf_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span>
<span id="cb38-2">test_performance</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 4
  .metric  .estimator .estimate .config             
  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               
1 accuracy binary         0.792 Preprocessor1_Model1
2 roc_auc  binary         0.853 Preprocessor1_Model1</code></pre>
</div>
</div>
<p>Overall the performance is very good, with an accuracy of 0.74 and an AUC of 0.82.</p>
<p>You can also extract the test set predictions themselves using the <code>collect_predictions()</code> function. Note that there are 192 rows in the predictions object below which matches the number of <em>test set</em> observations (just to give you some evidence that these are based on the test set rather than the training set).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;"># generate predictions from the test set</span></span>
<span id="cb40-2">test_predictions <span class="ot" style="color: #003B4F;">&lt;-</span> rf_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span>
<span id="cb40-3">test_predictions</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 192 × 7
   id               .pred_neg .pred_pos  .row .pred_class diabetes .config      
   &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt; &lt;int&gt; &lt;fct&gt;       &lt;fct&gt;    &lt;chr&gt;        
 1 train/test split     0.365    0.635      3 pos         pos      Preprocessor…
 2 train/test split     0.213    0.787      9 pos         pos      Preprocessor…
 3 train/test split     0.765    0.235     11 neg         neg      Preprocessor…
 4 train/test split     0.511    0.489     13 neg         neg      Preprocessor…
 5 train/test split     0.594    0.406     18 neg         pos      Preprocessor…
 6 train/test split     0.356    0.644     26 pos         pos      Preprocessor…
 7 train/test split     0.209    0.791     32 pos         pos      Preprocessor…
 8 train/test split     0.751    0.249     50 neg         neg      Preprocessor…
 9 train/test split     0.961    0.0385    53 neg         neg      Preprocessor…
10 train/test split     0.189    0.811     55 pos         neg      Preprocessor…
# … with 182 more rows</code></pre>
</div>
</div>
<p>Since this is just a normal data frame/tibble object, we can generate summaries and plots such as a confusion matrix.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="co" style="color: #5E5E5E;"># generate a confusion matrix</span></span>
<span id="cb42-2">test_predictions <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb42-3">  <span class="fu" style="color: #4758AB;">conf_mat</span>(<span class="at" style="color: #657422;">truth =</span> diabetes, <span class="at" style="color: #657422;">estimate =</span> .pred_class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          Truth
Prediction neg pos
       neg 107  17
       pos  23  45</code></pre>
</div>
</div>
<p>We could also plot distributions of the predicted probability distributions for each class.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">test_predictions <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb44-3">  <span class="fu" style="color: #4758AB;">geom_density</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> .pred_pos, <span class="at" style="color: #657422;">fill =</span> diabetes), </span>
<span id="cb44-4">               <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.rebeccabarter.com/blog/2020-03-25_machine_learning_files/figure-html/unnamed-chunk-24-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>If you’re familiar with purrr, you could use purrr functions to extract the predictions column using <code>pull()</code>. The following code does almost the same thing as <code>collect_predictions()</code>. You could similarly have done this with the <code>.metrics</code> column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">test_predictions <span class="ot" style="color: #003B4F;">&lt;-</span> rf_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pull</span>(.predictions)</span>
<span id="cb45-2">test_predictions</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
# A tibble: 192 × 6
   .pred_neg .pred_pos  .row .pred_class diabetes .config             
       &lt;dbl&gt;     &lt;dbl&gt; &lt;int&gt; &lt;fct&gt;       &lt;fct&gt;    &lt;chr&gt;               
 1     0.365    0.635      3 pos         pos      Preprocessor1_Model1
 2     0.213    0.787      9 pos         pos      Preprocessor1_Model1
 3     0.765    0.235     11 neg         neg      Preprocessor1_Model1
 4     0.511    0.489     13 neg         neg      Preprocessor1_Model1
 5     0.594    0.406     18 neg         pos      Preprocessor1_Model1
 6     0.356    0.644     26 pos         pos      Preprocessor1_Model1
 7     0.209    0.791     32 pos         pos      Preprocessor1_Model1
 8     0.751    0.249     50 neg         neg      Preprocessor1_Model1
 9     0.961    0.0385    53 neg         neg      Preprocessor1_Model1
10     0.189    0.811     55 pos         neg      Preprocessor1_Model1
# … with 182 more rows</code></pre>
</div>
</div>
</section>
<section id="fitting-and-using-your-final-model" class="level1">
<h1>Fitting and using your final model</h1>
<p>The previous section evaluated the model trained on the training data using the testing data. But once you’ve determined your final model, you often want to train it on your full dataset and then use it to predict the response for <em>new</em> data.</p>
<p>If you want to use your model to predict the response for new observations, you need to use the <code>fit()</code> function on your workflow and the dataset that you want to fit the final model on (e.g.&nbsp;the complete training + testing dataset).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">final_model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fit</span>(rf_workflow, diabetes_clean)</span></code></pre></div>
</div>
<p>The <code>final_model</code> object contains a few things including the ranger object trained with the parameters established through the workflow contained in <code>rf_workflow</code> based on the data in <code>diabetes_clean</code> (the combined training and testing data).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">final_model</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: rand_forest()

── Preprocessor ────────────────────────────────────────────────────────────────
2 Recipe Steps

• step_normalize()
• step_impute_knn()

── Model ───────────────────────────────────────────────────────────────────────
Ranger result

Call:
 ranger::ranger(x = maybe_data_frame(x), y = y, mtry = min_cols(~4,      x), importance = ~"impurity", num.threads = 1, verbose = FALSE,      seed = sample.int(10^5, 1), probability = TRUE) 

Type:                             Probability estimation 
Number of trees:                  500 
Sample size:                      768 
Number of independent variables:  8 
Mtry:                             4 
Target node size:                 10 
Variable importance mode:         impurity 
Splitrule:                        gini 
OOB prediction error (Brier s.):  0.1583874 </code></pre>
</div>
</div>
<p>If we wanted to predict the diabetes status of a new woman, we could use the normal <code>predict()</code> function.</p>
<p>For instance, below we define the data for a new woman.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">new_woman <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tribble</span>(<span class="sc" style="color: #5E5E5E;">~</span>pregnant, <span class="sc" style="color: #5E5E5E;">~</span>glucose, <span class="sc" style="color: #5E5E5E;">~</span>pressure, <span class="sc" style="color: #5E5E5E;">~</span>triceps, <span class="sc" style="color: #5E5E5E;">~</span>insulin, <span class="sc" style="color: #5E5E5E;">~</span>mass, <span class="sc" style="color: #5E5E5E;">~</span>pedigree, <span class="sc" style="color: #5E5E5E;">~</span>age,</span>
<span id="cb50-2">                     <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">95</span>, <span class="dv" style="color: #AD0000;">70</span>, <span class="dv" style="color: #AD0000;">31</span>, <span class="dv" style="color: #AD0000;">102</span>, <span class="fl" style="color: #AD0000;">28.2</span>, <span class="fl" style="color: #AD0000;">0.67</span>, <span class="dv" style="color: #AD0000;">47</span>)</span>
<span id="cb50-3">new_woman</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
  pregnant glucose pressure triceps insulin  mass pedigree   age
     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;
1        2      95       70      31     102  28.2     0.67    47</code></pre>
</div>
</div>
<p>The predicted diabetes status of this new woman is “negative”.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;">predict</span>(final_model, <span class="at" style="color: #657422;">new_data =</span> new_woman)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 1
  .pred_class
  &lt;fct&gt;      
1 neg        </code></pre>
</div>
</div>
</section>
<section id="variable-importance" class="level1">
<h1>Variable importance</h1>
<p>If you want to extract the variable importance scores from your model, as far as I can tell, for now you need to extract the model object from the <code>fit()</code> object (which for us is called <code>final_model</code>). The function that extracts the model is <code>pull_workflow_fit()</code> and then you need to grab the <code>fit</code> object that the output contains.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">ranger_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">pull_workflow_fit</span>(final_model)<span class="sc" style="color: #5E5E5E;">$</span>fit</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `pull_workflow_fit()` was deprecated in workflows 0.2.3.
ℹ Please use `extract_fit_parsnip()` instead.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">ranger_obj</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Ranger result

Call:
 ranger::ranger(x = maybe_data_frame(x), y = y, mtry = min_cols(~4,      x), importance = ~"impurity", num.threads = 1, verbose = FALSE,      seed = sample.int(10^5, 1), probability = TRUE) 

Type:                             Probability estimation 
Number of trees:                  500 
Sample size:                      768 
Number of independent variables:  8 
Mtry:                             4 
Target node size:                 10 
Variable importance mode:         impurity 
Splitrule:                        gini 
OOB prediction error (Brier s.):  0.1583874 </code></pre>
</div>
</div>
<p>Then you can extract the variable importance from the ranger object itself (<code>variable.importance</code> is a specific object contained within ranger output - this will need to be adapted for the specific object type of other models).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">ranger_obj<span class="sc" style="color: #5E5E5E;">$</span>variable.importance</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>pregnant  glucose pressure  triceps  insulin     mass pedigree      age 
16.40687 79.68408 17.08361 22.10685 52.27195 42.60717 30.12246 33.19040 </code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <category>machine learning</category>
  <category>tidymodels</category>
  <category>caret</category>
  <category>recipes</category>
  <category>parsnip</category>
  <category>tune</category>
  <category>rsample</category>
  <guid>https://www.rebeccabarter.com/blog/2020-03-25_machine_learning.html</guid>
  <pubDate>Tue, 14 Apr 2020 06:00:00 GMT</pubDate>
</item>
<item>
  <title>5 useful R tips from rstudio::conf(2020) - tidy eval, piping, conflicts, bar charts and colors</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2020-02-05_rstudio_conf.html</link>
  <description><![CDATA[ 




<p>This was my second year attending rstudio::conf() as a diversity scholar (and my first time as a <a href="http://www.rebeccabarter.com/blog/2020-02-03_blogger/">speaker</a>), and I was yet again blown away by the friendliness of the community and the quality of the talks. Over the course of the week, I met so many wonderful and talented humans, and learnt so many incredibly useful things. This post is all about the little tips and tricks that I picked up from watching many fantastic presentations, attendees live tweeting, and having many insightful conversations.</p>
<section id="tip-1-tidy-evaluation" class="level1">
<h1>Tip 1: Tidy evaluation</h1>
<p>Tidy eval is one of those terms that seems to float around a lot in the R community, but I feel like 99% of us don’t really get what tidy eval is, nor why we should care about it. Turns out, unless we’re getting deep into package development, we probably don’t need to be up to speed with tidy eval. The only part of tidy eval that I know is this: how to supply column names as unquoted arguments in functions. All of the resources I found on tidy eval go into waaay more detail about how it works, and maybe one day I’ll care about that, but that time is not now.</p>
<p>For this (and the next few) example, I’ll use the <code>midwest</code> dataset from the ggplot2 package, the first 6 rows of which are shown below.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">head</span>(midwest)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 28
    PID county    state  area poptotal popdens…¹ popwh…² popbl…³ popam…⁴ popas…⁵
  &lt;int&gt; &lt;chr&gt;     &lt;chr&gt; &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;
1   561 ADAMS     IL    0.052    66090     1271.   63917    1702      98     249
2   562 ALEXANDER IL    0.014    10626      759     7054    3496      19      48
3   563 BOND      IL    0.022    14991      681.   14477     429      35      16
4   564 BOONE     IL    0.017    30806     1812.   29344     127      46     150
5   565 BROWN     IL    0.018     5836      324.    5264     547      14       5
6   566 BUREAU    IL    0.05     35688      714.   35157      50      65     195
# … with 18 more variables: popother &lt;int&gt;, percwhite &lt;dbl&gt;, percblack &lt;dbl&gt;,
#   percamerindan &lt;dbl&gt;, percasian &lt;dbl&gt;, percother &lt;dbl&gt;, popadults &lt;int&gt;,
#   perchsd &lt;dbl&gt;, percollege &lt;dbl&gt;, percprof &lt;dbl&gt;, poppovertyknown &lt;int&gt;,
#   percpovertyknown &lt;dbl&gt;, percbelowpoverty &lt;dbl&gt;, percchildbelowpovert &lt;dbl&gt;,
#   percadultpoverty &lt;dbl&gt;, percelderlypoverty &lt;dbl&gt;, inmetro &lt;int&gt;,
#   category &lt;chr&gt;, and abbreviated variable names ¹​popdensity, ²​popwhite,
#   ³​popblack, ⁴​popamerindian, ⁵​popasian</code></pre>
</div>
</div>
<p>Suppose that you want to write a function that plays nicely with the tidyverse (e.g.&nbsp;can take unquoted column names just like tidyverse functions do). Such an example might be one that makes a plot where the user supplies the variables:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">plotMidwest <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(var1, var2) {</span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(midwest) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> var1, <span class="at" style="color: #657422;">y =</span> var2))</span>
<span id="cb4-4">}</span></code></pre></div>
</div>
<p>Theoretically, this plot should be able to take the arguments <code>popdensity</code> and <code>percbelowpoverty</code> and provide me with a scatterplot of these two columns against one another:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">plotMidwest</span>(popdensity, percbelowpoverty)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in `geom_point()`:
! Problem while computing aesthetics.
ℹ Error occurred in the 1st layer.
Caused by error in `FUN()`:
! object 'popdensity' not found</code></pre>
</div>
</div>
<p>but this doesn’t work! Perhaps if I quote the variable names it will work:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">plotMidwest</span>(<span class="st" style="color: #20794D;">"popdensity"</span>, <span class="st" style="color: #20794D;">"percbelowpoverty"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2020-02-05_rstudio_conf_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The above code didn’t throw an error, but this is literally plotting the <em>word</em> “popdensity” against the <em>word</em> “percbelowpoverty”, which isn’t what I wanted to do!</p>
<p>The secret to providing column names as arguments to a function is…. tidy eval! Fortunately even without understanding <em>why</em> it works (something about delaying evaluation until later in the execution path blah blah blah), you can use tidy eval. The way you do this is to envelop your arguments within the function in curly braces <code>{{ }}</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">plotMidwestTidy <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(var1, var2) {</span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(midwest) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> {{ var1 }}, <span class="at" style="color: #657422;">y =</span> {{ var2 }}))</span>
<span id="cb8-4">}</span></code></pre></div>
</div>
<p>Now when I provide my column names as unquoted variables, I actually get the scatterplot I wanted!</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">plotMidwestTidy</span>(popdensity, percbelowpoverty)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2020-02-05_rstudio_conf_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Note that my tidy eval version of my <code>plotMidwest()</code> function isn’t designed to take <em>quoted</em> variable names. The following code yields the same plot as before of the <em>word</em> “popdensity” against the <em>word</em> “percbelowpoverty”.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">plotMidwestTidy</span>(<span class="st" style="color: #20794D;">"popdensity"</span>, <span class="st" style="color: #20794D;">"percbelowpoverty"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2020-02-05_rstudio_conf_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>A neat little trick I learned from <a href="https://twitter.com/paleolimbot?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor">Dewey Dunnington</a>’s talk is that you can use <code>.data</code> as placeholder for the data object inside <code>aes()</code>. This means that, if <code>var</code> is a character column name, you can access the quoted column from the data object using <code>.data[[var]]</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">plotMidwestQuoted <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(var1, var2) {</span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(midwest) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> .data[[var1]], <span class="at" style="color: #657422;">y =</span> .data[[var2]]))</span>
<span id="cb11-4">}</span>
<span id="cb11-5"><span class="fu" style="color: #4758AB;">plotMidwestQuoted</span>(<span class="st" style="color: #20794D;">"popdensity"</span>, <span class="st" style="color: #20794D;">"percbelowpoverty"</span>) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2020-02-05_rstudio_conf_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Dewey’s talk is full of gems (check out his slides: https://fishandwhistle.net/slides/rstudioconf2020/#1).</p>
</section>
<section id="tip-2-pipe-into-later-arguments-of-a-function-using-." class="level1">
<h1>Tip 2: Pipe into later arguments of a function using <code>.</code></h1>
<p>While I didn’t technically learn this one from a talk at rstudio::conf(2020), I did run into an old friend <a href="https://twitter.com/garthtarr">Garth Tarr</a> who told me about this piping trick: if you want to pipe an object into any argument other than the first one, you can do so using the <code>.</code> placeholder. For instance, let’s say that you want to use the <code>lm()</code> function to fit a linear model, and because you, like me, are pipe-obsessed, you want to pipe the data into <code>lm()</code>.</p>
<p>Sadly, when I try to pipe the midwest data into my <code>lm()</code> function for regressing population density (<code>popdensity</code>) against poverty rate (<code>percbelowpoverty</code>), I get an error.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">midwest <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">lm</span>(popdensity <span class="sc" style="color: #5E5E5E;">~</span> percbelowpoverty)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in as.data.frame.default(data): cannot coerce class '"formula"' to a data.frame</code></pre>
</div>
</div>
<p>What’s going wrong? There are two things you need to understand about what’s happening here:</p>
<ol type="1">
<li><p>The argument order of <code>lm()</code> is: <code>lm(formula, data)</code>, i.e.&nbsp;the data is the <em>second</em> argument of the <code>lm</code> function (whereas all tidyverse functions have the data as the <em>first</em> argument)</p></li>
<li><p>The pipe, <code>%&gt;%</code>, automatically places the <em>object</em> to the left of the pipe into the <em>first argument</em> of the function to the right of the pipe</p></li>
</ol>
<p>so <code>midwest %&gt;% lm(popdensity ~ percbelowpoverty)</code> above is equivalent to <code>lm(formula = iris, data = Sepal.Length ~ Sepal.Width)</code>, which has the arguments reversed.</p>
<p>Instead of abandoning the trusty pipe (the thought of which fills me with sadness), I can instead pipe the data into the <em>second</em> argument using <code>.</code> as a placeholder for the position into which I want to pipe the data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">midwest <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">lm</span>(popdensity <span class="sc" style="color: #5E5E5E;">~</span> percbelowpoverty, .)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = popdensity ~ percbelowpoverty, data = .)

Coefficients:
     (Intercept)  percbelowpoverty  
         4068.06            -77.56  </code></pre>
</div>
</div>
<p>Note that I could alternatively <em>name</em> the <code>formula</code> argument, which would automatically pipe the object into the first <em>unassigned</em> argument (which in our case is the data argument), but this becomes cumbersome when you have many arguments.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">midwest <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">lm</span>(<span class="at" style="color: #657422;">formula =</span> popdensity <span class="sc" style="color: #5E5E5E;">~</span> percbelowpoverty)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = popdensity ~ percbelowpoverty, data = .)

Coefficients:
     (Intercept)  percbelowpoverty  
         4068.06            -77.56  </code></pre>
</div>
</div>
</section>
<section id="tip-3-function-conflicts-workaround-no-more-dplyrselect" class="level1">
<h1>Tip 3: Function conflicts workaround (no more dplyr::select())</h1>
<p>Have you ever loaded the <code>MASS</code> R package and found that <code>select()</code> from <code>dplyr</code> no longer works? I regularly get this type of error when functions from different packages have the same name as tidyverse functions I use on the reg. Let’s pretend that I really want to select the <code>cut</code> variable from the <code>diamonds</code> dataset from the <code>ggplot2</code> package.</p>
<p>The first 6 rows of the diamonds dataset are shown below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;">head</span>(diamonds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 10
  carat cut       color clarity depth table price     x     y     z
  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31
4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75
6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48</code></pre>
</div>
</div>
<p>Sadly if I loaded the <code>MASS</code> library before trying to select <code>cut</code> from <code>diamonds</code>, I get the following error:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">library</span>(MASS)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'MASS'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following object is masked from 'package:dplyr':

    select</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">diamonds <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(cut)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in select(., cut): unused argument (cut)</code></pre>
</div>
</div>
<p>This is because by loading <code>MASS</code>, I have overwritten <code>dplyr</code>’s <code>select()</code> function (hence the warning). The normal workaround is to be explicit about what <code>select()</code> function you want using <code>dplyr::select()</code> as in</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">diamonds <span class="sc" style="color: #5E5E5E;">%&gt;%</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">select</span>(cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 53,940 × 1
   cut      
   &lt;ord&gt;    
 1 Ideal    
 2 Premium  
 3 Good     
 4 Premium  
 5 Good     
 6 Very Good
 7 Very Good
 8 Very Good
 9 Fair     
10 Very Good
# … with 53,930 more rows</code></pre>
</div>
</div>
<p>But this can be really annoying if you have a lot of <code>select()</code>s in your code (because you have to go through and apply <code>dplyr::</code> to each one). It turns out (as <a href="https://twitter.com/cbirunda/status/1221954540544507906?s=20">tweeted by Birunda Chelliah</a> - I’m not where she learned it though) that a better workaround is to set conflict hierarchies at the top of your document (<code>conflict_prefer("select", "dplyr")</code>) to specify that the <code>select()</code> function should always come from the <code>dplyr</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># install.packages("conflicted")</span></span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;">library</span>(conflicted)</span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;"># set conflict preference</span></span>
<span id="cb27-4"><span class="fu" style="color: #4758AB;">conflict_prefer</span>(<span class="st" style="color: #20794D;">"select"</span>, <span class="st" style="color: #20794D;">"dplyr"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[conflicted] Will prefer dplyr::select over any other package.</code></pre>
</div>
</div>
<p>Now when I use <code>select()</code> it works just fine!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># no more error!</span></span>
<span id="cb29-2">diamonds <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(cut)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 53,940 × 1
   cut      
   &lt;ord&gt;    
 1 Ideal    
 2 Premium  
 3 Good     
 4 Premium  
 5 Good     
 6 Very Good
 7 Very Good
 8 Very Good
 9 Fair     
10 Very Good
# … with 53,930 more rows</code></pre>
</div>
</div>
</section>
<section id="tip-4-geom_col-youll-never-have-to-specify-stat-identity-for-your-bar-plots-ever-again" class="level1">
<h1>Tip 4: <code>geom_col()</code>: you’ll never have to specify “stat = identity” for your bar plots ever again!</h1>
<p>Most of the time when I want to make a bar chart, I want to provide an <code>x</code> variable for the bar categories, and a <code>y</code> variable for the height of the bar for each category. Sadly, this isn’t what <code>geom_bar()</code> does by default - its default behaviour is to <em>count</em> each level of the provided <code>x</code> aesthetic. For instance, in the <code>diamonds</code> dataset, the <code>cut</code> variable takes 5 unique values: fair, good, very good, premium and ideal. Providing <code>cut</code> as the x-aesthetic for <code>geom_bar()</code> will, by default, count the number of times each of these unique values appear in the data and use these counts as the heights.</p>
<p>The default usage of <code>geom_bar()</code> is as follows</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">diamonds <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb31-3">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> cut))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2020-02-05_rstudio_conf_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>which automatically counts the number of time each <code>cut</code> appears in the data.</p>
<p>However (putting aside arguments about what types of data bar charts are appropriate for), I frequently want to use a bar chart to display something other than a count. For instance, the average price of each cut, shown below.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">average_price <span class="ot" style="color: #003B4F;">&lt;-</span> diamonds <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;">group_by</span>(cut) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb32-3">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">average_price =</span> <span class="fu" style="color: #4758AB;">mean</span>(price)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb32-4">  <span class="fu" style="color: #4758AB;">ungroup</span>() </span>
<span id="cb32-5">average_price</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 2
  cut       average_price
  &lt;ord&gt;             &lt;dbl&gt;
1 Fair              4359.
2 Good              3929.
3 Very Good         3982.
4 Premium           4584.
5 Ideal             3458.</code></pre>
</div>
</div>
<p>If I try to set the <code>y</code> aesthetic of <code>geom_bar</code> to <code>y = average_price</code>, I get an annoying error:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">average_price <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb34-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb34-3">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> cut, <span class="at" style="color: #657422;">y =</span> average_price))</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in `geom_bar()`:
! Problem while computing stat.
ℹ Error occurred in the 1st layer.
Caused by error in `setup_params()`:
! `stat_count()` must only have an x or y aesthetic.</code></pre>
</div>
</div>
<p>The typical fix for this is to include <code>stat = 'identity'</code> as an argument of <code>geom_bar()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">average_price <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb36-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb36-3">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> cut, <span class="at" style="color: #657422;">y =</span> average_price), <span class="at" style="color: #657422;">stat =</span> <span class="st" style="color: #20794D;">"identity"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2020-02-05_rstudio_conf_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>But it turns out <em>there’s a better way</em>!</p>
<p>During his fantastic talk on his <code>ggtext</code> package, <a href="https://twitter.com/ClausWilke">Claus Wilke</a>) casually used the <code>geom_col()</code> function to create a <em>column chart</em> (is that what <code>geom_col()</code> stands for?), which, as it turns out, is what I’ve been trying to make the whole time:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">average_price <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb37-3">  <span class="fu" style="color: #4758AB;">geom_col</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> cut, <span class="at" style="color: #657422;">y =</span> average_price))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2020-02-05_rstudio_conf_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This probably wasn’t what Claus imagined me to take away from his talk, but I swear ggtext was super cool too!</p>
<!--  To demonstrate `geom_col()` we will use the inbuilt islands dataset consisting of the sizes of the land masses. `islands` initially comes as a named vector, so here are some bonus tips: the `enframe()` function converts a named vector to a two-column data frame, and the `gt()` function is a nice way to print a data frame in html format. -->
<!-- ```{r} -->
<!-- library(tidyverse) -->
<!-- library(gt) -->
<!-- large_islands <- islands %>% -->
<!--   # convert the vector to a data frame -->
<!--   enframe(name = "island", value = "land_mass") %>% -->
<!--   # filter to the larger islands -->
<!--   filter(land_mass > 1000)   -->
<!-- gt(large_islands) -->
<!-- ``` -->
<!-- When I want to create a bar plot I usually try  -->
<!-- ```{r, eval = FALSE} -->
<!-- large_islands %>% -->
<!--   ggplot() + -->
<!--   geom_bar(aes(x = island, y = land_mass)) -->
<!-- ``` -->
<!-- and fix the error by specifying `stat = "identity"`.  -->
<!-- ```{r, eval = FALSE, fig.align="center"} -->
<!-- large_islands %>% -->
<!--   ggplot() + -->
<!--   geom_bar(aes(x = island, y = land_mass), stat = "identity") -->
<!-- ``` -->
<!-- While it seems like a very small life improvement, you have no idea how much joy simply being able to use `geom_col()` brings me. I'm never going to have to specify `stat = "identity"` again! I'm so pathetically excited! -->
<!-- ```{r, eval = FALSE, fig.align="center"} -->
<!-- large_islands %>% -->
<!--   ggplot() + -->
<!--   geom_col(aes(x = island, y = land_mass)) -->
<!-- ``` -->
</section>
<section id="tip-5-using-show_col-for-viewing-colour-palettes" class="level1">
<h1>Tip 5: Using <code>show_col()</code> for viewing colour palettes</h1>
<p>Last but not least, <a href="https://twitter.com/dpseidel">Dana Paige Seidel</a> gave a great talk on the scales package, which does a lot of great things under the hood of ggplot. But scales also let’s you look at colours! The <code>show_col()</code> function shows you what colours look like:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;">library</span>(scales)</span>
<span id="cb38-2"><span class="fu" style="color: #4758AB;">show_col</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#9C89B8"</span>, <span class="st" style="color: #20794D;">"#F0A6CA"</span>, <span class="st" style="color: #20794D;">"#EFC3E6"</span>, <span class="st" style="color: #20794D;">"#F0E6EF"</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2020-02-05_rstudio_conf_files/figure-html/unnamed-chunk-23-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Also a quick plug for how I chose these colours (and how I choose colours in general): https://coolors.co/app.</p>
<p>I’m super excited for rstudio::conf(2021)!!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>rstudioconf</category>
  <category>tidyverse</category>
  <category>ggplot2</category>
  <category>tidyeval</category>
  <category>visualization</category>
  <guid>https://www.rebeccabarter.com/blog/2020-02-05_rstudio_conf.html</guid>
  <pubDate>Thu, 06 Feb 2020 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Becoming an R blogger</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2020-02-03_blogger.html</link>
  <description><![CDATA[ 




<p>This year I was given the opportunity to talk at rstudio::conf(2020), which, if you’ve never been, is one of those rare conferences where every person you meet is both extremely friendly and excited about R, and you learn a million fun and useful things that you can <em>actually use</em>. 10/10, would go again.</p>
<p>My talk was about blogging about R. Specifically, about why I blog, and why you should too, while also giving some tips and tricks for getting started. My slides can are here, if you just want to flick through the slides and get the tl;dr.</p>
<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vQ2Q5VLQ-izMDNocHumJzStmo2IIo9BVKRqXmWve0UocVzTWMOVlBAz8mfCMpJ1cA0G_3O5i3uyJ-jH/embed?start=false&amp;loop=false&amp;delayms=60000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true">
</iframe>
<p>Read on below if you’re interested in learning more!</p>
<section id="why-start-a-blog" class="level1">
<h1>Why start a blog?</h1>
<p>Many years ago, I began to realize that I love to teach and explain <em>things</em>. As it turned out, it doesn’t really matter what the <em>things</em> are, but since I happened to be getting a PhD in statistics, I figured I might as well apply my love of explaining things to my work. Since I decided that I might want to do explain things as a career one day, I decided to start a <strong>portfolio</strong> in the form of a blog, which turned out to be a great way to <strong>practice my explaining skills</strong> (which have undoubtedly improved over the past few years). To be honest, I never really expected anyone to pay attention to the things I wrote (and for many years, they didn’t), but I’m pretty excited that you’re here reading this now!</p>
<p>One of the main benefits I’ve found since I started my blog several years ago is that I’ve <strong>learnt so many things</strong>. For starters, having to come up with topics to write about is an excellent way to keep up with what’s current. If you hear about a new R package or statistical concept floating around, but you can’t think of an excuse to learn about it in your every-day work, write a blog post about it! Having to explain something is an excellent way to learn it. Writing a blog post also turns out to be a great way to <strong>procrastinate</strong> during those afternoons when you can’t force yourself to do your actual work, but you still want to give the illusion (both to your boss and yourself) that you’re being productive.</p>
<p>So my top 4 reasons to start a blog:</p>
<ol type="1">
<li><p>To learn!</p></li>
<li><p>Portfolio &amp; gain exposure (people will start to know who you are)</p></li>
<li><p>To practice your communication skills</p></li>
<li><p>Productive procrastination</p></li>
</ol>
<p>Bonus reason: someone else might find what you wrote useful and send you a nice email, or even give you a job!</p>
</section>
<section id="how-to-choose-a-topic" class="level1">
<h1>How to choose a topic</h1>
<p>So you’ve decided you want to start a blog. That’s so awesome! Now how in the world are you supposed to decide what to write about?</p>
<p>I tend to choose topics in one of two ways:</p>
<p><strong>Write about something that you just learned</strong>. Especially if you had a hard time learning it, because there weren’t any good resources out there. This is a definite indication that there is a need for a good post about a topic. It happens surprisingly often, even with widely used R packages.</p>
<p>Alternatively, <strong>write about something you want to learn</strong>. As I mentioned above, having to explain something to someone else is a great way to learn something thoroughly in the first place.</p>
</section>
<section id="use-interesting-and-easily-accessible-data-examples" class="level1">
<h1>Use interesting and easily accessible data examples</h1>
<p>I always try to use interesting data examples (such as the gapminder dataset), or examples that are humorous in some way (such as the baking data example for my <a href="http://www.rebeccabarter.com/blog/2019-06-06_pre_processing/">recipes blogpost</a>).</p>
<p>Making it very easy for your reader to access the data in their own console is highly recommended. For instance, instead of proving a link where the user can download the data locally to their computer and then load it in to their environment (since who knows where it will end up on their computer relative to their working directory), try to use data examples that can be downloaded directly from a URL. For instance:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">muffin_cupcake_data_orig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/adashofdata/muffin-cupcake/master/recipes_muffins_cupcakes.csv"</span>)</span></code></pre></div>
</div>
</section>
<section id="keep-it-simple" class="level1">
<h1>Keep it simple</h1>
<p>When explaining technical concepts, try to stay away from complex terminology, jargon, notation, and if possible, stay away from math altogether. Opt instead for metaphors and images that explain a concept. You’re writing a blog post, not a text book. My advice is always: explain it to your grandmother. Always keep your audience in mind. Err on the side of being <em>too</em> detailed, and assume that your audience is a total newbie. Then the people who already know the basics can skip over your intro-level descriptions and take away the high level info, but this way you’re still making your post accessible to absolute newbies.</p>
<p>In addition, avoid saying that things are “obvious”, “easy”, or “trivial”. Just because they are for you, doesn’t mean that they are for everyone, and you’re likely to scare away people who don’t find it obvious, easy, or trivial.</p>
</section>
<section id="creating-and-hosting-your-blog" class="level1">
<h1>Creating and hosting your blog</h1>
<p>I write my blog in RStudio using the <a href="https://bookdown.org/yihui/blogdown/">blogdown</a> R package, which magically combines many .Rmd files into a webpage. It’s amazing. There are many pre-existing themes that you can choose from that you can modify with a little bit of CSS and html code if you want to.</p>
<p>I also have a <a href="https://github.com/rlbarter/personal-website">GitHub repository</a> that contains my website, which is where I push any updates I make to my website to. Then I have a Netlify site that mirrors whatever is in the GitHub repository, so that any changes I push are automatically updated.</p>
<p>A summary of the technical workflow to get the website set up is as follows: make a GitHub repository containing your website, tell Netlify what the repository is called and push. Bam! Your website is now ready!</p>
<p>If you’re looking for some more explicit details, here they are:</p>
<ol type="1">
<li><p>Start a new github repository for your website and call it anything you like. By that I mean that it doesn’t have to be <code>username.github.io</code>. I called mine <code>personal-webpage</code>. So creative, I know.</p></li>
<li><p>Use the R package <a href="https://bookdown.org/yihui/blogdown/">blogdown</a> to design your page with <a href="https://gohugo.io/">Hugo</a>. There are lots of cool <a href="https://themes.gohugo.io/">themes</a> available. Choose a good one.</p></li>
<li><p>Push your website, content and all, to your new repo.</p></li>
<li><p>Head on over to <a href="https://app.netlify.com/">netlify</a>, create and account/log in and hit “New site from Git”.</p></li>
</ol>
<ul>
<li><p>Step 1: Set the Continuous Deployment Git provider to GitHub (or whichever provider you use).</p></li>
<li><p>Step 2: Choose the repository containing your website.</p></li>
<li><p>Step 3: Set the Build command to hugo_0.19 (or whichever version you want), and the Publish directory to “public” (this is the folder in which Hugo by default puts the actual webpage files when it’s built).</p></li>
</ul>
<ol start="5" type="1">
<li><p>Hit “Deploy site”.</p></li>
<li><p>If you like you can choose to “Change site name”.</p></li>
<li><p>Your site can now be found at <code>sitename.netlify.com</code>!</p></li>
<li><p>Every time you push new content to the GitHub repo, Netlify will automatically rebuild and deploy your site. You can just sit back and relax :).</p></li>
</ol>
<p>It’s probably a good idea to buy a domain name from somewhere like Google Domains for like $10/year and point that domain name towards your netlify site, but otherwise you’re good to go!</p>
</section>
<section id="spreading-the-word" class="level1">
<h1>Spreading the word</h1>
<p>Title your blogs as something people might google, such as “A caret tutorial” (try googling this, and see what comes up ;)). Most of the people who come to my website find it on Google.</p>
<p>A great way to gain a reader following is Twitter (I’m <a href="https://twitter.com/rlbarter"><span class="citation" data-cites="rlbarter">@rlbarter</span></a>). Twitter is also a surprisingly effective way to keep up to date with what’s current with the R community. Even though I initially had very few followers, whenever I shared one of my blogs on twitter, it would get a surprisingly large number of re-tweets and likes. It gave me warm fuzzies.</p>
<p>Finally, another great way to get experience explaining things, and to get your blog (and name) out there is to run tutorials on your favorite blog posts. Reach out to your local R Ladies or UseR! groups, or run a tutorial in your department or company.</p>
</section>
<section id="go-forth-and-blog" class="level1">
<h1>Go forth and blog!</h1>


</section>

 ]]></description>
  <category>R</category>
  <category>rstudioconf</category>
  <category>blog</category>
  <guid>https://www.rebeccabarter.com/blog/2020-02-03_blogger.html</guid>
  <pubDate>Mon, 03 Feb 2020 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Learn to purrr</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2019-08-19_purrr.html</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>“It was on the corner of the street that he noticed the first sign of something peculiar - a cat reading a map” - J.K. Rowling</p>
</blockquote>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/img/purrr/cat_map.jpg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Purrr is one of those tidyverse packages that you keep hearing about, and you know you should probably learn it, but you just never seem to get around to it.</p>
<p>At it’s core, purrr is all about iteration. Purrr introduces map functions (the tidyverse’s answer to base R’s apply functions, but more in line with functional programming practices) as well as some new functions for manipulating lists. To get a quick snapshot of any tidyverse package, a nice place to go is the <a href="https://github.com/rstudio/cheatsheets/raw/master/purrr.pdf">cheatsheet</a>. I find these particularly useful after I’ve already got the basics of a package down, because I inevitably realise that there are a bunch of functionalities I knew nothing about.</p>
<p>Another useful resource for learning about purrr is <a href="https://jennybc.github.io/purrr-tutorial/">Jenny Bryan’s tutorial</a>. Jenny’s tutorial is fantastic, but is a lot longer than mine. This post is a lot shorter and my goal is to get you up and running with purrr very quickly.</p>
<p>While the workhorse of dplyr is the data frame, the workhorse of purrr is the list. If you aren’t familiar with lists, hopefully this will help you understand what they are:</p>
<ul>
<li><p>A <strong>vector</strong> is a way of storing many individual elements (a single number or a single character or string) of the same type together in a single object,</p></li>
<li><p>A <strong>data frame</strong> is a way of storing many vectors of the same length but possibly of different types together in a single object</p></li>
<li><p>A <strong>list</strong> is a way of storing many objects of any type (e.g.&nbsp;data frames, plots, vectors) together in a single object</p></li>
</ul>
<p>Here is an example of a list that has three elements: a single number, a vector and a data frame</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">my_first_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">my_number =</span> <span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb1-2">                      <span class="at" style="color: #657422;">my_vector =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"a"</span>, <span class="st" style="color: #20794D;">"b"</span>, <span class="st" style="color: #20794D;">"c"</span>),</span>
<span id="cb1-3">                      <span class="at" style="color: #657422;">my_dataframe =</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">a =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">b =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"q"</span>, <span class="st" style="color: #20794D;">"b"</span>, <span class="st" style="color: #20794D;">"z"</span>), <span class="at" style="color: #657422;">c =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"bananas"</span>, <span class="st" style="color: #20794D;">"are"</span>, <span class="st" style="color: #20794D;">"so very great"</span>)))</span>
<span id="cb1-4">my_first_list</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>$my_number
[1] 5

$my_vector
[1] "a" "b" "c"

$my_dataframe
  a b             c
1 1 q       bananas
2 2 b           are
3 3 z so very great</code></pre>
</div>
</div>
<p>Note that a data frame is actually a special case of a list where each element of the list is a vector of the same length.</p>
<section id="map-functions-beyond-apply" class="level1">
<h1>Map functions: beyond apply</h1>
<p>A <strong>map function</strong> is one that applies the same action/function to every element of an object (e.g.&nbsp;each entry of a list or a vector, or each of the columns of a data frame).</p>
<p>If you’re familiar with the base R <code>apply()</code> functions, then it turns out that you are already familiar with map functions, even if you didn’t know it!</p>
<p>The <code>apply()</code> functions are set of super useful base-R functions for iteratively performing an action across entries of a vector or list without having to write a for-loop. While there is nothing fundamentally wrong with the base R apply functions, the syntax is somewhat inconsistent across the different apply functions, and the expected type of the object they return is often ambiguous (at least it is for <code>sapply</code>…).</p>
<p>The naming convention of the map functions are such that the type of the <strong>output</strong> is specified by the term that follows the underscore in the function name.</p>
<ul>
<li><p><code>map(.x, .f)</code> is the main mapping function and returns a list</p></li>
<li><p><code>map_df(.x, .f)</code> returns a data frame</p></li>
<li><p><code>map_dbl(.x, .f)</code> returns a numeric (double) vector</p></li>
<li><p><code>map_chr(.x, .f)</code> returns a character vector</p></li>
<li><p><code>map_lgl(.x, .f)</code> returns a logical vector</p></li>
</ul>
<p>Consistent with the way of the tidyverse, the first argument of each mapping function is always the data object that you want to map over, and the second argument is always the <em>function</em> that you want to iteratively apply to each element of the input object.</p>
<p>The <strong>input</strong> object to any <code>map</code> function is always either</p>
<ul>
<li><p>a <em>vector</em> (of any type), in which case the iteration is done over the entries of the vector,</p></li>
<li><p>a <em>list</em>, in which case the iteration is performed over the elements of the list,</p></li>
<li><p>a <em>data frame</em>, in which case the iteration is performed over the columns of the data frame (which, since a data frame is a special kind of list, is technically the same as the previous point).</p></li>
</ul>
<p>Since the first argument is always the data, this means that map functions play nicely with pipes (<code>%&gt;%</code>). If you’ve never seen pipes before, they’re really useful (originally from the <code>magrittr</code> package, but also ported with the <code>dplyr</code> package and thus with the <code>tidyverse</code>). Piping allows you to string together many functions by piping an object (which itself might be the output of a function) into the first argument of the next function. If you’d like to learn more about pipes, check out my <a href="http://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse/">tidyverse blog posts</a>.</p>
<p>Throughout this post I will demonstrate each of purrr’s functionalities using both a simple numeric example (to explain the concept) and the gapminder data (to show a more complex example).</p>
<section id="simplest-usage-repeated-looping-with-map" class="level2">
<h2 class="anchored" data-anchor-id="simplest-usage-repeated-looping-with-map">Simplest usage: repeated looping with map</h2>
<p>Fundamentally, maps are for iteration. In the example below I will iterate through the vector <code>c(1, 4, 7)</code> by adding 10 to each entry. This function applied to a single number, which we will call <code>.x</code>, can be defined as</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">addTen <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(.x) {</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">return</span>(.x <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb3-3">}</span></code></pre></div>
</div>
<p>The <code>map()</code> function below iterates <code>addTen()</code> across all entries of the vector, <code>.x = c(1, 4, 7)</code>, and returns the output as a list</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">map</span>(<span class="at" style="color: #657422;">.x =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">7</span>), </span>
<span id="cb4-3">    <span class="at" style="color: #657422;">.f =</span> addTen)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 11

[[2]]
[1] 14

[[3]]
[1] 17</code></pre>
</div>
</div>
<p>Fortunately, you don’t actually need to specify the argument names</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">map</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">7</span>), addTen)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 11

[[2]]
[1] 14

[[3]]
[1] 17</code></pre>
</div>
</div>
<p>Note that</p>
<ul>
<li><p>the first element of the output is the result of applying the function to the first element of the input (<code>1</code>),</p></li>
<li><p>the second element of the output is the result of applying the function to the second element of the input (<code>4</code>),</p></li>
<li><p>and the third element of the output is the result of applying the function to the third element of the input (<code>7</code>).</p></li>
</ul>
<p>The following code chunks show that no matter if the input object is a vector, a list, or a data frame, <code>map()</code> always returns a list.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">map</span>(<span class="fu" style="color: #4758AB;">list</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">7</span>), addTen)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 11

[[2]]
[1] 14

[[3]]
[1] 17</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">map</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">a =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">b =</span> <span class="dv" style="color: #AD0000;">4</span>, <span class="at" style="color: #657422;">c =</span> <span class="dv" style="color: #AD0000;">7</span>), addTen)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$a
[1] 11

$b
[1] 14

$c
[1] 17</code></pre>
</div>
</div>
<p>If we wanted the output of <code>map</code> to be some other object type, we need to use a different function. For instance to map the input to a numeric (double) vector, you can use the <code>map_dbl()</code> (“map to a double”) function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">map_dbl</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">7</span>), addTen)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 11 14 17</code></pre>
</div>
</div>
<p>To map to a character vector, you can use the <code>map_chr()</code> (“map to a character”) function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">map_chr</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">7</span>), addTen)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Automatic coercion from double to character was deprecated in purrr 1.0.0.
ℹ Please use an explicit call to `as.character()` within `map_chr()` instead.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "11.000000" "14.000000" "17.000000"</code></pre>
</div>
</div>
<p>If you want to return a data frame, then you would use the <code>map_df()</code> function. However, you need to make sure that in each iteration you’re returning a data frame which has consistent column names. <code>map_df</code> will automatically bind the rows of each iteration.</p>
<p>For this example, I want to return a data frame whose columns correspond to the original number and the number plus ten.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;">map_df</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">7</span>), <span class="cf" style="color: #003B4F;">function</span>(.x) {</span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">old_number =</span> .x, </span>
<span id="cb17-3">                    <span class="at" style="color: #657422;">new_number =</span> <span class="fu" style="color: #4758AB;">addTen</span>(.x)))</span>
<span id="cb17-4">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  old_number new_number
1          1         11
2          4         14
3          7         17</code></pre>
</div>
</div>
<p>Note that in this case, I defined an “anonymous” function as our output for each iteration. An anonymous function is a temporary function (that you define as the function argument to the map). Here I used the argument name <code>.x</code>, but I could have used anything.</p>
<p>Another function to be aware of is <code>modify()</code>, which is just like the map functions, but always returns an object the same type as the input object.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;">modify</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">7</span>), addTen)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 11 14 17</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;">modify</span>(<span class="fu" style="color: #4758AB;">list</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">7</span>), addTen)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 11

[[2]]
[1] 14

[[3]]
[1] 17</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">modify</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">7</span>), addTen)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  X1 X4 X7
1 11 14 17</code></pre>
</div>
</div>
<p>Modify also has a pretty useful sibling, <code>modify_if()</code>, that only applies the function to elements that satisfy a specific criteria (specified by a “predicate function”, the second argument called <code>.p</code>). For instance, the following example only modifies the third entry since it is greater than 5.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;">modify_if</span>(<span class="at" style="color: #657422;">.x =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">7</span>), </span>
<span id="cb25-2">          <span class="at" style="color: #657422;">.p =</span> <span class="cf" style="color: #003B4F;">function</span>(x) x <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb25-3">          <span class="at" style="color: #657422;">.f =</span> addTen)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 17</code></pre>
</div>
</div>
</section>
<section id="the-tilde-dot-shorthand-for-functions" class="level2">
<h2 class="anchored" data-anchor-id="the-tilde-dot-shorthand-for-functions">The tilde-dot shorthand for functions</h2>
<p>To make the code more concise you can use the tilde-dot shorthand for anonymous functions (the functions that you create as arguments of other functions).</p>
<p>The notation works by replacing</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb27-2">  x <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb27-3">}</span></code></pre></div>
</div>
<p>with</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="sc" style="color: #5E5E5E;">~</span>{.x <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span>}</span></code></pre></div>
</div>
<p><code>~</code> indicates that you have started an anonymous function, and the argument of the anonymous function can be referred to using <code>.x</code> (or simply <code>.</code>). Unlike normal function arguments that can be anything that you like, the tilde-dot function argument is always <code>.x</code>.</p>
<p>Thus, instead of defining the <code>addTen()</code> function separately, we could use the tilde-dot shorthand</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;">map_dbl</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">7</span>), <span class="sc" style="color: #5E5E5E;">~</span>{.x <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span>})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 11 14 17</code></pre>
</div>
</div>
</section>
<section id="applying-map-functions-in-a-slightly-more-interesting-context" class="level2">
<h2 class="anchored" data-anchor-id="applying-map-functions-in-a-slightly-more-interesting-context">Applying map functions in a slightly more interesting context</h2>
<p>Throughout this tutorial, we will use the gapminder dataset that can be loaded directly if you’re connected to the internet. Each function will first be demonstrated using a simple numeric example, and then will be demonstrated using a more complex practical example based on the gapminder dataset.</p>
<p>My general workflow involves loading the original data and saving it as an object with a meaningful name and an <code>_orig</code> suffix. I then define a copy of the original dataset without the <code>_orig</code> suffix. Having an original copy of my data in my environment means that it is easy to check that my manipulations do what I expected. I will make direct data cleaning modifications to the <code>gapminder</code> data frame, but will never edit the <code>gapminder_orig</code> data frame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># to download the data directly:</span></span>
<span id="cb31-2">gapminder_orig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder-FiveYearData.csv"</span>)</span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;"># define a copy of the original dataset that we will clean and play with </span></span>
<span id="cb31-4">gapminder <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder_orig</span></code></pre></div>
</div>
<p>The gapminder dataset has 1704 rows containing information on population, life expectancy and GDP per capita by year and country.</p>
<p>A “tidy” data frame is one where every row is a single observational unit (in this case, indexed by country and year), and every column corresponds to a variable that is measured for each observational unit (in this case, for each country and year, a measurement is made for population, continent, life expectancy and GDP). If you’d like to learn more about “tidy data”, I highly recommend reading <a href="vita.had.co.nz/papers/tidy-data.pdf">Hadley Wickham’s tidy data article</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;">dim</span>(gapminder)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1704    6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;">head</span>(gapminder)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      country year      pop continent lifeExp gdpPercap
1 Afghanistan 1952  8425333      Asia  28.801  779.4453
2 Afghanistan 1957  9240934      Asia  30.332  820.8530
3 Afghanistan 1962 10267083      Asia  31.997  853.1007
4 Afghanistan 1967 11537966      Asia  34.020  836.1971
5 Afghanistan 1972 13079460      Asia  36.088  739.9811
6 Afghanistan 1977 14880372      Asia  38.438  786.1134</code></pre>
</div>
</div>
<p>Since <code>gapminder</code> is a data frame, the <code>map_</code> functions will iterate over each column. An example of simple usage of the <code>map_</code> functions is to summarize each column. For instance, you can identify the type of each column by applying the <code>class()</code> function to each column. Since the output of the <code>class()</code> function is a character, we will use the <code>map_chr()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;"># apply the class() function to each column</span></span>
<span id="cb36-2">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">map_chr</span>(class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    country        year         pop   continent     lifeExp   gdpPercap 
"character"   "integer"   "numeric" "character"   "numeric"   "numeric" </code></pre>
</div>
</div>
<p>I frequently do this to get a quick snapshot of each column type of a new dataset directly in the console. As a habit, I usually pipe in the data using <code>%&gt;%</code>, rather than provide it as an argument. Remember that the pipe places the object to the left of the pipe in the first argument of the function to the right.</p>
<p>Similarly, if you wanted to identify the number of distinct values in each column, you could apply the <code>n_distinct()</code> function from the dplyr package to each column. Since the output of <code>n_distinct()</code> is a numeric (a double), you might want to use the <code>map_dbl()</code> function so that the results of each iteration (the application of <code>n_distinct()</code> to each column) are concatenated into a numeric vector:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="co" style="color: #5E5E5E;"># apply the n_distinct() function to each column</span></span>
<span id="cb38-2">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">map_dbl</span>(n_distinct)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  country      year       pop continent   lifeExp gdpPercap 
      142        12      1704         5      1626      1704 </code></pre>
</div>
</div>
<p>If you want to do something a little more complicated, such return a few different summaries of each column in a data frame, you can use <code>map_df()</code>. When things are getting a little bit more complicated, you typically need to define an anonymous function that you want to apply to each column. Using the tilde-dot notation, the anonymous function below calculates the number of distinct entries and the type of the current column (which is accessible as <code>.x</code>), and then combines them into a two-column data frame. Once it has iterated through each of the columns, the <code>map_df</code> function combines the data frames row-wise into a single data frame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">map_df</span>(<span class="sc" style="color: #5E5E5E;">~</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">n_distinct =</span> <span class="fu" style="color: #4758AB;">n_distinct</span>(.x),</span>
<span id="cb40-2">                                  <span class="at" style="color: #657422;">class =</span> <span class="fu" style="color: #4758AB;">class</span>(.x))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  n_distinct     class
1        142 character
2         12   integer
3       1704   numeric
4          5 character
5       1626   numeric
6       1704   numeric</code></pre>
</div>
</div>
<p>Note that we’ve lost the variable names! The variable names correspond to the names of the objects over which we are iterating (in this case, the column names), and these are not automatically included as a column in the output data frame. You can tell <code>map_df()</code> to include them using the <code>.id</code> argument of <code>map_df()</code>. This will automatically take the name of the element being iterated over and include it in the column corresponding to whatever you set <code>.id</code> to.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">map_df</span>(<span class="sc" style="color: #5E5E5E;">~</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">n_distinct =</span> <span class="fu" style="color: #4758AB;">n_distinct</span>(.x),</span>
<span id="cb42-2">                                  <span class="at" style="color: #657422;">class =</span> <span class="fu" style="color: #4758AB;">class</span>(.x))),</span>
<span id="cb42-3">                     <span class="at" style="color: #657422;">.id =</span> <span class="st" style="color: #20794D;">"variable"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   variable n_distinct     class
1   country        142 character
2      year         12   integer
3       pop       1704   numeric
4 continent          5 character
5   lifeExp       1626   numeric
6 gdpPercap       1704   numeric</code></pre>
</div>
</div>
<p>If you’re having trouble thinking through these map actions, I recommend that you first figure out what the code would be to do what you want for a single element, and then paste it into the <code>map_df()</code> function (a nice trick I saw Hadley Wickham used a few years ago when he presented on purrr at RLadies SF).</p>
<p>For instance, since the first element of the gapminder data frame is the first column, let’s define <code>.x</code> in our environment to be this first column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="co" style="color: #5E5E5E;"># take the first element of the gapminder data</span></span>
<span id="cb44-2">.x <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pluck</span>(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb44-3"><span class="co" style="color: #5E5E5E;"># look at the first 6 rows</span></span>
<span id="cb44-4"><span class="fu" style="color: #4758AB;">head</span>(.x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan"
[6] "Afghanistan"</code></pre>
</div>
</div>
<p>Then, you can create a data frame for this column that contains the number of distinct entries, and the class of the column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">n_distinct =</span> <span class="fu" style="color: #4758AB;">n_distinct</span>(.x),</span>
<span id="cb46-2">           <span class="at" style="color: #657422;">class =</span> <span class="fu" style="color: #4758AB;">class</span>(.x))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  n_distinct     class
1        142 character</code></pre>
</div>
</div>
<p>Since this has done what was expected want for the first column, you can paste this code into the map function using the tilde-dot shorthand.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">map_df</span>(<span class="sc" style="color: #5E5E5E;">~</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">n_distinct =</span> <span class="fu" style="color: #4758AB;">n_distinct</span>(.x),</span>
<span id="cb48-2">                                  <span class="at" style="color: #657422;">class =</span> <span class="fu" style="color: #4758AB;">class</span>(.x))),</span>
<span id="cb48-3">                     <span class="at" style="color: #657422;">.id =</span> <span class="st" style="color: #20794D;">"variable"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   variable n_distinct     class
1   country        142 character
2      year         12   integer
3       pop       1704   numeric
4 continent          5 character
5   lifeExp       1626   numeric
6 gdpPercap       1704   numeric</code></pre>
</div>
</div>
<p><code>map_df()</code> is definitely one of the most powerful functions of <code>purrr</code> in my opinion, and is probably the one that I use most.</p>
</section>
<section id="maps-with-multiple-input-objects" class="level2">
<h2 class="anchored" data-anchor-id="maps-with-multiple-input-objects">Maps with multiple input objects</h2>
<p>After gaining a basic understanding of purrr’s map functions, you can start to do some fancier stuff. For instance, what if you want to perform a map that iterates through two objects. The code below uses map functions to create a <em>list of plots</em> that compare life expectancy and GDP per capita for each continent/year combination.</p>
<p>The map function that maps over two objects instead of 1 is called <code>map2()</code>. The first two arguments are the two objects you want to iterate over, and the third is the function (with two arguments, one for each object).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;">map2</span>(<span class="at" style="color: #657422;">.x =</span> object1, <span class="co" style="color: #5E5E5E;"># the first object to iterate over</span></span>
<span id="cb50-2">     <span class="at" style="color: #657422;">.y =</span> object2, <span class="co" style="color: #5E5E5E;"># the second object to iterate over</span></span>
<span id="cb50-3">     <span class="at" style="color: #657422;">.f =</span> <span class="fu" style="color: #4758AB;">plotFunction</span>(.x, .y))</span></code></pre></div>
</div>
<p>First, you need to define a vector (or list) of continents and a paired vector (or list) of years that you want to iterate through. Note that in our continent/year example</p>
<ul>
<li><p>the <em>first iteration</em> will correspond to the <em>first continent</em> in the continent vector and the <em>first year</em> in the year vector,</p></li>
<li><p>the <em>second iteration</em> will correspond to the <em>second continent</em> in the continent vector and the <em>second year</em> in the year vector.</p></li>
</ul>
<p>This might seem obvious, but it is a natural instinct to incorrectly assume that <code>map2()</code> will automatically perform the action on <em>all</em> combinations that can be made from the two vectors. For instance if you have a continent vector <code>.x = c("Americas", "Asia")</code> and a year vector <code>.y = c(1952, 2007)</code>, then you might assume that <code>map2</code> will iterate over the Americas for 1952 and for 2007, and then Asia for 1952 and 2007. It won’t though. The iteration will actually be first the Americas for 1952 only, and then Asia for 2007 only.</p>
<p>First, let’s get our vectors of continents and years, starting by obtaining all distinct combinations of continents and years that appear in the data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">continent_year <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">distinct</span>(continent, year)</span>
<span id="cb51-2">continent_year</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   continent year
1       Asia 1952
2       Asia 1957
3       Asia 1962
4       Asia 1967
5       Asia 1972
6       Asia 1977
7       Asia 1982
8       Asia 1987
9       Asia 1992
10      Asia 1997
11      Asia 2002
12      Asia 2007
13    Europe 1952
14    Europe 1957
15    Europe 1962
16    Europe 1967
17    Europe 1972
18    Europe 1977
19    Europe 1982
20    Europe 1987
21    Europe 1992
22    Europe 1997
23    Europe 2002
24    Europe 2007
25    Africa 1952
26    Africa 1957
27    Africa 1962
28    Africa 1967
29    Africa 1972
30    Africa 1977
31    Africa 1982
32    Africa 1987
33    Africa 1992
34    Africa 1997
35    Africa 2002
36    Africa 2007
37  Americas 1952
38  Americas 1957
39  Americas 1962
40  Americas 1967
41  Americas 1972
42  Americas 1977
43  Americas 1982
44  Americas 1987
45  Americas 1992
46  Americas 1997
47  Americas 2002
48  Americas 2007
49   Oceania 1952
50   Oceania 1957
51   Oceania 1962
52   Oceania 1967
53   Oceania 1972
54   Oceania 1977
55   Oceania 1982
56   Oceania 1987
57   Oceania 1992
58   Oceania 1997
59   Oceania 2002
60   Oceania 2007</code></pre>
</div>
</div>
<p>Then extracting the continent and year pairs as separate vectors</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="co" style="color: #5E5E5E;"># extract the continent and year pairs as separate vectors</span></span>
<span id="cb53-2">continents <span class="ot" style="color: #003B4F;">&lt;-</span> continent_year <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pull</span>(continent) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> as.character</span>
<span id="cb53-3">years <span class="ot" style="color: #003B4F;">&lt;-</span> continent_year <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pull</span>(year)</span></code></pre></div>
</div>
<p>If you want to use tilde-dot short-hand, the anonymous arguments will be <code>.x</code> for the first object being iterated over, and <code>.y</code> for the second object being iterated over.</p>
<p>Before jumping straight into the map function, it’s a good idea to first figure out what the code will be for just first iteration (the first continent and the first year, which happen to be Asia in 1952).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="co" style="color: #5E5E5E;"># try to figure out the code for the first example</span></span>
<span id="cb54-2">.x <span class="ot" style="color: #003B4F;">&lt;-</span> continents[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb54-3">.y <span class="ot" style="color: #003B4F;">&lt;-</span> years[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb54-4"><span class="co" style="color: #5E5E5E;"># make a scatterplot of GDP vs life expectancy in all Asian countries for 1952</span></span>
<span id="cb54-5">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb54-6">  <span class="fu" style="color: #4758AB;">filter</span>(continent <span class="sc" style="color: #5E5E5E;">==</span> .x,</span>
<span id="cb54-7">         year <span class="sc" style="color: #5E5E5E;">==</span> .y) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb54-8">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb54-9">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb54-10">  <span class="fu" style="color: #4758AB;">ggtitle</span>(glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(.x, <span class="st" style="color: #20794D;">" "</span>, .y))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-19_purrr_files/figure-html/unnamed-chunk-30-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This seems to have worked. So you can then copy-and-paste the code into the <code>map2</code> function</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">plot_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">map2</span>(<span class="at" style="color: #657422;">.x =</span> continents, </span>
<span id="cb55-2">                  <span class="at" style="color: #657422;">.y =</span> years, </span>
<span id="cb55-3">                  <span class="at" style="color: #657422;">.f =</span> <span class="sc" style="color: #5E5E5E;">~</span>{</span>
<span id="cb55-4">                    gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb55-5">                      <span class="fu" style="color: #4758AB;">filter</span>(continent <span class="sc" style="color: #5E5E5E;">==</span> .x,</span>
<span id="cb55-6">                             year <span class="sc" style="color: #5E5E5E;">==</span> .y) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb55-7">                      <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb55-8">                      <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb55-9">                      <span class="fu" style="color: #4758AB;">ggtitle</span>(glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(.x, <span class="st" style="color: #20794D;">" "</span>, .y))</span>
<span id="cb55-10">                  })</span></code></pre></div>
</div>
<p>And you can look at a few of the entries of the list to see that they make sense</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">plot_list[[<span class="dv" style="color: #AD0000;">1</span>]]</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-19_purrr_files/figure-html/unnamed-chunk-32-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">plot_list[[<span class="dv" style="color: #AD0000;">22</span>]]</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-19_purrr_files/figure-html/unnamed-chunk-32-2.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><code>pmap()</code> allows you to iterate over an arbitrary number of objects (i.e.&nbsp;more than two).</p>
</section>
<section id="list-columns-and-nested-data-frames" class="level2">
<h2 class="anchored" data-anchor-id="list-columns-and-nested-data-frames">List columns and Nested data frames</h2>
<p>Tibbles are tidyverse data frames. Some crazy stuff starts happening when you learn that tibble columns can be lists (as opposed to vectors, which is what they usually are). This is where the difference between tibbles and data frames becomes real.</p>
<p>For instance, a tibble can be “nested” where the tibble is essentially split into separate data frames based on a grouping variable, and these separate data frames are stored as entries of a list (that is then stored in the <code>data</code> column of the data frame).</p>
<p>Below I nest the gapminder data by continent.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">gapminder_nested <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb58-2">  <span class="fu" style="color: #4758AB;">group_by</span>(continent) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb58-3">  <span class="fu" style="color: #4758AB;">nest</span>()</span>
<span id="cb58-4">gapminder_nested</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 2
# Groups:   continent [5]
  continent data              
  &lt;chr&gt;     &lt;list&gt;            
1 Asia      &lt;tibble [396 × 5]&gt;
2 Europe    &lt;tibble [360 × 5]&gt;
3 Africa    &lt;tibble [624 × 5]&gt;
4 Americas  &lt;tibble [300 × 5]&gt;
5 Oceania   &lt;tibble [24 × 5]&gt; </code></pre>
</div>
</div>
<p>The first column is the variable that we grouped by, <code>continent</code>, and the second column is the rest of the data frame corresponding to that group (as if you had filtered the data frame to the specific continent). To see this, the code below shows that the first entry in the <code>data</code> column corresponds to the entire gapminder dataset for Asia.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">gapminder_nested<span class="sc" style="color: #5E5E5E;">$</span>data[[<span class="dv" style="color: #AD0000;">1</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 396 × 5
   country      year      pop lifeExp gdpPercap
   &lt;chr&gt;       &lt;int&gt;    &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;
 1 Afghanistan  1952  8425333    28.8      779.
 2 Afghanistan  1957  9240934    30.3      821.
 3 Afghanistan  1962 10267083    32.0      853.
 4 Afghanistan  1967 11537966    34.0      836.
 5 Afghanistan  1972 13079460    36.1      740.
 6 Afghanistan  1977 14880372    38.4      786.
 7 Afghanistan  1982 12881816    39.9      978.
 8 Afghanistan  1987 13867957    40.8      852.
 9 Afghanistan  1992 16317921    41.7      649.
10 Afghanistan  1997 22227415    41.8      635.
# … with 386 more rows</code></pre>
</div>
</div>
<p>Using dplyr <code>pluck()</code> function, this can be written as</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1">gapminder_nested <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb62-2">  <span class="co" style="color: #5E5E5E;"># extract the first entry from the data column</span></span>
<span id="cb62-3">  <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"data"</span>, <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 396 × 5
   country      year      pop lifeExp gdpPercap
   &lt;chr&gt;       &lt;int&gt;    &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;
 1 Afghanistan  1952  8425333    28.8      779.
 2 Afghanistan  1957  9240934    30.3      821.
 3 Afghanistan  1962 10267083    32.0      853.
 4 Afghanistan  1967 11537966    34.0      836.
 5 Afghanistan  1972 13079460    36.1      740.
 6 Afghanistan  1977 14880372    38.4      786.
 7 Afghanistan  1982 12881816    39.9      978.
 8 Afghanistan  1987 13867957    40.8      852.
 9 Afghanistan  1992 16317921    41.7      649.
10 Afghanistan  1997 22227415    41.8      635.
# … with 386 more rows</code></pre>
</div>
</div>
<p>Similarly, the 5th entry in the <code>data</code> column corresponds to the entire gapminder dataset for Oceania.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1">gapminder_nested <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"data"</span>, <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 24 × 5
   country    year      pop lifeExp gdpPercap
   &lt;chr&gt;     &lt;int&gt;    &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;
 1 Australia  1952  8691212    69.1    10040.
 2 Australia  1957  9712569    70.3    10950.
 3 Australia  1962 10794968    70.9    12217.
 4 Australia  1967 11872264    71.1    14526.
 5 Australia  1972 13177000    71.9    16789.
 6 Australia  1977 14074100    73.5    18334.
 7 Australia  1982 15184200    74.7    19477.
 8 Australia  1987 16257249    76.3    21889.
 9 Australia  1992 17481977    77.6    23425.
10 Australia  1997 18565243    78.8    26998.
# … with 14 more rows</code></pre>
</div>
</div>
<p>You might be asking at this point <em>why</em> you would ever want to nest your data frame? It just doesn’t seem like that useful a thing to do… until you realise that you now have the power to use dplyr manipulations on more complex objects that can be stored in a list.</p>
<p>However, since actions such as <code>mutate()</code> are applied directly to the entire column (which is usually a vector, so is fine), we run into issues when we try to mutate a list. For instance, since columns are usually vectors, normal vectorized functions work just fine on them</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">vec_col =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb66-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">vec_sum =</span> <span class="fu" style="color: #4758AB;">sum</span>(vec_col))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 2
   vec_col vec_sum
     &lt;int&gt;   &lt;int&gt;
 1       1      55
 2       2      55
 3       3      55
 4       4      55
 5       5      55
 6       6      55
 7       7      55
 8       8      55
 9       9      55
10      10      55</code></pre>
</div>
</div>
<p>but when the column is a list, vectorized functions don’t know what to do with them, and we get an error that says <code>Error in sum(x) : invalid 'type' (list) of argument</code>. Try</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">list_col =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">7</span>), </span>
<span id="cb68-2">                       <span class="dv" style="color: #AD0000;">5</span>, </span>
<span id="cb68-3">                       <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">11</span>))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb68-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">list_sum =</span> <span class="fu" style="color: #4758AB;">sum</span>(list_col))</span></code></pre></div>
</div>
<p>To apply mutate functions to a list-column, you need to wrap the function you want to apply in a map function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">list_col =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">7</span>), </span>
<span id="cb69-2">                       <span class="dv" style="color: #AD0000;">5</span>, </span>
<span id="cb69-3">                       <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">11</span>))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb69-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">list_sum =</span> <span class="fu" style="color: #4758AB;">map</span>(list_col, sum))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  list_col  list_sum 
  &lt;list&gt;    &lt;list&gt;   
1 &lt;dbl [3]&gt; &lt;dbl [1]&gt;
2 &lt;dbl [1]&gt; &lt;dbl [1]&gt;
3 &lt;dbl [3]&gt; &lt;dbl [1]&gt;</code></pre>
</div>
</div>
<p>Since <code>map()</code> returns a list itself, the <code>list_sum</code> column is thus itself a list</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">list_col =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">7</span>), </span>
<span id="cb71-2">                       <span class="dv" style="color: #AD0000;">5</span>, </span>
<span id="cb71-3">                       <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">11</span>))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb71-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">list_sum =</span> <span class="fu" style="color: #4758AB;">map</span>(list_col, sum)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb71-5">  <span class="fu" style="color: #4758AB;">pull</span>(list_sum)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 13

[[2]]
[1] 5

[[3]]
[1] 31</code></pre>
</div>
</div>
<p>What could we do if we wanted it to be a vector? We could use the <code>map_dbl()</code> function instead!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">list_col =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">7</span>), </span>
<span id="cb73-2">                       <span class="dv" style="color: #AD0000;">5</span>, </span>
<span id="cb73-3">                       <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">11</span>))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb73-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">list_sum =</span> <span class="fu" style="color: #4758AB;">map_dbl</span>(list_col, sum))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  list_col  list_sum
  &lt;list&gt;       &lt;dbl&gt;
1 &lt;dbl [3]&gt;       13
2 &lt;dbl [1]&gt;        5
3 &lt;dbl [3]&gt;       31</code></pre>
</div>
</div>
<section id="nesting-the-gapminder-data" class="level3">
<h3 class="anchored" data-anchor-id="nesting-the-gapminder-data">Nesting the gapminder data</h3>
<p>Let’s return to the nested gapminder dataset. I want to calculate the average life expectancy within each continent and add it as a new column using <code>mutate()</code>. Based on the example above, can you explain why the following code doesn’t work?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1">gapminder_nested <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb75-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">avg_lifeExp =</span> <span class="fu" style="color: #4758AB;">mean</span>(data<span class="sc" style="color: #5E5E5E;">$</span>lifeExp))</span></code></pre></div>
</div>
<p>I was hoping that this code would extract the <code>lifeExp</code> column from each data frame. But I’m applying the mutate to the <code>data</code> column, which itself doesn’t have an entry called <code>lifeExp</code> since it’s a <em>list</em> of data frames. How could I get access to the <code>lifeExp</code> column of the data frames stored in the <code>data</code> list? Using a <code>map</code> function of course!</p>
<p>Think of an individual data frame as <code>.x</code>. Again, I will first figure out the code for calculating the mean life expectancy for the first entry of the column. The following code defines <code>.x</code> to be the first entry of the <code>data</code> column (this is the data frame for Asia).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1"><span class="co" style="color: #5E5E5E;"># the first entry of the "data" column</span></span>
<span id="cb76-2">.x <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder_nested <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"data"</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb76-3">.x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 396 × 5
   country      year      pop lifeExp gdpPercap
   &lt;chr&gt;       &lt;int&gt;    &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;
 1 Afghanistan  1952  8425333    28.8      779.
 2 Afghanistan  1957  9240934    30.3      821.
 3 Afghanistan  1962 10267083    32.0      853.
 4 Afghanistan  1967 11537966    34.0      836.
 5 Afghanistan  1972 13079460    36.1      740.
 6 Afghanistan  1977 14880372    38.4      786.
 7 Afghanistan  1982 12881816    39.9      978.
 8 Afghanistan  1987 13867957    40.8      852.
 9 Afghanistan  1992 16317921    41.7      649.
10 Afghanistan  1997 22227415    41.8      635.
# … with 386 more rows</code></pre>
</div>
</div>
<p>Then to calculate the average life expectancy for Asia, I could write</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1"><span class="fu" style="color: #4758AB;">mean</span>(.x<span class="sc" style="color: #5E5E5E;">$</span>lifeExp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 60.0649</code></pre>
</div>
</div>
<p>So copy-pasting this into the tilde-dot anonymous function argument of the <code>map_dbl()</code> function within <code>mutate()</code>, I get what I wanted!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1">gapminder_nested <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb80-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">avg_lifeExp =</span> <span class="fu" style="color: #4758AB;">map_dbl</span>(data, <span class="sc" style="color: #5E5E5E;">~</span>{<span class="fu" style="color: #4758AB;">mean</span>(.x<span class="sc" style="color: #5E5E5E;">$</span>lifeExp)}))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 3
# Groups:   continent [5]
  continent data               avg_lifeExp
  &lt;chr&gt;     &lt;list&gt;                   &lt;dbl&gt;
1 Asia      &lt;tibble [396 × 5]&gt;        60.1
2 Europe    &lt;tibble [360 × 5]&gt;        71.9
3 Africa    &lt;tibble [624 × 5]&gt;        48.9
4 Americas  &lt;tibble [300 × 5]&gt;        64.7
5 Oceania   &lt;tibble [24 × 5]&gt;         74.3</code></pre>
</div>
</div>
<p>This code iterates through the data frames stored in the <code>data</code> column, returns the average life expectancy for each data frame, and concatonates the results into a numeric vector (which is then stored as a column called <code>avg_lifeExp</code>).</p>
<p>I hear what you’re saying… this is something that we could have done a lot more easily using standard dplyr commands (such as <code>summarise()</code>). True, but hopefully it helped you understand why you need to wrap mutate functions inside map functions when applying them to list columns.</p>
<p>Even if this example was less than inspiring, I promise the next example will knock your socks off!</p>
<p>The next exampe will demonstrate how to fit a model separately for each continent, and evaluate it, all within a single tibble. First, I will fit a linear model for each continent and store it as a list-column. If the data frame for a single continent is <code>.x</code>, then the model I want to fit is <code>lm(lifeExp ~ pop + gdpPercap + year, data = .x)</code> (check for yourself that this does what you expect). So I can copy-past this command into the <code>map()</code> function within the <code>mutate()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1"><span class="co" style="color: #5E5E5E;"># fit a model separately for each continent</span></span>
<span id="cb82-2">gapminder_nested <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder_nested <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb82-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">lm_obj =</span> <span class="fu" style="color: #4758AB;">map</span>(data, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">lm</span>(lifeExp <span class="sc" style="color: #5E5E5E;">~</span> pop <span class="sc" style="color: #5E5E5E;">+</span> gdpPercap <span class="sc" style="color: #5E5E5E;">+</span> year, <span class="at" style="color: #657422;">data =</span> .x)))</span>
<span id="cb82-4">gapminder_nested</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 3
# Groups:   continent [5]
  continent data               lm_obj
  &lt;chr&gt;     &lt;list&gt;             &lt;list&gt;
1 Asia      &lt;tibble [396 × 5]&gt; &lt;lm&gt;  
2 Europe    &lt;tibble [360 × 5]&gt; &lt;lm&gt;  
3 Africa    &lt;tibble [624 × 5]&gt; &lt;lm&gt;  
4 Americas  &lt;tibble [300 × 5]&gt; &lt;lm&gt;  
5 Oceania   &lt;tibble [24 × 5]&gt;  &lt;lm&gt;  </code></pre>
</div>
</div>
<p>Where the first linear model (for Asia) is</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1">gapminder_nested <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"lm_obj"</span>, <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = lifeExp ~ pop + gdpPercap + year, data = .x)

Coefficients:
(Intercept)          pop    gdpPercap         year  
 -7.833e+02    4.228e-11    2.510e-04    4.251e-01  </code></pre>
</div>
</div>
<p>I can then predict the response for the data stored in the <code>data</code> column using the corresponding linear model. So I have two objects I want to iterate over: the data and the linear model object. This means I want to use <code>map2()</code>. When things get a little more complicated I like to have multiple function arguments, so I’m going to use a full anonymous function rather than the tilde-dot shorthand.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1"><span class="co" style="color: #5E5E5E;"># predict the response for each continent</span></span>
<span id="cb86-2">gapminder_nested <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder_nested <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb86-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">pred =</span> <span class="fu" style="color: #4758AB;">map2</span>(lm_obj, data, <span class="cf" style="color: #003B4F;">function</span>(.lm, .data) <span class="fu" style="color: #4758AB;">predict</span>(.lm, .data)))</span>
<span id="cb86-4">gapminder_nested</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 4
# Groups:   continent [5]
  continent data               lm_obj pred       
  &lt;chr&gt;     &lt;list&gt;             &lt;list&gt; &lt;list&gt;     
1 Asia      &lt;tibble [396 × 5]&gt; &lt;lm&gt;   &lt;dbl [396]&gt;
2 Europe    &lt;tibble [360 × 5]&gt; &lt;lm&gt;   &lt;dbl [360]&gt;
3 Africa    &lt;tibble [624 × 5]&gt; &lt;lm&gt;   &lt;dbl [624]&gt;
4 Americas  &lt;tibble [300 × 5]&gt; &lt;lm&gt;   &lt;dbl [300]&gt;
5 Oceania   &lt;tibble [24 × 5]&gt;  &lt;lm&gt;   &lt;dbl [24]&gt; </code></pre>
</div>
</div>
<p>And I can then calculate the correlation between the predicted response and the true response, this time using the <code>map2()_dbl</code> function since I want the output the be a numeric vector rather than a list of single elements.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1"><span class="co" style="color: #5E5E5E;"># calculate the correlation between observed and predicted response for each continent</span></span>
<span id="cb88-2">gapminder_nested <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder_nested <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb88-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">cor =</span> <span class="fu" style="color: #4758AB;">map2_dbl</span>(pred, data, <span class="cf" style="color: #003B4F;">function</span>(.pred, .data) <span class="fu" style="color: #4758AB;">cor</span>(.pred, .data<span class="sc" style="color: #5E5E5E;">$</span>lifeExp)))</span>
<span id="cb88-4">gapminder_nested</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 5
# Groups:   continent [5]
  continent data               lm_obj pred          cor
  &lt;chr&gt;     &lt;list&gt;             &lt;list&gt; &lt;list&gt;      &lt;dbl&gt;
1 Asia      &lt;tibble [396 × 5]&gt; &lt;lm&gt;   &lt;dbl [396]&gt; 0.723
2 Europe    &lt;tibble [360 × 5]&gt; &lt;lm&gt;   &lt;dbl [360]&gt; 0.834
3 Africa    &lt;tibble [624 × 5]&gt; &lt;lm&gt;   &lt;dbl [624]&gt; 0.645
4 Americas  &lt;tibble [300 × 5]&gt; &lt;lm&gt;   &lt;dbl [300]&gt; 0.779
5 Oceania   &lt;tibble [24 × 5]&gt;  &lt;lm&gt;   &lt;dbl [24]&gt;  0.987</code></pre>
</div>
</div>
<p>Holy guacamole, that is so awesome!</p>
</section>
</section>
<section id="advanced-exercise" class="level2">
<h2 class="anchored" data-anchor-id="advanced-exercise">Advanced exercise</h2>
<p>The goal of this exercise is to fit a separate linear model for each continent without splitting up the data. Create the following data frame that has the continent, each term in the model for the continent, its linear model coefficient estimate, and standard error.</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 6
   continent term         estimate std.error statistic  p.value
   &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
 1 Asia      (Intercept) -7.83e+ 2   4.83e+1  -16.2    1.22e-45
 2 Asia      pop          4.23e-11   2.04e-9    0.0207 9.83e- 1
 3 Asia      year         4.25e- 1   2.44e-2   17.4    1.13e-50
 4 Asia      gdpPercap    2.51e- 4   3.01e-5    8.34   1.31e-15
 5 Europe    (Intercept) -1.61e+ 2   2.28e+1   -7.09   7.44e-12
 6 Europe    pop         -8.18e- 9   7.80e-9   -1.05   2.95e- 1
 7 Europe    year         1.16e- 1   1.16e-2    9.96   8.88e-21
 8 Europe    gdpPercap    3.25e- 4   2.15e-5   15.2    2.21e-40
 9 Africa    (Intercept) -4.70e+ 2   3.39e+1  -13.9    2.17e-38
10 Africa    pop         -3.68e- 9   1.89e-8   -0.195  8.45e- 1
11 Africa    year         2.61e- 1   1.71e-2   15.2    1.07e-44
12 Africa    gdpPercap    1.12e- 3   1.01e-4   11.1    2.46e-26
13 Americas  (Intercept) -5.33e+ 2   4.10e+1  -13.0    6.40e-31
14 Americas  pop         -2.15e- 8   8.62e-9   -2.49   1.32e- 2
15 Americas  year         3.00e- 1   2.08e-2   14.4    3.79e-36
16 Americas  gdpPercap    6.75e- 4   7.15e-5    9.44   1.13e-18
17 Oceania   (Intercept) -2.10e+ 2   5.12e+1   -4.10   5.61e- 4
18 Oceania   pop          8.37e- 9   3.34e-8    0.251  8.05e- 1
19 Oceania   year         1.42e- 1   2.65e-2    5.34   3.19e- 5
20 Oceania   gdpPercap    2.03e- 4   8.47e-5    2.39   2.66e- 2</code></pre>
</div>
</div>
<p>Hint: starting from the <code>gapminder</code> dataset, use <code>group_by()</code> and <code>nest()</code> to nest by continent, use a mutate together with <code>map</code> to fit a linear model for each continent, use another mutate with <code>broom::tidy()</code> to get a data frame of model coefficients for each model, and a <code>transmute</code> to get just the columns you want, followed by an <code>unnest()</code> to re-expand the nested tibble.</p>
<p>The solution code is at the end of this post.</p>
<p>If you want to stop here, you will already know more than most purrr users. The remainder of this blog post involves little-used features of purrr for manipulating lists.</p>
</section>
</section>
<section id="additional-purrr-functionalities-for-lists" class="level1">
<h1>Additional purrr functionalities for lists</h1>
<p>To demonstrate how to use purrr to manipulate lists, we will split the gapminder dataset into a <em>list of data frames</em> (which is kind of like the converse of a data frame containing a list-column). To make sure it’s easy to follow, we will only keep 5 rows from each continent.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb91-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">23489</span>)</span>
<span id="cb91-2">gapminder_list <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">split</span>(gapminder<span class="sc" style="color: #5E5E5E;">$</span>continent) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb91-3">  <span class="fu" style="color: #4758AB;">map</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">sample_n</span>(., <span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb91-4">gapminder_list</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Africa
            country year      pop continent lifeExp gdpPercap
1            Gambia 1967   439593    Africa  35.857  734.7829
2      Sierra Leone 1967  2662190    Africa  34.113 1206.0435
3           Namibia 1997  1774766    Africa  58.909 3899.5243
4 Equatorial Guinea 1992   387838    Africa  47.545 1132.0550
5     Cote d'Ivoire 2002 16252726    Africa  46.832 1648.8008

$Americas
             country year     pop continent lifeExp gdpPercap
1 Dominican Republic 1997 7992357  Americas  69.957  3614.101
2        Puerto Rico 1987 3444468  Americas  74.630 12281.342
3           Honduras 1992 5077347  Americas  66.399  3081.695
4            Uruguay 2007 3447496  Americas  76.384 10611.463
5         Costa Rica 1962 1345187  Americas  62.842  3460.937

$Asia
     country year       pop continent lifeExp gdpPercap
1    Lebanon 1967   2186894      Asia  63.870 6006.9830
2      Nepal 1962  10332057      Asia  39.393  652.3969
3 Yemen Rep. 1992  13367997      Asia  55.599 1879.4967
4      India 1972 567000000      Asia  50.651  724.0325
5   Cambodia 1952   4693836      Asia  39.417  368.4693

$Europe
         country year      pop continent lifeExp gdpPercap
1 United Kingdom 2002 59912431    Europe  78.471  29479.00
2         Greece 1997 10502372    Europe  77.869  18747.70
3        Belgium 2002 10311970    Europe  78.320  30485.88
4        Croatia 2002  4481020    Europe  74.876  11628.39
5    Netherlands 1967 12596822    Europe  73.820  15363.25

$Oceania
      country year      pop continent lifeExp gdpPercap
1   Australia 1982 15184200   Oceania  74.740  19477.01
2 New Zealand 1997  3676187   Oceania  77.550  21050.41
3 New Zealand 2007  4115771   Oceania  80.204  25185.01
4   Australia 2007 20434176   Oceania  81.235  34435.37
5 New Zealand 1952  1994794   Oceania  69.390  10556.58</code></pre>
</div>
</div>
<section id="keepdiscard-select_if-for-lists" class="level2">
<h2 class="anchored" data-anchor-id="keepdiscard-select_if-for-lists">Keep/Discard: select_if for lists</h2>
<p><code>keep()</code> only keeps elements of a list that satisfy a given condition, much like <code>select_if()</code> selects columns of a data frame that satisfy a given condition.</p>
<p>The following code only keeps the gapminder continent data frames (the elements of the list) that have an average (among the sample of 5 rows) life expectancy of at least 70.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb93-1">gapminder_list <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb93-2">  <span class="fu" style="color: #4758AB;">keep</span>(<span class="sc" style="color: #5E5E5E;">~</span>{<span class="fu" style="color: #4758AB;">mean</span>(.x<span class="sc" style="color: #5E5E5E;">$</span>lifeExp) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">70</span>})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Americas
             country year     pop continent lifeExp gdpPercap
1 Dominican Republic 1997 7992357  Americas  69.957  3614.101
2        Puerto Rico 1987 3444468  Americas  74.630 12281.342
3           Honduras 1992 5077347  Americas  66.399  3081.695
4            Uruguay 2007 3447496  Americas  76.384 10611.463
5         Costa Rica 1962 1345187  Americas  62.842  3460.937

$Europe
         country year      pop continent lifeExp gdpPercap
1 United Kingdom 2002 59912431    Europe  78.471  29479.00
2         Greece 1997 10502372    Europe  77.869  18747.70
3        Belgium 2002 10311970    Europe  78.320  30485.88
4        Croatia 2002  4481020    Europe  74.876  11628.39
5    Netherlands 1967 12596822    Europe  73.820  15363.25

$Oceania
      country year      pop continent lifeExp gdpPercap
1   Australia 1982 15184200   Oceania  74.740  19477.01
2 New Zealand 1997  3676187   Oceania  77.550  21050.41
3 New Zealand 2007  4115771   Oceania  80.204  25185.01
4   Australia 2007 20434176   Oceania  81.235  34435.37
5 New Zealand 1952  1994794   Oceania  69.390  10556.58</code></pre>
</div>
</div>
<p><code>discard()</code> does the opposite of <code>keep()</code>: it discards any elements that satisfy your logical condition.</p>
</section>
<section id="reduce" class="level2">
<h2 class="anchored" data-anchor-id="reduce">Reduce</h2>
<p><code>reduce()</code> is designed to combine (reduces) all of the elements of a list into a single object by iteratively applying a binary function (a function that takes two inputs).</p>
<p>For instance, applying a reduce function to add up all of the elements of the vector <code>c(1, 2, 3)</code> is like doing <code>sum(sum(1, 2), 3)</code>: first it applies <code>sum</code> to <code>1</code> and <code>2</code>, then it applies <code>sum</code> again to the output of <code>sum(1, 2)</code> and <code>3</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb95-1"><span class="fu" style="color: #4758AB;">reduce</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>), sum)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 6</code></pre>
</div>
</div>
<p><code>accumulate()</code> also returns the intermediate values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb97-1"><span class="fu" style="color: #4758AB;">accumulate</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>), sum)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 3 6</code></pre>
</div>
</div>
<p>An example of when <code>reduce()</code> might come in handy is when you want to perform many <code>left_join()</code>s in a row, or to do repeated <code>rbinds()</code> (e.g.&nbsp;to bind the rows of the list back together into a single data frame)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb99-1">gapminder_list <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb99-2">  <span class="fu" style="color: #4758AB;">reduce</span>(rbind)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              country year       pop continent lifeExp  gdpPercap
1              Gambia 1967    439593    Africa  35.857   734.7829
2        Sierra Leone 1967   2662190    Africa  34.113  1206.0435
3             Namibia 1997   1774766    Africa  58.909  3899.5243
4   Equatorial Guinea 1992    387838    Africa  47.545  1132.0550
5       Cote d'Ivoire 2002  16252726    Africa  46.832  1648.8008
6  Dominican Republic 1997   7992357  Americas  69.957  3614.1013
7         Puerto Rico 1987   3444468  Americas  74.630 12281.3419
8            Honduras 1992   5077347  Americas  66.399  3081.6946
9             Uruguay 2007   3447496  Americas  76.384 10611.4630
10         Costa Rica 1962   1345187  Americas  62.842  3460.9370
11            Lebanon 1967   2186894      Asia  63.870  6006.9830
12              Nepal 1962  10332057      Asia  39.393   652.3969
13         Yemen Rep. 1992  13367997      Asia  55.599  1879.4967
14              India 1972 567000000      Asia  50.651   724.0325
15           Cambodia 1952   4693836      Asia  39.417   368.4693
16     United Kingdom 2002  59912431    Europe  78.471 29478.9992
17             Greece 1997  10502372    Europe  77.869 18747.6981
18            Belgium 2002  10311970    Europe  78.320 30485.8838
19            Croatia 2002   4481020    Europe  74.876 11628.3890
20        Netherlands 1967  12596822    Europe  73.820 15363.2514
21          Australia 1982  15184200   Oceania  74.740 19477.0093
22        New Zealand 1997   3676187   Oceania  77.550 21050.4138
23        New Zealand 2007   4115771   Oceania  80.204 25185.0091
24          Australia 2007  20434176   Oceania  81.235 34435.3674
25        New Zealand 1952   1994794   Oceania  69.390 10556.5757</code></pre>
</div>
</div>
</section>
<section id="logical-statements-for-lists" class="level2">
<h2 class="anchored" data-anchor-id="logical-statements-for-lists">Logical statements for lists</h2>
<p>Asking logical questions of a list can be done using <code>every()</code> and <code>some()</code>. For instance to ask whether <em>every</em> continent has average life expectancy greater than 70, you can use <code>every()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb101-1">gapminder_list <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">every</span>(<span class="sc" style="color: #5E5E5E;">~</span>{<span class="fu" style="color: #4758AB;">mean</span>(.x<span class="sc" style="color: #5E5E5E;">$</span>life) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">70</span>})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>To ask whether <em>some</em> continents have average life expectancy greater than 70, you can use <code>some()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb103-1">gapminder_list <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">some</span>(<span class="sc" style="color: #5E5E5E;">~</span>{<span class="fu" style="color: #4758AB;">mean</span>(.x<span class="sc" style="color: #5E5E5E;">$</span>life) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">70</span>})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>An equivalent of <code>%in%</code> for lists is <code>has_element()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb105-1"><span class="fu" style="color: #4758AB;">list</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">1</span>), <span class="st" style="color: #20794D;">"a"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">has_element</span>(<span class="st" style="color: #20794D;">"a"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Most of these functions also work on vectors.</p>
<p>Now go forth and purrr!</p>
</section>
</section>
<section id="answer-to-advanced-exercise" class="level1">
<h1>Answer to advanced exercise</h1>
<p>The following code produces the table from the exercise above</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb107-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb107-2">  <span class="fu" style="color: #4758AB;">group_by</span>(continent) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb107-3">  <span class="fu" style="color: #4758AB;">nest</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb107-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">lm_obj =</span> <span class="fu" style="color: #4758AB;">map</span>(data, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">lm</span>(lifeExp <span class="sc" style="color: #5E5E5E;">~</span> pop <span class="sc" style="color: #5E5E5E;">+</span> year <span class="sc" style="color: #5E5E5E;">+</span> gdpPercap, <span class="at" style="color: #657422;">data =</span> .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb107-5">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">lm_tidy =</span> <span class="fu" style="color: #4758AB;">map</span>(lm_obj, broom<span class="sc" style="color: #5E5E5E;">::</span>tidy)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb107-6">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb107-7">  <span class="fu" style="color: #4758AB;">transmute</span>(continent, lm_tidy) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb107-8">  <span class="fu" style="color: #4758AB;">unnest</span>(<span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">c</span>(lm_tidy))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 6
   continent term         estimate std.error statistic  p.value
   &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
 1 Asia      (Intercept) -7.83e+ 2   4.83e+1  -16.2    1.22e-45
 2 Asia      pop          4.23e-11   2.04e-9    0.0207 9.83e- 1
 3 Asia      year         4.25e- 1   2.44e-2   17.4    1.13e-50
 4 Asia      gdpPercap    2.51e- 4   3.01e-5    8.34   1.31e-15
 5 Europe    (Intercept) -1.61e+ 2   2.28e+1   -7.09   7.44e-12
 6 Europe    pop         -8.18e- 9   7.80e-9   -1.05   2.95e- 1
 7 Europe    year         1.16e- 1   1.16e-2    9.96   8.88e-21
 8 Europe    gdpPercap    3.25e- 4   2.15e-5   15.2    2.21e-40
 9 Africa    (Intercept) -4.70e+ 2   3.39e+1  -13.9    2.17e-38
10 Africa    pop         -3.68e- 9   1.89e-8   -0.195  8.45e- 1
11 Africa    year         2.61e- 1   1.71e-2   15.2    1.07e-44
12 Africa    gdpPercap    1.12e- 3   1.01e-4   11.1    2.46e-26
13 Americas  (Intercept) -5.33e+ 2   4.10e+1  -13.0    6.40e-31
14 Americas  pop         -2.15e- 8   8.62e-9   -2.49   1.32e- 2
15 Americas  year         3.00e- 1   2.08e-2   14.4    3.79e-36
16 Americas  gdpPercap    6.75e- 4   7.15e-5    9.44   1.13e-18
17 Oceania   (Intercept) -2.10e+ 2   5.12e+1   -4.10   5.61e- 4
18 Oceania   pop          8.37e- 9   3.34e-8    0.251  8.05e- 1
19 Oceania   year         1.42e- 1   2.65e-2    5.34   3.19e- 5
20 Oceania   gdpPercap    2.03e- 4   8.47e-5    2.39   2.66e- 2</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>R</category>
  <category>purrr</category>
  <category>tidyverse</category>
  <guid>https://www.rebeccabarter.com/blog/2019-08-19_purrr.html</guid>
  <pubDate>Mon, 19 Aug 2019 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Transitioning into the tidyverse (part 1)</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse.html</link>
  <description><![CDATA[ 




<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">knitr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">include_graphics</span>(<span class="st" style="color: #20794D;">"img/tidyverse/tidyverse_all.png"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.rebeccabarter.com/blog/img/tidyverse/tidyverse_all.png" class="img-fluid" style="width:70.0%"></p>
</div>
</div>
<p>Most people who learned R before the tidyverse have likely started to feel a nibble of pressure to get aboard the tidyverse train. Sadly a fact of human nature is that once you’re comfortable doing something a certain way, it’s hard to find the motivation to learn a different way of doing something that you already know how to do. As someone first learnt R 10 years ago (long before the tidyverse) I’ve been there. Five years ago, I was pushed to stick my little toe into the shallow-end of the tidyverse pool by learning ggplot2, and I never went back.</p>
<p>While the tidyverse is primarily made up of a set of super useful R packages (<em>ggplot2</em>, <em>dplyr</em>, <em>purrr</em>, <em>tidyr</em>, <em>readr</em>, <em>tibble</em>), it is also a way of thinking about implementing “tidy” data analysis. If you combine tidy thinking with the tidy packages, you will inevitably become a master of tidy analysis. From where I float now substantially closer to the deep-end of the tidyverse pool, I would provide the following arguments you as well as to my past self for why it is a good idea to learn the tidyverse:</p>
<ul>
<li><p>Regardless of whether you think the tidyverse or base R is “better”, it is always a good idea to keep up with what is current. It’s so easy to get left behind. What you learn today will most likely be out-of-date in a year, but next year’s iteration of what is current will almost certainly be built upon today’s iteration. If you make an effort keep up with things as they change, then you can take lots of little easy steps instead of finding yourself needing to take a big difficult jump in a few years.</p></li>
<li><p>Code written in the tidyverse style is much easier to read, and is more consistent than base R (e.g.&nbsp;the first argument of almost every tidyverse function is the data frame on which it acts, which allows us to make heavy use of something called “piping”). Base R, on the other hand, has a somewhat inconsistent mish-mash of function and argument styles.</p></li>
<li><p>The humans that make up the tidyverse community are amazing.</p></li>
</ul>
<p>Much of the initial efforts of the tidyverse were the brainchild of Hadley Wickham, but these days there are a huge number of people who contribute to, maintain, and develop the tidyverse. The tidyverse is open-source and collaborative (which means that you - yes <em>you</em> - could contribute to it if you wanted to), and is hosted on the tidyverse github: https://github.com/tidyverse.</p>
<p>The goal of this post is to summarise the overall goals of the tidyverse, provide short tutorials on each of the packages that form the tidyverse (and how they play together), and to provide links to additional resources for learning them.</p>
<p>For new tidyverse practitioners, I’d recommend focusing on getting a handle on piping <code>%&gt;%</code>, and learning the <em>dplyr</em> and <em>ggplot2</em> packages (these form part one of this post). Once you feel comfortable with these core aspects of the tidyverse, you can move onto <a href="http://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_pt2/">part two</a> of this two-part series on the tidyverse to learn about the remaining packages.</p>
<p>It is important to remember that the tidyverse is constantly evolving. The best ways to keep up to date with the evolving tidyverse ecosystem is (1) to follow the RStudio blog (https://blog.rstudio.com/), and (2) start following R people on twitter. Mara Averick (<span class="citation" data-cites="dataandme">@dataandme</span>) and Hadley Wickham (<span class="citation" data-cites="hadleywickham">@hadleywickham</span>) are good people to follow. A great resource for learning about the tidyverse in more detail is <a href="https://r4ds.had.co.nz/">R for Data Science</a> by Garrett Grolemund and Hadley Wickham.</p>
<section id="entering-the-tidyverse" class="level1">
<h1>Entering the tidyverse</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">knitr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">include_graphics</span>(<span class="st" style="color: #20794D;">"img/tidyverse/tidyverse.png"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.rebeccabarter.com/blog/img/tidyverse/tidyverse.png" class="img-fluid" style="width:70.0%"></p>
</div>
</div>
<p>The fundamental object type of the tidyverse is the data frame (which, once you get a little deeper into the tidyverse ecosystem, becomes a “tibble” - more on that later in part 2). Thus the starting point for getting comfortable with the tidyverse is to <em>always store your data as a <strong>data frame</strong></em> (rather than as a matrix or as vectors) with informative string-based column names where words are preferably separated by underscores (rather than periods).</p>
<p>The tidyverse is not simply a set of functions that replace base R functions. The tidyverse represents a way of <em>thinking</em> about how you conduct your data analysis:</p>
<ul>
<li><p>Think of your data frame as the universe, and the columns of your data frame as the objects in your universe that you can explore, manipulate and model.</p></li>
<li><p>When coding in <em>base R</em>, it is very common to define many intermediate objects and modified versions of the same data frame (or data object). When coding in the <em>tidyverse</em>, the key is to <strong>minimize defining new data objects</strong>. Instead, focus on manipulating your current data frame and just printing the output of your manipulations (e.g.&nbsp;a summary or plot). Only create new data objects in your R environment if you will be using both the <em>original</em> data object and the <em>new</em> data object in your later analyses.</p></li>
</ul>
<p>To load the tidyverse packages, you could install them all individually (once):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># only ever run once to install the individual packages on your system</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"dplyr"</span>)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"ggplot2"</span>)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"purrr"</span>)</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"tidyr"</span>)</span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"readr"</span>)</span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"tibble"</span>)</span></code></pre></div>
</div>
<p>and then load them all into your session individually every time:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">library</span>(purrr)</span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">library</span>(tidyr)</span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;">library</span>(readr)</span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;">library</span>(tibble)</span></code></pre></div>
</div>
<p><em>or</em>, you could just install and load the <code>tidyverse</code> package, which will do all of the above for you:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># only ever run once to install the tidyverse on your system</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"tidyverse"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
</div>
<p>which is much easier.</p>
<p>Throughout this tutorial, we will use the gapminder dataset that can be loaded directly if you’re connected to the internet.</p>
<p>My general workflow involves loading the original data and saving it as an object with a meaningful name and an <code>_orig</code> suffix. I then define a copy of the original dataset without the <code>_orig</code> suffix. Having an original copy of my data in my environment means that it is easy to check that my manipulations do what I expected. I will make direct data cleaning modifications to the <code>gapminder</code> data frame, but will never edit the <code>gapminder_orig</code> data frame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># to download the data directly:</span></span>
<span id="cb7-2">gapminder_orig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder-FiveYearData.csv"</span>)</span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;"># define a copy of the original dataset that we will clean and play with </span></span>
<span id="cb7-4">gapminder <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder_orig</span></code></pre></div>
</div>
<p>The gapminder dataset has 1704 rows containing information on population, life expectancy and GDP per capita by year and country.</p>
<p>A “tidy” data frame is one where every row is a single observational unit (in this case, indexed by country and year), and every column corresponds to a variable that is measured for each observational unit (in this case, for each country and year, a measurement is made for population, continent, life expectancy and GDP). If you’d like to learn more about “tidy data”, I highly recommend reading <a href="vita.had.co.nz/papers/tidy-data.pdf">Hadley Wickham’s tidy data article</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">dim</span>(gapminder)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1704    6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">head</span>(gapminder)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      country year      pop continent lifeExp gdpPercap
1 Afghanistan 1952  8425333      Asia  28.801  779.4453
2 Afghanistan 1957  9240934      Asia  30.332  820.8530
3 Afghanistan 1962 10267083      Asia  31.997  853.1007
4 Afghanistan 1967 11537966      Asia  34.020  836.1971
5 Afghanistan 1972 13079460      Asia  36.088  739.9811
6 Afghanistan 1977 14880372      Asia  38.438  786.1134</code></pre>
</div>
</div>
<p>Now that you’ve loaded the tidyverse and the gapminder data, you’re are ready to learn about our first tidy analysis tool: the pipe.</p>
</section>
<section id="piping" class="level1">
<h1>Piping: %&gt;%</h1>
<p align="center">
<img src="https://www.rebeccabarter.com/img/tidyverse/pipe.png" alt="Pipe" width="180" height="200">
</p>
<p>Pipes are the workhorse of tidy analyses. Piping allows you to chain together many functions, eliminating the need to define multiple intermediate objects to use as the input to subsequent functions. In my eyes, pipes are also the primary reason that tidyverse code is fundamentally easier to read than base R code.</p>
<p>I always read the pipe symbol, <code>%&gt;%</code>, in my head as <em>“and then”</em>. Consider the following code. Try to figure out what the following code will produce (even if you’ve never seen the <code>filter</code> and <code>select</code> dplyr functions before - I’ll formally introduce these later).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">filter</span>(continent <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Americas"</span>, year <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"2007"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;">select</span>(country, lifeExp)</span></code></pre></div>
</div>
<p>I read this code in my head as: <em>take the gapminder dataset <strong>and then</strong> filter to the “Americas” continents and the year 2007, <strong>and then</strong> select the country and life expectancy variables.</em></p>
<p>Running this code first filters the data frame only to the rows whose <code>continent</code> value is “Americas” and whose <code>year</code> value is “2007”, and then it shows you the <code>country</code> and <code>lifeExp</code> columns for those rows. Run it yourself to see.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># take the gapminder dataset</span></span>
<span id="cb13-2">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-3">  <span class="co" style="color: #5E5E5E;"># and filter to the rows whose continent is Americas and year is 2007</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">filter</span>(continent <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Americas"</span>, year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-5">  <span class="co" style="color: #5E5E5E;"># show the country and lifeExp values for these rows</span></span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;">select</span>(country, lifeExp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>               country lifeExp
1            Argentina  75.320
2              Bolivia  65.554
3               Brazil  72.390
4               Canada  80.653
5                Chile  78.553
6             Colombia  72.889
7           Costa Rica  78.782
8                 Cuba  78.273
9   Dominican Republic  72.235
10             Ecuador  74.994
11         El Salvador  71.878
12           Guatemala  70.259
13               Haiti  60.916
14            Honduras  70.198
15             Jamaica  72.567
16              Mexico  76.195
17           Nicaragua  72.899
18              Panama  75.537
19            Paraguay  71.752
20                Peru  71.421
21         Puerto Rico  78.746
22 Trinidad and Tobago  69.819
23       United States  78.242
24             Uruguay  76.384
25           Venezuela  73.747</code></pre>
</div>
</div>
<p>To become a piping expert you’ll need to have a firm grasp on what it’s actually doing. The pipe uses the object on the left-hand-side of the <code>%&gt;%</code> as the <em>first argument</em> of the function on the right-hand-side.</p>
<p>For instance, the un-piped version of</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">filter</span>(continent <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Americas"</span>, year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>)</span></code></pre></div>
</div>
<p>is</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">filter</span>(gapminder, continent <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Americas"</span>, year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>)</span></code></pre></div>
</div>
<p>If you were determined not to use piping, but you wanted to do many manipulations, your code would very quickly get messy and difficult to read. In the style of base R, the common way of making code more readable is to define intermediate objects.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">gapminder_filtered <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">filter</span>(gapminder, continent <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Americas"</span>, year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>)</span>
<span id="cb17-2">gapminder_filtered_selected <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">select</span>(gapminder_filtered, country, lifeExp)</span>
<span id="cb17-3">gapminder_filtered_selected</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>               country lifeExp
1            Argentina  75.320
2              Bolivia  65.554
3               Brazil  72.390
4               Canada  80.653
5                Chile  78.553
6             Colombia  72.889
7           Costa Rica  78.782
8                 Cuba  78.273
9   Dominican Republic  72.235
10             Ecuador  74.994
11         El Salvador  71.878
12           Guatemala  70.259
13               Haiti  60.916
14            Honduras  70.198
15             Jamaica  72.567
16              Mexico  76.195
17           Nicaragua  72.899
18              Panama  75.537
19            Paraguay  71.752
20                Peru  71.421
21         Puerto Rico  78.746
22 Trinidad and Tobago  69.819
23       United States  78.242
24             Uruguay  76.384
25           Venezuela  73.747</code></pre>
</div>
</div>
<p>To me, the piped version is infinitely more clear, and simultaneously got rid of the need to define any intermediate objects that I would have needed to keep track of while reading the code. Once I got more and more comfortable with piping, I started to find that pretty much <em>all</em> of my code uses pipes.</p>
</section>
<section id="data-manipulation-dplyr" class="level1">
<h1>Data manipulation: dplyr</h1>
<p align="center">
<img src="https://www.rebeccabarter.com/img/tidyverse/dplyr.png" alt="dplyr" width="180" height="200">
</p>
<p>The <code>filter()</code> and <code>select()</code> functions that I just introduced are examples of data manipulation functions from the dplyr package.</p>
<p>In the tidyverse, you will almost never use the <code>[,]</code> indexing nor the <code>$</code> data frame column indexing that are pervasive throughout base R code. Indexing in dplyr is done using <code>filter()</code> for rows and <code>select()</code> for columns.</p>
<p>You may have noticed that the variable names <code>continent</code>, <code>year</code>, <code>country</code>, <code>lifeExp</code> that were used inside the <code>filter()</code> and <code>select()</code> functions were <strong>unquoted</strong>. One of the key components of the tidyverse is thinking of your universe as the data frame, and the <em>columns</em> of the data frame as variables or objects that you can play with. Just like how you don’t need to quote variable names in your environment to play with them, you usually don’t need to quote data frame variables (columns) inside tidyverse functions.</p>
<p>Let’s contrast our piped dplyr code</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># take the gapminder dataset</span></span>
<span id="cb19-2">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb19-3">  <span class="co" style="color: #5E5E5E;"># and filter to the rows whose continent is Americas and year is 2007</span></span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;">filter</span>(continent <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Americas"</span>, year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb19-5">  <span class="co" style="color: #5E5E5E;"># show the country and lifeExp values for these rows</span></span>
<span id="cb19-6">  <span class="fu" style="color: #4758AB;">select</span>(country, lifeExp)</span></code></pre></div>
</div>
<p>with one potential version of equivalent base R code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># identify which rows correspond to the Americas and the year 2007</span></span>
<span id="cb20-2">continent_year_index <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">which</span>(gapminder[<span class="st" style="color: #20794D;">"continent"</span>] <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Americas"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> gapminder[<span class="st" style="color: #20794D;">"year"</span>] <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>)</span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;"># pull only those rows and show the country and life expectency columns</span></span>
<span id="cb20-4">gapminder[continent_year_index, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"country"</span>, <span class="st" style="color: #20794D;">"lifeExp"</span>)]</span></code></pre></div>
</div>
<p>There are a few key differences</p>
<ul>
<li><p>The variable names are quoted in the base R version but not in the dplyr version</p></li>
<li><p>An intermediate row index variable was defined in the base R version but not in the dplyr version</p></li>
</ul>
<p>The primary dplyr functions are</p>
<section id="select-select-columns" class="level2">
<h2 class="anchored" data-anchor-id="select-select-columns"><code>select</code>: select columns</h2>
<p>The arguments of the select function specify which data frame variables should be kept. <code>select()</code> is like indexing columns by name. You do not need to quote the column names (but you can if you want to).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">select</span>(country, gdpPercap) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                      country   gdpPercap
1                 Afghanistan    779.4453
2                 Afghanistan    820.8530
3                 Afghanistan    853.1007
4                 Afghanistan    836.1971
5                 Afghanistan    739.9811
6                 Afghanistan    786.1134
7                 Afghanistan    978.0114
8                 Afghanistan    852.3959
9                 Afghanistan    649.3414
10                Afghanistan    635.3414
11                Afghanistan    726.7341
12                Afghanistan    974.5803
13                    Albania   1601.0561
14                    Albania   1942.2842
15                    Albania   2312.8890
16                    Albania   2760.1969
17                    Albania   3313.4222
18                    Albania   3533.0039
19                    Albania   3630.8807
20                    Albania   3738.9327
21                    Albania   2497.4379
22                    Albania   3193.0546
23                    Albania   4604.2117
24                    Albania   5937.0295
25                    Algeria   2449.0082
26                    Algeria   3013.9760
27                    Algeria   2550.8169
28                    Algeria   3246.9918
29                    Algeria   4182.6638
30                    Algeria   4910.4168
31                    Algeria   5745.1602
32                    Algeria   5681.3585
33                    Algeria   5023.2166
34                    Algeria   4797.2951
35                    Algeria   5288.0404
36                    Algeria   6223.3675
37                     Angola   3520.6103
38                     Angola   3827.9405
39                     Angola   4269.2767
40                     Angola   5522.7764
41                     Angola   5473.2880
42                     Angola   3008.6474
43                     Angola   2756.9537
44                     Angola   2430.2083
45                     Angola   2627.8457
46                     Angola   2277.1409
47                     Angola   2773.2873
48                     Angola   4797.2313
49                  Argentina   5911.3151
50                  Argentina   6856.8562
51                  Argentina   7133.1660
52                  Argentina   8052.9530
53                  Argentina   9443.0385
54                  Argentina  10079.0267
55                  Argentina   8997.8974
56                  Argentina   9139.6714
57                  Argentina   9308.4187
58                  Argentina  10967.2820
59                  Argentina   8797.6407
60                  Argentina  12779.3796
61                  Australia  10039.5956
62                  Australia  10949.6496
63                  Australia  12217.2269
64                  Australia  14526.1246
65                  Australia  16788.6295
66                  Australia  18334.1975
67                  Australia  19477.0093
68                  Australia  21888.8890
69                  Australia  23424.7668
70                  Australia  26997.9366
71                  Australia  30687.7547
72                  Australia  34435.3674
73                    Austria   6137.0765
74                    Austria   8842.5980
75                    Austria  10750.7211
76                    Austria  12834.6024
77                    Austria  16661.6256
78                    Austria  19749.4223
79                    Austria  21597.0836
80                    Austria  23687.8261
81                    Austria  27042.0187
82                    Austria  29095.9207
83                    Austria  32417.6077
84                    Austria  36126.4927
85                    Bahrain   9867.0848
86                    Bahrain  11635.7995
87                    Bahrain  12753.2751
88                    Bahrain  14804.6727
89                    Bahrain  18268.6584
90                    Bahrain  19340.1020
91                    Bahrain  19211.1473
92                    Bahrain  18524.0241
93                    Bahrain  19035.5792
94                    Bahrain  20292.0168
95                    Bahrain  23403.5593
96                    Bahrain  29796.0483
97                 Bangladesh    684.2442
98                 Bangladesh    661.6375
99                 Bangladesh    686.3416
100                Bangladesh    721.1861
101                Bangladesh    630.2336
102                Bangladesh    659.8772
103                Bangladesh    676.9819
104                Bangladesh    751.9794
105                Bangladesh    837.8102
106                Bangladesh    972.7700
107                Bangladesh   1136.3904
108                Bangladesh   1391.2538
109                   Belgium   8343.1051
110                   Belgium   9714.9606
111                   Belgium  10991.2068
112                   Belgium  13149.0412
113                   Belgium  16672.1436
114                   Belgium  19117.9745
115                   Belgium  20979.8459
116                   Belgium  22525.5631
117                   Belgium  25575.5707
118                   Belgium  27561.1966
119                   Belgium  30485.8838
120                   Belgium  33692.6051
121                     Benin   1062.7522
122                     Benin    959.6011
123                     Benin    949.4991
124                     Benin   1035.8314
125                     Benin   1085.7969
126                     Benin   1029.1613
127                     Benin   1277.8976
128                     Benin   1225.8560
129                     Benin   1191.2077
130                     Benin   1232.9753
131                     Benin   1372.8779
132                     Benin   1441.2849
133                   Bolivia   2677.3263
134                   Bolivia   2127.6863
135                   Bolivia   2180.9725
136                   Bolivia   2586.8861
137                   Bolivia   2980.3313
138                   Bolivia   3548.0978
139                   Bolivia   3156.5105
140                   Bolivia   2753.6915
141                   Bolivia   2961.6997
142                   Bolivia   3326.1432
143                   Bolivia   3413.2627
144                   Bolivia   3822.1371
145    Bosnia and Herzegovina    973.5332
146    Bosnia and Herzegovina   1353.9892
147    Bosnia and Herzegovina   1709.6837
148    Bosnia and Herzegovina   2172.3524
149    Bosnia and Herzegovina   2860.1698
150    Bosnia and Herzegovina   3528.4813
151    Bosnia and Herzegovina   4126.6132
152    Bosnia and Herzegovina   4314.1148
153    Bosnia and Herzegovina   2546.7814
154    Bosnia and Herzegovina   4766.3559
155    Bosnia and Herzegovina   6018.9752
156    Bosnia and Herzegovina   7446.2988
157                  Botswana    851.2411
158                  Botswana    918.2325
159                  Botswana    983.6540
160                  Botswana   1214.7093
161                  Botswana   2263.6111
162                  Botswana   3214.8578
163                  Botswana   4551.1421
164                  Botswana   6205.8839
165                  Botswana   7954.1116
166                  Botswana   8647.1423
167                  Botswana  11003.6051
168                  Botswana  12569.8518
169                    Brazil   2108.9444
170                    Brazil   2487.3660
171                    Brazil   3336.5858
172                    Brazil   3429.8644
173                    Brazil   4985.7115
174                    Brazil   6660.1187
175                    Brazil   7030.8359
176                    Brazil   7807.0958
177                    Brazil   6950.2830
178                    Brazil   7957.9808
179                    Brazil   8131.2128
180                    Brazil   9065.8008
181                  Bulgaria   2444.2866
182                  Bulgaria   3008.6707
183                  Bulgaria   4254.3378
184                  Bulgaria   5577.0028
185                  Bulgaria   6597.4944
186                  Bulgaria   7612.2404
187                  Bulgaria   8224.1916
188                  Bulgaria   8239.8548
189                  Bulgaria   6302.6234
190                  Bulgaria   5970.3888
191                  Bulgaria   7696.7777
192                  Bulgaria  10680.7928
193              Burkina Faso    543.2552
194              Burkina Faso    617.1835
195              Burkina Faso    722.5120
196              Burkina Faso    794.8266
197              Burkina Faso    854.7360
198              Burkina Faso    743.3870
199              Burkina Faso    807.1986
200              Burkina Faso    912.0631
201              Burkina Faso    931.7528
202              Burkina Faso    946.2950
203              Burkina Faso   1037.6452
204              Burkina Faso   1217.0330
205                   Burundi    339.2965
206                   Burundi    379.5646
207                   Burundi    355.2032
208                   Burundi    412.9775
209                   Burundi    464.0995
210                   Burundi    556.1033
211                   Burundi    559.6032
212                   Burundi    621.8188
213                   Burundi    631.6999
214                   Burundi    463.1151
215                   Burundi    446.4035
216                   Burundi    430.0707
217                  Cambodia    368.4693
218                  Cambodia    434.0383
219                  Cambodia    496.9136
220                  Cambodia    523.4323
221                  Cambodia    421.6240
222                  Cambodia    524.9722
223                  Cambodia    624.4755
224                  Cambodia    683.8956
225                  Cambodia    682.3032
226                  Cambodia    734.2852
227                  Cambodia    896.2260
228                  Cambodia   1713.7787
229                  Cameroon   1172.6677
230                  Cameroon   1313.0481
231                  Cameroon   1399.6074
232                  Cameroon   1508.4531
233                  Cameroon   1684.1465
234                  Cameroon   1783.4329
235                  Cameroon   2367.9833
236                  Cameroon   2602.6642
237                  Cameroon   1793.1633
238                  Cameroon   1694.3375
239                  Cameroon   1934.0114
240                  Cameroon   2042.0952
241                    Canada  11367.1611
242                    Canada  12489.9501
243                    Canada  13462.4855
244                    Canada  16076.5880
245                    Canada  18970.5709
246                    Canada  22090.8831
247                    Canada  22898.7921
248                    Canada  26626.5150
249                    Canada  26342.8843
250                    Canada  28954.9259
251                    Canada  33328.9651
252                    Canada  36319.2350
253  Central African Republic   1071.3107
254  Central African Republic   1190.8443
255  Central African Republic   1193.0688
256  Central African Republic   1136.0566
257  Central African Republic   1070.0133
258  Central African Republic   1109.3743
259  Central African Republic    956.7530
260  Central African Republic    844.8764
261  Central African Republic    747.9055
262  Central African Republic    740.5063
263  Central African Republic    738.6906
264  Central African Republic    706.0165
265                      Chad   1178.6659
266                      Chad   1308.4956
267                      Chad   1389.8176
268                      Chad   1196.8106
269                      Chad   1104.1040
270                      Chad   1133.9850
271                      Chad    797.9081
272                      Chad    952.3861
273                      Chad   1058.0643
274                      Chad   1004.9614
275                      Chad   1156.1819
276                      Chad   1704.0637
277                     Chile   3939.9788
278                     Chile   4315.6227
279                     Chile   4519.0943
280                     Chile   5106.6543
281                     Chile   5494.0244
282                     Chile   4756.7638
283                     Chile   5095.6657
284                     Chile   5547.0638
285                     Chile   7596.1260
286                     Chile  10118.0532
287                     Chile  10778.7838
288                     Chile  13171.6388
289                     China    400.4486
290                     China    575.9870
291                     China    487.6740
292                     China    612.7057
293                     China    676.9001
294                     China    741.2375
295                     China    962.4214
296                     China   1378.9040
297                     China   1655.7842
298                     China   2289.2341
299                     China   3119.2809
300                     China   4959.1149
301                  Colombia   2144.1151
302                  Colombia   2323.8056
303                  Colombia   2492.3511
304                  Colombia   2678.7298
305                  Colombia   3264.6600
306                  Colombia   3815.8079
307                  Colombia   4397.5757
308                  Colombia   4903.2191
309                  Colombia   5444.6486
310                  Colombia   6117.3617
311                  Colombia   5755.2600
312                  Colombia   7006.5804
313                   Comoros   1102.9909
314                   Comoros   1211.1485
315                   Comoros   1406.6483
316                   Comoros   1876.0296
317                   Comoros   1937.5777
318                   Comoros   1172.6030
319                   Comoros   1267.1001
320                   Comoros   1315.9808
321                   Comoros   1246.9074
322                   Comoros   1173.6182
323                   Comoros   1075.8116
324                   Comoros    986.1479
325           Congo Dem. Rep.    780.5423
326           Congo Dem. Rep.    905.8602
327           Congo Dem. Rep.    896.3146
328           Congo Dem. Rep.    861.5932
329           Congo Dem. Rep.    904.8961
330           Congo Dem. Rep.    795.7573
331           Congo Dem. Rep.    673.7478
332           Congo Dem. Rep.    672.7748
333           Congo Dem. Rep.    457.7192
334           Congo Dem. Rep.    312.1884
335           Congo Dem. Rep.    241.1659
336           Congo Dem. Rep.    277.5519
337                Congo Rep.   2125.6214
338                Congo Rep.   2315.0566
339                Congo Rep.   2464.7832
340                Congo Rep.   2677.9396
341                Congo Rep.   3213.1527
342                Congo Rep.   3259.1790
343                Congo Rep.   4879.5075
344                Congo Rep.   4201.1949
345                Congo Rep.   4016.2395
346                Congo Rep.   3484.1644
347                Congo Rep.   3484.0620
348                Congo Rep.   3632.5578
349                Costa Rica   2627.0095
350                Costa Rica   2990.0108
351                Costa Rica   3460.9370
352                Costa Rica   4161.7278
353                Costa Rica   5118.1469
354                Costa Rica   5926.8770
355                Costa Rica   5262.7348
356                Costa Rica   5629.9153
357                Costa Rica   6160.4163
358                Costa Rica   6677.0453
359                Costa Rica   7723.4472
360                Costa Rica   9645.0614
361             Cote d'Ivoire   1388.5947
362             Cote d'Ivoire   1500.8959
363             Cote d'Ivoire   1728.8694
364             Cote d'Ivoire   2052.0505
365             Cote d'Ivoire   2378.2011
366             Cote d'Ivoire   2517.7365
367             Cote d'Ivoire   2602.7102
368             Cote d'Ivoire   2156.9561
369             Cote d'Ivoire   1648.0738
370             Cote d'Ivoire   1786.2654
371             Cote d'Ivoire   1648.8008
372             Cote d'Ivoire   1544.7501
373                   Croatia   3119.2365
374                   Croatia   4338.2316
375                   Croatia   5477.8900
376                   Croatia   6960.2979
377                   Croatia   9164.0901
378                   Croatia  11305.3852
379                   Croatia  13221.8218
380                   Croatia  13822.5839
381                   Croatia   8447.7949
382                   Croatia   9875.6045
383                   Croatia  11628.3890
384                   Croatia  14619.2227
385                      Cuba   5586.5388
386                      Cuba   6092.1744
387                      Cuba   5180.7559
388                      Cuba   5690.2680
389                      Cuba   5305.4453
390                      Cuba   6380.4950
391                      Cuba   7316.9181
392                      Cuba   7532.9248
393                      Cuba   5592.8440
394                      Cuba   5431.9904
395                      Cuba   6340.6467
396                      Cuba   8948.1029
397            Czech Republic   6876.1403
398            Czech Republic   8256.3439
399            Czech Republic  10136.8671
400            Czech Republic  11399.4449
401            Czech Republic  13108.4536
402            Czech Republic  14800.1606
403            Czech Republic  15377.2285
404            Czech Republic  16310.4434
405            Czech Republic  14297.0212
406            Czech Republic  16048.5142
407            Czech Republic  17596.2102
408            Czech Republic  22833.3085
409                   Denmark   9692.3852
410                   Denmark  11099.6593
411                   Denmark  13583.3135
412                   Denmark  15937.2112
413                   Denmark  18866.2072
414                   Denmark  20422.9015
415                   Denmark  21688.0405
416                   Denmark  25116.1758
417                   Denmark  26406.7399
418                   Denmark  29804.3457
419                   Denmark  32166.5001
420                   Denmark  35278.4187
421                  Djibouti   2669.5295
422                  Djibouti   2864.9691
423                  Djibouti   3020.9893
424                  Djibouti   3020.0505
425                  Djibouti   3694.2124
426                  Djibouti   3081.7610
427                  Djibouti   2879.4681
428                  Djibouti   2880.1026
429                  Djibouti   2377.1562
430                  Djibouti   1895.0170
431                  Djibouti   1908.2609
432                  Djibouti   2082.4816
433        Dominican Republic   1397.7171
434        Dominican Republic   1544.4030
435        Dominican Republic   1662.1374
436        Dominican Republic   1653.7230
437        Dominican Republic   2189.8745
438        Dominican Republic   2681.9889
439        Dominican Republic   2861.0924
440        Dominican Republic   2899.8422
441        Dominican Republic   3044.2142
442        Dominican Republic   3614.1013
443        Dominican Republic   4563.8082
444        Dominican Republic   6025.3748
445                   Ecuador   3522.1107
446                   Ecuador   3780.5467
447                   Ecuador   4086.1141
448                   Ecuador   4579.0742
449                   Ecuador   5280.9947
450                   Ecuador   6679.6233
451                   Ecuador   7213.7913
452                   Ecuador   6481.7770
453                   Ecuador   7103.7026
454                   Ecuador   7429.4559
455                   Ecuador   5773.0445
456                   Ecuador   6873.2623
457                     Egypt   1418.8224
458                     Egypt   1458.9153
459                     Egypt   1693.3359
460                     Egypt   1814.8807
461                     Egypt   2024.0081
462                     Egypt   2785.4936
463                     Egypt   3503.7296
464                     Egypt   3885.4607
465                     Egypt   3794.7552
466                     Egypt   4173.1818
467                     Egypt   4754.6044
468                     Egypt   5581.1810
469               El Salvador   3048.3029
470               El Salvador   3421.5232
471               El Salvador   3776.8036
472               El Salvador   4358.5954
473               El Salvador   4520.2460
474               El Salvador   5138.9224
475               El Salvador   4098.3442
476               El Salvador   4140.4421
477               El Salvador   4444.2317
478               El Salvador   5154.8255
479               El Salvador   5351.5687
480               El Salvador   5728.3535
481         Equatorial Guinea    375.6431
482         Equatorial Guinea    426.0964
483         Equatorial Guinea    582.8420
484         Equatorial Guinea    915.5960
485         Equatorial Guinea    672.4123
486         Equatorial Guinea    958.5668
487         Equatorial Guinea    927.8253
488         Equatorial Guinea    966.8968
489         Equatorial Guinea   1132.0550
490         Equatorial Guinea   2814.4808
491         Equatorial Guinea   7703.4959
492         Equatorial Guinea  12154.0897
493                   Eritrea    328.9406
494                   Eritrea    344.1619
495                   Eritrea    380.9958
496                   Eritrea    468.7950
497                   Eritrea    514.3242
498                   Eritrea    505.7538
499                   Eritrea    524.8758
500                   Eritrea    521.1341
501                   Eritrea    582.8585
502                   Eritrea    913.4708
503                   Eritrea    765.3500
504                   Eritrea    641.3695
505                  Ethiopia    362.1463
506                  Ethiopia    378.9042
507                  Ethiopia    419.4564
508                  Ethiopia    516.1186
509                  Ethiopia    566.2439
510                  Ethiopia    556.8084
511                  Ethiopia    577.8607
512                  Ethiopia    573.7413
513                  Ethiopia    421.3535
514                  Ethiopia    515.8894
515                  Ethiopia    530.0535
516                  Ethiopia    690.8056
517                   Finland   6424.5191
518                   Finland   7545.4154
519                   Finland   9371.8426
520                   Finland  10921.6363
521                   Finland  14358.8759
522                   Finland  15605.4228
523                   Finland  18533.1576
524                   Finland  21141.0122
525                   Finland  20647.1650
526                   Finland  23723.9502
527                   Finland  28204.5906
528                   Finland  33207.0844
529                    France   7029.8093
530                    France   8662.8349
531                    France  10560.4855
532                    France  12999.9177
533                    France  16107.1917
534                    France  18292.6351
535                    France  20293.8975
536                    France  22066.4421
537                    France  24703.7961
538                    France  25889.7849
539                    France  28926.0323
540                    France  30470.0167
541                     Gabon   4293.4765
542                     Gabon   4976.1981
543                     Gabon   6631.4592
544                     Gabon   8358.7620
545                     Gabon  11401.9484
546                     Gabon  21745.5733
547                     Gabon  15113.3619
548                     Gabon  11864.4084
549                     Gabon  13522.1575
550                     Gabon  14722.8419
551                     Gabon  12521.7139
552                     Gabon  13206.4845
553                    Gambia    485.2307
554                    Gambia    520.9267
555                    Gambia    599.6503
556                    Gambia    734.7829
557                    Gambia    756.0868
558                    Gambia    884.7553
559                    Gambia    835.8096
560                    Gambia    611.6589
561                    Gambia    665.6244
562                    Gambia    653.7302
563                    Gambia    660.5856
564                    Gambia    752.7497
565                   Germany   7144.1144
566                   Germany  10187.8267
567                   Germany  12902.4629
568                   Germany  14745.6256
569                   Germany  18016.1803
570                   Germany  20512.9212
571                   Germany  22031.5327
572                   Germany  24639.1857
573                   Germany  26505.3032
574                   Germany  27788.8842
575                   Germany  30035.8020
576                   Germany  32170.3744
577                     Ghana    911.2989
578                     Ghana   1043.5615
579                     Ghana   1190.0411
580                     Ghana   1125.6972
581                     Ghana   1178.2237
582                     Ghana    993.2240
583                     Ghana    876.0326
584                     Ghana    847.0061
585                     Ghana    925.0602
586                     Ghana   1005.2458
587                     Ghana   1111.9846
588                     Ghana   1327.6089
589                    Greece   3530.6901
590                    Greece   4916.2999
591                    Greece   6017.1907
592                    Greece   8513.0970
593                    Greece  12724.8296
594                    Greece  14195.5243
595                    Greece  15268.4209
596                    Greece  16120.5284
597                    Greece  17541.4963
598                    Greece  18747.6981
599                    Greece  22514.2548
600                    Greece  27538.4119
601                 Guatemala   2428.2378
602                 Guatemala   2617.1560
603                 Guatemala   2750.3644
604                 Guatemala   3242.5311
605                 Guatemala   4031.4083
606                 Guatemala   4879.9927
607                 Guatemala   4820.4948
608                 Guatemala   4246.4860
609                 Guatemala   4439.4508
610                 Guatemala   4684.3138
611                 Guatemala   4858.3475
612                 Guatemala   5186.0500
613                    Guinea    510.1965
614                    Guinea    576.2670
615                    Guinea    686.3737
616                    Guinea    708.7595
617                    Guinea    741.6662
618                    Guinea    874.6859
619                    Guinea    857.2504
620                    Guinea    805.5725
621                    Guinea    794.3484
622                    Guinea    869.4498
623                    Guinea    945.5836
624                    Guinea    942.6542
625             Guinea-Bissau    299.8503
626             Guinea-Bissau    431.7905
627             Guinea-Bissau    522.0344
628             Guinea-Bissau    715.5806
629             Guinea-Bissau    820.2246
630             Guinea-Bissau    764.7260
631             Guinea-Bissau    838.1240
632             Guinea-Bissau    736.4154
633             Guinea-Bissau    745.5399
634             Guinea-Bissau    796.6645
635             Guinea-Bissau    575.7047
636             Guinea-Bissau    579.2317
637                     Haiti   1840.3669
638                     Haiti   1726.8879
639                     Haiti   1796.5890
640                     Haiti   1452.0577
641                     Haiti   1654.4569
642                     Haiti   1874.2989
643                     Haiti   2011.1595
644                     Haiti   1823.0160
645                     Haiti   1456.3095
646                     Haiti   1341.7269
647                     Haiti   1270.3649
648                     Haiti   1201.6372
649                  Honduras   2194.9262
650                  Honduras   2220.4877
651                  Honduras   2291.1568
652                  Honduras   2538.2694
653                  Honduras   2529.8423
654                  Honduras   3203.2081
655                  Honduras   3121.7608
656                  Honduras   3023.0967
657                  Honduras   3081.6946
658                  Honduras   3160.4549
659                  Honduras   3099.7287
660                  Honduras   3548.3308
661           Hong Kong China   3054.4212
662           Hong Kong China   3629.0765
663           Hong Kong China   4692.6483
664           Hong Kong China   6197.9628
665           Hong Kong China   8315.9281
666           Hong Kong China  11186.1413
667           Hong Kong China  14560.5305
668           Hong Kong China  20038.4727
669           Hong Kong China  24757.6030
670           Hong Kong China  28377.6322
671           Hong Kong China  30209.0152
672           Hong Kong China  39724.9787
673                   Hungary   5263.6738
674                   Hungary   6040.1800
675                   Hungary   7550.3599
676                   Hungary   9326.6447
677                   Hungary  10168.6561
678                   Hungary  11674.8374
679                   Hungary  12545.9907
680                   Hungary  12986.4800
681                   Hungary  10535.6285
682                   Hungary  11712.7768
683                   Hungary  14843.9356
684                   Hungary  18008.9444
685                   Iceland   7267.6884
686                   Iceland   9244.0014
687                   Iceland  10350.1591
688                   Iceland  13319.8957
689                   Iceland  15798.0636
690                   Iceland  19654.9625
691                   Iceland  23269.6075
692                   Iceland  26923.2063
693                   Iceland  25144.3920
694                   Iceland  28061.0997
695                   Iceland  31163.2020
696                   Iceland  36180.7892
697                     India    546.5657
698                     India    590.0620
699                     India    658.3472
700                     India    700.7706
701                     India    724.0325
702                     India    813.3373
703                     India    855.7235
704                     India    976.5127
705                     India   1164.4068
706                     India   1458.8174
707                     India   1746.7695
708                     India   2452.2104
709                 Indonesia    749.6817
710                 Indonesia    858.9003
711                 Indonesia    849.2898
712                 Indonesia    762.4318
713                 Indonesia   1111.1079
714                 Indonesia   1382.7021
715                 Indonesia   1516.8730
716                 Indonesia   1748.3570
717                 Indonesia   2383.1409
718                 Indonesia   3119.3356
719                 Indonesia   2873.9129
720                 Indonesia   3540.6516
721                      Iran   3035.3260
722                      Iran   3290.2576
723                      Iran   4187.3298
724                      Iran   5906.7318
725                      Iran   9613.8186
726                      Iran  11888.5951
727                      Iran   7608.3346
728                      Iran   6642.8814
729                      Iran   7235.6532
730                      Iran   8263.5903
731                      Iran   9240.7620
732                      Iran  11605.7145
733                      Iraq   4129.7661
734                      Iraq   6229.3336
735                      Iraq   8341.7378
736                      Iraq   8931.4598
737                      Iraq   9576.0376
738                      Iraq  14688.2351
739                      Iraq  14517.9071
740                      Iraq  11643.5727
741                      Iraq   3745.6407
742                      Iraq   3076.2398
743                      Iraq   4390.7173
744                      Iraq   4471.0619
745                   Ireland   5210.2803
746                   Ireland   5599.0779
747                   Ireland   6631.5973
748                   Ireland   7655.5690
749                   Ireland   9530.7729
750                   Ireland  11150.9811
751                   Ireland  12618.3214
752                   Ireland  13872.8665
753                   Ireland  17558.8155
754                   Ireland  24521.9471
755                   Ireland  34077.0494
756                   Ireland  40675.9964
757                    Israel   4086.5221
758                    Israel   5385.2785
759                    Israel   7105.6307
760                    Israel   8393.7414
761                    Israel  12786.9322
762                    Israel  13306.6192
763                    Israel  15367.0292
764                    Israel  17122.4799
765                    Israel  18051.5225
766                    Israel  20896.6092
767                    Israel  21905.5951
768                    Israel  25523.2771
769                     Italy   4931.4042
770                     Italy   6248.6562
771                     Italy   8243.5823
772                     Italy  10022.4013
773                     Italy  12269.2738
774                     Italy  14255.9847
775                     Italy  16537.4835
776                     Italy  19207.2348
777                     Italy  22013.6449
778                     Italy  24675.0245
779                     Italy  27968.0982
780                     Italy  28569.7197
781                   Jamaica   2898.5309
782                   Jamaica   4756.5258
783                   Jamaica   5246.1075
784                   Jamaica   6124.7035
785                   Jamaica   7433.8893
786                   Jamaica   6650.1956
787                   Jamaica   6068.0513
788                   Jamaica   6351.2375
789                   Jamaica   7404.9237
790                   Jamaica   7121.9247
791                   Jamaica   6994.7749
792                   Jamaica   7320.8803
793                     Japan   3216.9563
794                     Japan   4317.6944
795                     Japan   6576.6495
796                     Japan   9847.7886
797                     Japan  14778.7864
798                     Japan  16610.3770
799                     Japan  19384.1057
800                     Japan  22375.9419
801                     Japan  26824.8951
802                     Japan  28816.5850
803                     Japan  28604.5919
804                     Japan  31656.0681
805                    Jordan   1546.9078
806                    Jordan   1886.0806
807                    Jordan   2348.0092
808                    Jordan   2741.7963
809                    Jordan   2110.8563
810                    Jordan   2852.3516
811                    Jordan   4161.4160
812                    Jordan   4448.6799
813                    Jordan   3431.5936
814                    Jordan   3645.3796
815                    Jordan   3844.9172
816                    Jordan   4519.4612
817                     Kenya    853.5409
818                     Kenya    944.4383
819                     Kenya    896.9664
820                     Kenya   1056.7365
821                     Kenya   1222.3600
822                     Kenya   1267.6132
823                     Kenya   1348.2258
824                     Kenya   1361.9369
825                     Kenya   1341.9217
826                     Kenya   1360.4850
827                     Kenya   1287.5147
828                     Kenya   1463.2493
829           Korea Dem. Rep.   1088.2778
830           Korea Dem. Rep.   1571.1347
831           Korea Dem. Rep.   1621.6936
832           Korea Dem. Rep.   2143.5406
833           Korea Dem. Rep.   3701.6215
834           Korea Dem. Rep.   4106.3012
835           Korea Dem. Rep.   4106.5253
836           Korea Dem. Rep.   4106.4923
837           Korea Dem. Rep.   3726.0635
838           Korea Dem. Rep.   1690.7568
839           Korea Dem. Rep.   1646.7582
840           Korea Dem. Rep.   1593.0655
841                Korea Rep.   1030.5922
842                Korea Rep.   1487.5935
843                Korea Rep.   1536.3444
844                Korea Rep.   2029.2281
845                Korea Rep.   3030.8767
846                Korea Rep.   4657.2210
847                Korea Rep.   5622.9425
848                Korea Rep.   8533.0888
849                Korea Rep.  12104.2787
850                Korea Rep.  15993.5280
851                Korea Rep.  19233.9882
852                Korea Rep.  23348.1397
853                    Kuwait 108382.3529
854                    Kuwait 113523.1329
855                    Kuwait  95458.1118
856                    Kuwait  80894.8833
857                    Kuwait 109347.8670
858                    Kuwait  59265.4771
859                    Kuwait  31354.0357
860                    Kuwait  28118.4300
861                    Kuwait  34932.9196
862                    Kuwait  40300.6200
863                    Kuwait  35110.1057
864                    Kuwait  47306.9898
865                   Lebanon   4834.8041
866                   Lebanon   6089.7869
867                   Lebanon   5714.5606
868                   Lebanon   6006.9830
869                   Lebanon   7486.3843
870                   Lebanon   8659.6968
871                   Lebanon   7640.5195
872                   Lebanon   5377.0913
873                   Lebanon   6890.8069
874                   Lebanon   8754.9639
875                   Lebanon   9313.9388
876                   Lebanon  10461.0587
877                   Lesotho    298.8462
878                   Lesotho    335.9971
879                   Lesotho    411.8006
880                   Lesotho    498.6390
881                   Lesotho    496.5816
882                   Lesotho    745.3695
883                   Lesotho    797.2631
884                   Lesotho    773.9932
885                   Lesotho    977.4863
886                   Lesotho   1186.1480
887                   Lesotho   1275.1846
888                   Lesotho   1569.3314
889                   Liberia    575.5730
890                   Liberia    620.9700
891                   Liberia    634.1952
892                   Liberia    713.6036
893                   Liberia    803.0055
894                   Liberia    640.3224
895                   Liberia    572.1996
896                   Liberia    506.1139
897                   Liberia    636.6229
898                   Liberia    609.1740
899                   Liberia    531.4824
900                   Liberia    414.5073
901                     Libya   2387.5481
902                     Libya   3448.2844
903                     Libya   6757.0308
904                     Libya  18772.7517
905                     Libya  21011.4972
906                     Libya  21951.2118
907                     Libya  17364.2754
908                     Libya  11770.5898
909                     Libya   9640.1385
910                     Libya   9467.4461
911                     Libya   9534.6775
912                     Libya  12057.4993
913                Madagascar   1443.0117
914                Madagascar   1589.2027
915                Madagascar   1643.3871
916                Madagascar   1634.0473
917                Madagascar   1748.5630
918                Madagascar   1544.2286
919                Madagascar   1302.8787
920                Madagascar   1155.4419
921                Madagascar   1040.6762
922                Madagascar    986.2959
923                Madagascar    894.6371
924                Madagascar   1044.7701
925                    Malawi    369.1651
926                    Malawi    416.3698
927                    Malawi    427.9011
928                    Malawi    495.5148
929                    Malawi    584.6220
930                    Malawi    663.2237
931                    Malawi    632.8039
932                    Malawi    635.5174
933                    Malawi    563.2000
934                    Malawi    692.2758
935                    Malawi    665.4231
936                    Malawi    759.3499
937                  Malaysia   1831.1329
938                  Malaysia   1810.0670
939                  Malaysia   2036.8849
940                  Malaysia   2277.7424
941                  Malaysia   2849.0948
942                  Malaysia   3827.9216
943                  Malaysia   4920.3560
944                  Malaysia   5249.8027
945                  Malaysia   7277.9128
946                  Malaysia  10132.9096
947                  Malaysia  10206.9779
948                  Malaysia  12451.6558
949                      Mali    452.3370
950                      Mali    490.3822
951                      Mali    496.1743
952                      Mali    545.0099
953                      Mali    581.3689
954                      Mali    686.3953
955                      Mali    618.0141
956                      Mali    684.1716
957                      Mali    739.0144
958                      Mali    790.2580
959                      Mali    951.4098
960                      Mali   1042.5816
961                Mauritania    743.1159
962                Mauritania    846.1203
963                Mauritania   1055.8960
964                Mauritania   1421.1452
965                Mauritania   1586.8518
966                Mauritania   1497.4922
967                Mauritania   1481.1502
968                Mauritania   1421.6036
969                Mauritania   1361.3698
970                Mauritania   1483.1361
971                Mauritania   1579.0195
972                Mauritania   1803.1515
973                 Mauritius   1967.9557
974                 Mauritius   2034.0380
975                 Mauritius   2529.0675
976                 Mauritius   2475.3876
977                 Mauritius   2575.4842
978                 Mauritius   3710.9830
979                 Mauritius   3688.0377
980                 Mauritius   4783.5869
981                 Mauritius   6058.2538
982                 Mauritius   7425.7053
983                 Mauritius   9021.8159
984                 Mauritius  10956.9911
985                    Mexico   3478.1255
986                    Mexico   4131.5466
987                    Mexico   4581.6094
988                    Mexico   5754.7339
989                    Mexico   6809.4067
990                    Mexico   7674.9291
991                    Mexico   9611.1475
992                    Mexico   8688.1560
993                    Mexico   9472.3843
994                    Mexico   9767.2975
995                    Mexico  10742.4405
996                    Mexico  11977.5750
997                  Mongolia    786.5669
998                  Mongolia    912.6626
999                  Mongolia   1056.3540
1000                 Mongolia   1226.0411
1001                 Mongolia   1421.7420
1002                 Mongolia   1647.5117
1003                 Mongolia   2000.6031
1004                 Mongolia   2338.0083
1005                 Mongolia   1785.4020
1006                 Mongolia   1902.2521
1007                 Mongolia   2140.7393
1008                 Mongolia   3095.7723
1009               Montenegro   2647.5856
1010               Montenegro   3682.2599
1011               Montenegro   4649.5938
1012               Montenegro   5907.8509
1013               Montenegro   7778.4140
1014               Montenegro   9595.9299
1015               Montenegro  11222.5876
1016               Montenegro  11732.5102
1017               Montenegro   7003.3390
1018               Montenegro   6465.6133
1019               Montenegro   6557.1943
1020               Montenegro   9253.8961
1021                  Morocco   1688.2036
1022                  Morocco   1642.0023
1023                  Morocco   1566.3535
1024                  Morocco   1711.0448
1025                  Morocco   1930.1950
1026                  Morocco   2370.6200
1027                  Morocco   2702.6204
1028                  Morocco   2755.0470
1029                  Morocco   2948.0473
1030                  Morocco   2982.1019
1031                  Morocco   3258.4956
1032                  Morocco   3820.1752
1033               Mozambique    468.5260
1034               Mozambique    495.5868
1035               Mozambique    556.6864
1036               Mozambique    566.6692
1037               Mozambique    724.9178
1038               Mozambique    502.3197
1039               Mozambique    462.2114
1040               Mozambique    389.8762
1041               Mozambique    410.8968
1042               Mozambique    472.3461
1043               Mozambique    633.6179
1044               Mozambique    823.6856
1045                  Myanmar    331.0000
1046                  Myanmar    350.0000
1047                  Myanmar    388.0000
1048                  Myanmar    349.0000
1049                  Myanmar    357.0000
1050                  Myanmar    371.0000
1051                  Myanmar    424.0000
1052                  Myanmar    385.0000
1053                  Myanmar    347.0000
1054                  Myanmar    415.0000
1055                  Myanmar    611.0000
1056                  Myanmar    944.0000
1057                  Namibia   2423.7804
1058                  Namibia   2621.4481
1059                  Namibia   3173.2156
1060                  Namibia   3793.6948
1061                  Namibia   3746.0809
1062                  Namibia   3876.4860
1063                  Namibia   4191.1005
1064                  Namibia   3693.7313
1065                  Namibia   3804.5380
1066                  Namibia   3899.5243
1067                  Namibia   4072.3248
1068                  Namibia   4811.0604
1069                    Nepal    545.8657
1070                    Nepal    597.9364
1071                    Nepal    652.3969
1072                    Nepal    676.4422
1073                    Nepal    674.7881
1074                    Nepal    694.1124
1075                    Nepal    718.3731
1076                    Nepal    775.6325
1077                    Nepal    897.7404
1078                    Nepal   1010.8921
1079                    Nepal   1057.2063
1080                    Nepal   1091.3598
1081              Netherlands   8941.5719
1082              Netherlands  11276.1934
1083              Netherlands  12790.8496
1084              Netherlands  15363.2514
1085              Netherlands  18794.7457
1086              Netherlands  21209.0592
1087              Netherlands  21399.4605
1088              Netherlands  23651.3236
1089              Netherlands  26790.9496
1090              Netherlands  30246.1306
1091              Netherlands  33724.7578
1092              Netherlands  36797.9333
1093              New Zealand  10556.5757
1094              New Zealand  12247.3953
1095              New Zealand  13175.6780
1096              New Zealand  14463.9189
1097              New Zealand  16046.0373
1098              New Zealand  16233.7177
1099              New Zealand  17632.4104
1100              New Zealand  19007.1913
1101              New Zealand  18363.3249
1102              New Zealand  21050.4138
1103              New Zealand  23189.8014
1104              New Zealand  25185.0091
1105                Nicaragua   3112.3639
1106                Nicaragua   3457.4159
1107                Nicaragua   3634.3644
1108                Nicaragua   4643.3935
1109                Nicaragua   4688.5933
1110                Nicaragua   5486.3711
1111                Nicaragua   3470.3382
1112                Nicaragua   2955.9844
1113                Nicaragua   2170.1517
1114                Nicaragua   2253.0230
1115                Nicaragua   2474.5488
1116                Nicaragua   2749.3210
1117                    Niger    761.8794
1118                    Niger    835.5234
1119                    Niger    997.7661
1120                    Niger   1054.3849
1121                    Niger    954.2092
1122                    Niger    808.8971
1123                    Niger    909.7221
1124                    Niger    668.3000
1125                    Niger    581.1827
1126                    Niger    580.3052
1127                    Niger    601.0745
1128                    Niger    619.6769
1129                  Nigeria   1077.2819
1130                  Nigeria   1100.5926
1131                  Nigeria   1150.9275
1132                  Nigeria   1014.5141
1133                  Nigeria   1698.3888
1134                  Nigeria   1981.9518
1135                  Nigeria   1576.9738
1136                  Nigeria   1385.0296
1137                  Nigeria   1619.8482
1138                  Nigeria   1624.9413
1139                  Nigeria   1615.2864
1140                  Nigeria   2013.9773
1141                   Norway  10095.4217
1142                   Norway  11653.9730
1143                   Norway  13450.4015
1144                   Norway  16361.8765
1145                   Norway  18965.0555
1146                   Norway  23311.3494
1147                   Norway  26298.6353
1148                   Norway  31540.9748
1149                   Norway  33965.6611
1150                   Norway  41283.1643
1151                   Norway  44683.9753
1152                   Norway  49357.1902
1153                     Oman   1828.2303
1154                     Oman   2242.7466
1155                     Oman   2924.6381
1156                     Oman   4720.9427
1157                     Oman  10618.0385
1158                     Oman  11848.3439
1159                     Oman  12954.7910
1160                     Oman  18115.2231
1161                     Oman  18616.7069
1162                     Oman  19702.0558
1163                     Oman  19774.8369
1164                     Oman  22316.1929
1165                 Pakistan    684.5971
1166                 Pakistan    747.0835
1167                 Pakistan    803.3427
1168                 Pakistan    942.4083
1169                 Pakistan   1049.9390
1170                 Pakistan   1175.9212
1171                 Pakistan   1443.4298
1172                 Pakistan   1704.6866
1173                 Pakistan   1971.8295
1174                 Pakistan   2049.3505
1175                 Pakistan   2092.7124
1176                 Pakistan   2605.9476
1177                   Panama   2480.3803
1178                   Panama   2961.8009
1179                   Panama   3536.5403
1180                   Panama   4421.0091
1181                   Panama   5364.2497
1182                   Panama   5351.9121
1183                   Panama   7009.6016
1184                   Panama   7034.7792
1185                   Panama   6618.7431
1186                   Panama   7113.6923
1187                   Panama   7356.0319
1188                   Panama   9809.1856
1189                 Paraguay   1952.3087
1190                 Paraguay   2046.1547
1191                 Paraguay   2148.0271
1192                 Paraguay   2299.3763
1193                 Paraguay   2523.3380
1194                 Paraguay   3248.3733
1195                 Paraguay   4258.5036
1196                 Paraguay   3998.8757
1197                 Paraguay   4196.4111
1198                 Paraguay   4247.4003
1199                 Paraguay   3783.6742
1200                 Paraguay   4172.8385
1201                     Peru   3758.5234
1202                     Peru   4245.2567
1203                     Peru   4957.0380
1204                     Peru   5788.0933
1205                     Peru   5937.8273
1206                     Peru   6281.2909
1207                     Peru   6434.5018
1208                     Peru   6360.9434
1209                     Peru   4446.3809
1210                     Peru   5838.3477
1211                     Peru   5909.0201
1212                     Peru   7408.9056
1213              Philippines   1272.8810
1214              Philippines   1547.9448
1215              Philippines   1649.5522
1216              Philippines   1814.1274
1217              Philippines   1989.3741
1218              Philippines   2373.2043
1219              Philippines   2603.2738
1220              Philippines   2189.6350
1221              Philippines   2279.3240
1222              Philippines   2536.5349
1223              Philippines   2650.9211
1224              Philippines   3190.4810
1225                   Poland   4029.3297
1226                   Poland   4734.2530
1227                   Poland   5338.7521
1228                   Poland   6557.1528
1229                   Poland   8006.5070
1230                   Poland   9508.1415
1231                   Poland   8451.5310
1232                   Poland   9082.3512
1233                   Poland   7738.8812
1234                   Poland  10159.5837
1235                   Poland  12002.2391
1236                   Poland  15389.9247
1237                 Portugal   3068.3199
1238                 Portugal   3774.5717
1239                 Portugal   4727.9549
1240                 Portugal   6361.5180
1241                 Portugal   9022.2474
1242                 Portugal  10172.4857
1243                 Portugal  11753.8429
1244                 Portugal  13039.3088
1245                 Portugal  16207.2666
1246                 Portugal  17641.0316
1247                 Portugal  19970.9079
1248                 Portugal  20509.6478
1249              Puerto Rico   3081.9598
1250              Puerto Rico   3907.1562
1251              Puerto Rico   5108.3446
1252              Puerto Rico   6929.2777
1253              Puerto Rico   9123.0417
1254              Puerto Rico   9770.5249
1255              Puerto Rico  10330.9891
1256              Puerto Rico  12281.3419
1257              Puerto Rico  14641.5871
1258              Puerto Rico  16999.4333
1259              Puerto Rico  18855.6062
1260              Puerto Rico  19328.7090
1261                  Reunion   2718.8853
1262                  Reunion   2769.4518
1263                  Reunion   3173.7233
1264                  Reunion   4021.1757
1265                  Reunion   5047.6586
1266                  Reunion   4319.8041
1267                  Reunion   5267.2194
1268                  Reunion   5303.3775
1269                  Reunion   6101.2558
1270                  Reunion   6071.9414
1271                  Reunion   6316.1652
1272                  Reunion   7670.1226
1273                  Romania   3144.6132
1274                  Romania   3943.3702
1275                  Romania   4734.9976
1276                  Romania   6470.8665
1277                  Romania   8011.4144
1278                  Romania   9356.3972
1279                  Romania   9605.3141
1280                  Romania   9696.2733
1281                  Romania   6598.4099
1282                  Romania   7346.5476
1283                  Romania   7885.3601
1284                  Romania  10808.4756
1285                   Rwanda    493.3239
1286                   Rwanda    540.2894
1287                   Rwanda    597.4731
1288                   Rwanda    510.9637
1289                   Rwanda    590.5807
1290                   Rwanda    670.0806
1291                   Rwanda    881.5706
1292                   Rwanda    847.9912
1293                   Rwanda    737.0686
1294                   Rwanda    589.9445
1295                   Rwanda    785.6538
1296                   Rwanda    863.0885
1297    Sao Tome and Principe    879.5836
1298    Sao Tome and Principe    860.7369
1299    Sao Tome and Principe   1071.5511
1300    Sao Tome and Principe   1384.8406
1301    Sao Tome and Principe   1532.9853
1302    Sao Tome and Principe   1737.5617
1303    Sao Tome and Principe   1890.2181
1304    Sao Tome and Principe   1516.5255
1305    Sao Tome and Principe   1428.7778
1306    Sao Tome and Principe   1339.0760
1307    Sao Tome and Principe   1353.0924
1308    Sao Tome and Principe   1598.4351
1309             Saudi Arabia   6459.5548
1310             Saudi Arabia   8157.5912
1311             Saudi Arabia  11626.4197
1312             Saudi Arabia  16903.0489
1313             Saudi Arabia  24837.4287
1314             Saudi Arabia  34167.7626
1315             Saudi Arabia  33693.1753
1316             Saudi Arabia  21198.2614
1317             Saudi Arabia  24841.6178
1318             Saudi Arabia  20586.6902
1319             Saudi Arabia  19014.5412
1320             Saudi Arabia  21654.8319
1321                  Senegal   1450.3570
1322                  Senegal   1567.6530
1323                  Senegal   1654.9887
1324                  Senegal   1612.4046
1325                  Senegal   1597.7121
1326                  Senegal   1561.7691
1327                  Senegal   1518.4800
1328                  Senegal   1441.7207
1329                  Senegal   1367.8994
1330                  Senegal   1392.3683
1331                  Senegal   1519.6353
1332                  Senegal   1712.4721
1333                   Serbia   3581.4594
1334                   Serbia   4981.0909
1335                   Serbia   6289.6292
1336                   Serbia   7991.7071
1337                   Serbia  10522.0675
1338                   Serbia  12980.6696
1339                   Serbia  15181.0927
1340                   Serbia  15870.8785
1341                   Serbia   9325.0682
1342                   Serbia   7914.3203
1343                   Serbia   7236.0753
1344                   Serbia   9786.5347
1345             Sierra Leone    879.7877
1346             Sierra Leone   1004.4844
1347             Sierra Leone   1116.6399
1348             Sierra Leone   1206.0435
1349             Sierra Leone   1353.7598
1350             Sierra Leone   1348.2852
1351             Sierra Leone   1465.0108
1352             Sierra Leone   1294.4478
1353             Sierra Leone   1068.6963
1354             Sierra Leone    574.6482
1355             Sierra Leone    699.4897
1356             Sierra Leone    862.5408
1357                Singapore   2315.1382
1358                Singapore   2843.1044
1359                Singapore   3674.7356
1360                Singapore   4977.4185
1361                Singapore   8597.7562
1362                Singapore  11210.0895
1363                Singapore  15169.1611
1364                Singapore  18861.5308
1365                Singapore  24769.8912
1366                Singapore  33519.4766
1367                Singapore  36023.1054
1368                Singapore  47143.1796
1369          Slovak Republic   5074.6591
1370          Slovak Republic   6093.2630
1371          Slovak Republic   7481.1076
1372          Slovak Republic   8412.9024
1373          Slovak Republic   9674.1676
1374          Slovak Republic  10922.6640
1375          Slovak Republic  11348.5459
1376          Slovak Republic  12037.2676
1377          Slovak Republic   9498.4677
1378          Slovak Republic  12126.2306
1379          Slovak Republic  13638.7784
1380          Slovak Republic  18678.3144
1381                 Slovenia   4215.0417
1382                 Slovenia   5862.2766
1383                 Slovenia   7402.3034
1384                 Slovenia   9405.4894
1385                 Slovenia  12383.4862
1386                 Slovenia  15277.0302
1387                 Slovenia  17866.7218
1388                 Slovenia  18678.5349
1389                 Slovenia  14214.7168
1390                 Slovenia  17161.1073
1391                 Slovenia  20660.0194
1392                 Slovenia  25768.2576
1393                  Somalia   1135.7498
1394                  Somalia   1258.1474
1395                  Somalia   1369.4883
1396                  Somalia   1284.7332
1397                  Somalia   1254.5761
1398                  Somalia   1450.9925
1399                  Somalia   1176.8070
1400                  Somalia   1093.2450
1401                  Somalia    926.9603
1402                  Somalia    930.5964
1403                  Somalia    882.0818
1404                  Somalia    926.1411
1405             South Africa   4725.2955
1406             South Africa   5487.1042
1407             South Africa   5768.7297
1408             South Africa   7114.4780
1409             South Africa   7765.9626
1410             South Africa   8028.6514
1411             South Africa   8568.2662
1412             South Africa   7825.8234
1413             South Africa   7225.0693
1414             South Africa   7479.1882
1415             South Africa   7710.9464
1416             South Africa   9269.6578
1417                    Spain   3834.0347
1418                    Spain   4564.8024
1419                    Spain   5693.8439
1420                    Spain   7993.5123
1421                    Spain  10638.7513
1422                    Spain  13236.9212
1423                    Spain  13926.1700
1424                    Spain  15764.9831
1425                    Spain  18603.0645
1426                    Spain  20445.2990
1427                    Spain  24835.4717
1428                    Spain  28821.0637
1429                Sri Lanka   1083.5320
1430                Sri Lanka   1072.5466
1431                Sri Lanka   1074.4720
1432                Sri Lanka   1135.5143
1433                Sri Lanka   1213.3955
1434                Sri Lanka   1348.7757
1435                Sri Lanka   1648.0798
1436                Sri Lanka   1876.7668
1437                Sri Lanka   2153.7392
1438                Sri Lanka   2664.4773
1439                Sri Lanka   3015.3788
1440                Sri Lanka   3970.0954
1441                    Sudan   1615.9911
1442                    Sudan   1770.3371
1443                    Sudan   1959.5938
1444                    Sudan   1687.9976
1445                    Sudan   1659.6528
1446                    Sudan   2202.9884
1447                    Sudan   1895.5441
1448                    Sudan   1507.8192
1449                    Sudan   1492.1970
1450                    Sudan   1632.2108
1451                    Sudan   1993.3983
1452                    Sudan   2602.3950
1453                Swaziland   1148.3766
1454                Swaziland   1244.7084
1455                Swaziland   1856.1821
1456                Swaziland   2613.1017
1457                Swaziland   3364.8366
1458                Swaziland   3781.4106
1459                Swaziland   3895.3840
1460                Swaziland   3984.8398
1461                Swaziland   3553.0224
1462                Swaziland   3876.7685
1463                Swaziland   4128.1169
1464                Swaziland   4513.4806
1465                   Sweden   8527.8447
1466                   Sweden   9911.8782
1467                   Sweden  12329.4419
1468                   Sweden  15258.2970
1469                   Sweden  17832.0246
1470                   Sweden  18855.7252
1471                   Sweden  20667.3812
1472                   Sweden  23586.9293
1473                   Sweden  23880.0168
1474                   Sweden  25266.5950
1475                   Sweden  29341.6309
1476                   Sweden  33859.7484
1477              Switzerland  14734.2327
1478              Switzerland  17909.4897
1479              Switzerland  20431.0927
1480              Switzerland  22966.1443
1481              Switzerland  27195.1130
1482              Switzerland  26982.2905
1483              Switzerland  28397.7151
1484              Switzerland  30281.7046
1485              Switzerland  31871.5303
1486              Switzerland  32135.3230
1487              Switzerland  34480.9577
1488              Switzerland  37506.4191
1489                    Syria   1643.4854
1490                    Syria   2117.2349
1491                    Syria   2193.0371
1492                    Syria   1881.9236
1493                    Syria   2571.4230
1494                    Syria   3195.4846
1495                    Syria   3761.8377
1496                    Syria   3116.7743
1497                    Syria   3340.5428
1498                    Syria   4014.2390
1499                    Syria   4090.9253
1500                    Syria   4184.5481
1501                   Taiwan   1206.9479
1502                   Taiwan   1507.8613
1503                   Taiwan   1822.8790
1504                   Taiwan   2643.8587
1505                   Taiwan   4062.5239
1506                   Taiwan   5596.5198
1507                   Taiwan   7426.3548
1508                   Taiwan  11054.5618
1509                   Taiwan  15215.6579
1510                   Taiwan  20206.8210
1511                   Taiwan  23235.4233
1512                   Taiwan  28718.2768
1513                 Tanzania    716.6501
1514                 Tanzania    698.5356
1515                 Tanzania    722.0038
1516                 Tanzania    848.2187
1517                 Tanzania    915.9851
1518                 Tanzania    962.4923
1519                 Tanzania    874.2426
1520                 Tanzania    831.8221
1521                 Tanzania    825.6825
1522                 Tanzania    789.1862
1523                 Tanzania    899.0742
1524                 Tanzania   1107.4822
1525                 Thailand    757.7974
1526                 Thailand    793.5774
1527                 Thailand   1002.1992
1528                 Thailand   1295.4607
1529                 Thailand   1524.3589
1530                 Thailand   1961.2246
1531                 Thailand   2393.2198
1532                 Thailand   2982.6538
1533                 Thailand   4616.8965
1534                 Thailand   5852.6255
1535                 Thailand   5913.1875
1536                 Thailand   7458.3963
1537                     Togo    859.8087
1538                     Togo    925.9083
1539                     Togo   1067.5348
1540                     Togo   1477.5968
1541                     Togo   1649.6602
1542                     Togo   1532.7770
1543                     Togo   1344.5780
1544                     Togo   1202.2014
1545                     Togo   1034.2989
1546                     Togo    982.2869
1547                     Togo    886.2206
1548                     Togo    882.9699
1549      Trinidad and Tobago   3023.2719
1550      Trinidad and Tobago   4100.3934
1551      Trinidad and Tobago   4997.5240
1552      Trinidad and Tobago   5621.3685
1553      Trinidad and Tobago   6619.5514
1554      Trinidad and Tobago   7899.5542
1555      Trinidad and Tobago   9119.5286
1556      Trinidad and Tobago   7388.5978
1557      Trinidad and Tobago   7370.9909
1558      Trinidad and Tobago   8792.5731
1559      Trinidad and Tobago  11460.6002
1560      Trinidad and Tobago  18008.5092
1561                  Tunisia   1468.4756
1562                  Tunisia   1395.2325
1563                  Tunisia   1660.3032
1564                  Tunisia   1932.3602
1565                  Tunisia   2753.2860
1566                  Tunisia   3120.8768
1567                  Tunisia   3560.2332
1568                  Tunisia   3810.4193
1569                  Tunisia   4332.7202
1570                  Tunisia   4876.7986
1571                  Tunisia   5722.8957
1572                  Tunisia   7092.9230
1573                   Turkey   1969.1010
1574                   Turkey   2218.7543
1575                   Turkey   2322.8699
1576                   Turkey   2826.3564
1577                   Turkey   3450.6964
1578                   Turkey   4269.1223
1579                   Turkey   4241.3563
1580                   Turkey   5089.0437
1581                   Turkey   5678.3483
1582                   Turkey   6601.4299
1583                   Turkey   6508.0857
1584                   Turkey   8458.2764
1585                   Uganda    734.7535
1586                   Uganda    774.3711
1587                   Uganda    767.2717
1588                   Uganda    908.9185
1589                   Uganda    950.7359
1590                   Uganda    843.7331
1591                   Uganda    682.2662
1592                   Uganda    617.7244
1593                   Uganda    644.1708
1594                   Uganda    816.5591
1595                   Uganda    927.7210
1596                   Uganda   1056.3801
1597           United Kingdom   9979.5085
1598           United Kingdom  11283.1779
1599           United Kingdom  12477.1771
1600           United Kingdom  14142.8509
1601           United Kingdom  15895.1164
1602           United Kingdom  17428.7485
1603           United Kingdom  18232.4245
1604           United Kingdom  21664.7877
1605           United Kingdom  22705.0925
1606           United Kingdom  26074.5314
1607           United Kingdom  29478.9992
1608           United Kingdom  33203.2613
1609            United States  13990.4821
1610            United States  14847.1271
1611            United States  16173.1459
1612            United States  19530.3656
1613            United States  21806.0359
1614            United States  24072.6321
1615            United States  25009.5591
1616            United States  29884.3504
1617            United States  32003.9322
1618            United States  35767.4330
1619            United States  39097.0995
1620            United States  42951.6531
1621                  Uruguay   5716.7667
1622                  Uruguay   6150.7730
1623                  Uruguay   5603.3577
1624                  Uruguay   5444.6196
1625                  Uruguay   5703.4089
1626                  Uruguay   6504.3397
1627                  Uruguay   6920.2231
1628                  Uruguay   7452.3990
1629                  Uruguay   8137.0048
1630                  Uruguay   9230.2407
1631                  Uruguay   7727.0020
1632                  Uruguay  10611.4630
1633                Venezuela   7689.7998
1634                Venezuela   9802.4665
1635                Venezuela   8422.9742
1636                Venezuela   9541.4742
1637                Venezuela  10505.2597
1638                Venezuela  13143.9510
1639                Venezuela  11152.4101
1640                Venezuela   9883.5846
1641                Venezuela  10733.9263
1642                Venezuela  10165.4952
1643                Venezuela   8605.0478
1644                Venezuela  11415.8057
1645                  Vietnam    605.0665
1646                  Vietnam    676.2854
1647                  Vietnam    772.0492
1648                  Vietnam    637.1233
1649                  Vietnam    699.5016
1650                  Vietnam    713.5371
1651                  Vietnam    707.2358
1652                  Vietnam    820.7994
1653                  Vietnam    989.0231
1654                  Vietnam   1385.8968
1655                  Vietnam   1764.4567
1656                  Vietnam   2441.5764
1657       West Bank and Gaza   1515.5923
1658       West Bank and Gaza   1827.0677
1659       West Bank and Gaza   2198.9563
1660       West Bank and Gaza   2649.7150
1661       West Bank and Gaza   3133.4093
1662       West Bank and Gaza   3682.8315
1663       West Bank and Gaza   4336.0321
1664       West Bank and Gaza   5107.1974
1665       West Bank and Gaza   6017.6548
1666       West Bank and Gaza   7110.6676
1667       West Bank and Gaza   4515.4876
1668       West Bank and Gaza   3025.3498
1669               Yemen Rep.    781.7176
1670               Yemen Rep.    804.8305
1671               Yemen Rep.    825.6232
1672               Yemen Rep.    862.4421
1673               Yemen Rep.   1265.0470
1674               Yemen Rep.   1829.7652
1675               Yemen Rep.   1977.5570
1676               Yemen Rep.   1971.7415
1677               Yemen Rep.   1879.4967
1678               Yemen Rep.   2117.4845
1679               Yemen Rep.   2234.8208
1680               Yemen Rep.   2280.7699
1681                   Zambia   1147.3888
1682                   Zambia   1311.9568
1683                   Zambia   1452.7258
1684                   Zambia   1777.0773
1685                   Zambia   1773.4983
1686                   Zambia   1588.6883
1687                   Zambia   1408.6786
1688                   Zambia   1213.3151
1689                   Zambia   1210.8846
1690                   Zambia   1071.3538
1691                   Zambia   1071.6139
1692                   Zambia   1271.2116
1693                 Zimbabwe    406.8841
1694                 Zimbabwe    518.7643
1695                 Zimbabwe    527.2722
1696                 Zimbabwe    569.7951
1697                 Zimbabwe    799.3622
1698                 Zimbabwe    685.5877
1699                 Zimbabwe    788.8550
1700                 Zimbabwe    706.1573
1701                 Zimbabwe    693.4208
1702                 Zimbabwe    792.4500
1703                 Zimbabwe    672.0386
1704                 Zimbabwe    469.7093</code></pre>
</div>
</div>
<p>You can also specify columns to remove using negative selection, <code>select(-varname)</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>continent) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                      country year        pop  lifeExp   gdpPercap
1                 Afghanistan 1952    8425333 28.80100    779.4453
2                 Afghanistan 1957    9240934 30.33200    820.8530
3                 Afghanistan 1962   10267083 31.99700    853.1007
4                 Afghanistan 1967   11537966 34.02000    836.1971
5                 Afghanistan 1972   13079460 36.08800    739.9811
6                 Afghanistan 1977   14880372 38.43800    786.1134
7                 Afghanistan 1982   12881816 39.85400    978.0114
8                 Afghanistan 1987   13867957 40.82200    852.3959
9                 Afghanistan 1992   16317921 41.67400    649.3414
10                Afghanistan 1997   22227415 41.76300    635.3414
11                Afghanistan 2002   25268405 42.12900    726.7341
12                Afghanistan 2007   31889923 43.82800    974.5803
13                    Albania 1952    1282697 55.23000   1601.0561
14                    Albania 1957    1476505 59.28000   1942.2842
15                    Albania 1962    1728137 64.82000   2312.8890
16                    Albania 1967    1984060 66.22000   2760.1969
17                    Albania 1972    2263554 67.69000   3313.4222
18                    Albania 1977    2509048 68.93000   3533.0039
19                    Albania 1982    2780097 70.42000   3630.8807
20                    Albania 1987    3075321 72.00000   3738.9327
21                    Albania 1992    3326498 71.58100   2497.4379
22                    Albania 1997    3428038 72.95000   3193.0546
23                    Albania 2002    3508512 75.65100   4604.2117
24                    Albania 2007    3600523 76.42300   5937.0295
25                    Algeria 1952    9279525 43.07700   2449.0082
26                    Algeria 1957   10270856 45.68500   3013.9760
27                    Algeria 1962   11000948 48.30300   2550.8169
28                    Algeria 1967   12760499 51.40700   3246.9918
29                    Algeria 1972   14760787 54.51800   4182.6638
30                    Algeria 1977   17152804 58.01400   4910.4168
31                    Algeria 1982   20033753 61.36800   5745.1602
32                    Algeria 1987   23254956 65.79900   5681.3585
33                    Algeria 1992   26298373 67.74400   5023.2166
34                    Algeria 1997   29072015 69.15200   4797.2951
35                    Algeria 2002   31287142 70.99400   5288.0404
36                    Algeria 2007   33333216 72.30100   6223.3675
37                     Angola 1952    4232095 30.01500   3520.6103
38                     Angola 1957    4561361 31.99900   3827.9405
39                     Angola 1962    4826015 34.00000   4269.2767
40                     Angola 1967    5247469 35.98500   5522.7764
41                     Angola 1972    5894858 37.92800   5473.2880
42                     Angola 1977    6162675 39.48300   3008.6474
43                     Angola 1982    7016384 39.94200   2756.9537
44                     Angola 1987    7874230 39.90600   2430.2083
45                     Angola 1992    8735988 40.64700   2627.8457
46                     Angola 1997    9875024 40.96300   2277.1409
47                     Angola 2002   10866106 41.00300   2773.2873
48                     Angola 2007   12420476 42.73100   4797.2313
49                  Argentina 1952   17876956 62.48500   5911.3151
50                  Argentina 1957   19610538 64.39900   6856.8562
51                  Argentina 1962   21283783 65.14200   7133.1660
52                  Argentina 1967   22934225 65.63400   8052.9530
53                  Argentina 1972   24779799 67.06500   9443.0385
54                  Argentina 1977   26983828 68.48100  10079.0267
55                  Argentina 1982   29341374 69.94200   8997.8974
56                  Argentina 1987   31620918 70.77400   9139.6714
57                  Argentina 1992   33958947 71.86800   9308.4187
58                  Argentina 1997   36203463 73.27500  10967.2820
59                  Argentina 2002   38331121 74.34000   8797.6407
60                  Argentina 2007   40301927 75.32000  12779.3796
61                  Australia 1952    8691212 69.12000  10039.5956
62                  Australia 1957    9712569 70.33000  10949.6496
63                  Australia 1962   10794968 70.93000  12217.2269
64                  Australia 1967   11872264 71.10000  14526.1246
65                  Australia 1972   13177000 71.93000  16788.6295
66                  Australia 1977   14074100 73.49000  18334.1975
67                  Australia 1982   15184200 74.74000  19477.0093
68                  Australia 1987   16257249 76.32000  21888.8890
69                  Australia 1992   17481977 77.56000  23424.7668
70                  Australia 1997   18565243 78.83000  26997.9366
71                  Australia 2002   19546792 80.37000  30687.7547
72                  Australia 2007   20434176 81.23500  34435.3674
73                    Austria 1952    6927772 66.80000   6137.0765
74                    Austria 1957    6965860 67.48000   8842.5980
75                    Austria 1962    7129864 69.54000  10750.7211
76                    Austria 1967    7376998 70.14000  12834.6024
77                    Austria 1972    7544201 70.63000  16661.6256
78                    Austria 1977    7568430 72.17000  19749.4223
79                    Austria 1982    7574613 73.18000  21597.0836
80                    Austria 1987    7578903 74.94000  23687.8261
81                    Austria 1992    7914969 76.04000  27042.0187
82                    Austria 1997    8069876 77.51000  29095.9207
83                    Austria 2002    8148312 78.98000  32417.6077
84                    Austria 2007    8199783 79.82900  36126.4927
85                    Bahrain 1952     120447 50.93900   9867.0848
86                    Bahrain 1957     138655 53.83200  11635.7995
87                    Bahrain 1962     171863 56.92300  12753.2751
88                    Bahrain 1967     202182 59.92300  14804.6727
89                    Bahrain 1972     230800 63.30000  18268.6584
90                    Bahrain 1977     297410 65.59300  19340.1020
91                    Bahrain 1982     377967 69.05200  19211.1473
92                    Bahrain 1987     454612 70.75000  18524.0241
93                    Bahrain 1992     529491 72.60100  19035.5792
94                    Bahrain 1997     598561 73.92500  20292.0168
95                    Bahrain 2002     656397 74.79500  23403.5593
96                    Bahrain 2007     708573 75.63500  29796.0483
97                 Bangladesh 1952   46886859 37.48400    684.2442
98                 Bangladesh 1957   51365468 39.34800    661.6375
99                 Bangladesh 1962   56839289 41.21600    686.3416
100                Bangladesh 1967   62821884 43.45300    721.1861
101                Bangladesh 1972   70759295 45.25200    630.2336
102                Bangladesh 1977   80428306 46.92300    659.8772
103                Bangladesh 1982   93074406 50.00900    676.9819
104                Bangladesh 1987  103764241 52.81900    751.9794
105                Bangladesh 1992  113704579 56.01800    837.8102
106                Bangladesh 1997  123315288 59.41200    972.7700
107                Bangladesh 2002  135656790 62.01300   1136.3904
108                Bangladesh 2007  150448339 64.06200   1391.2538
109                   Belgium 1952    8730405 68.00000   8343.1051
110                   Belgium 1957    8989111 69.24000   9714.9606
111                   Belgium 1962    9218400 70.25000  10991.2068
112                   Belgium 1967    9556500 70.94000  13149.0412
113                   Belgium 1972    9709100 71.44000  16672.1436
114                   Belgium 1977    9821800 72.80000  19117.9745
115                   Belgium 1982    9856303 73.93000  20979.8459
116                   Belgium 1987    9870200 75.35000  22525.5631
117                   Belgium 1992   10045622 76.46000  25575.5707
118                   Belgium 1997   10199787 77.53000  27561.1966
119                   Belgium 2002   10311970 78.32000  30485.8838
120                   Belgium 2007   10392226 79.44100  33692.6051
121                     Benin 1952    1738315 38.22300   1062.7522
122                     Benin 1957    1925173 40.35800    959.6011
123                     Benin 1962    2151895 42.61800    949.4991
124                     Benin 1967    2427334 44.88500   1035.8314
125                     Benin 1972    2761407 47.01400   1085.7969
126                     Benin 1977    3168267 49.19000   1029.1613
127                     Benin 1982    3641603 50.90400   1277.8976
128                     Benin 1987    4243788 52.33700   1225.8560
129                     Benin 1992    4981671 53.91900   1191.2077
130                     Benin 1997    6066080 54.77700   1232.9753
131                     Benin 2002    7026113 54.40600   1372.8779
132                     Benin 2007    8078314 56.72800   1441.2849
133                   Bolivia 1952    2883315 40.41400   2677.3263
134                   Bolivia 1957    3211738 41.89000   2127.6863
135                   Bolivia 1962    3593918 43.42800   2180.9725
136                   Bolivia 1967    4040665 45.03200   2586.8861
137                   Bolivia 1972    4565872 46.71400   2980.3313
138                   Bolivia 1977    5079716 50.02300   3548.0978
139                   Bolivia 1982    5642224 53.85900   3156.5105
140                   Bolivia 1987    6156369 57.25100   2753.6915
141                   Bolivia 1992    6893451 59.95700   2961.6997
142                   Bolivia 1997    7693188 62.05000   3326.1432
143                   Bolivia 2002    8445134 63.88300   3413.2627
144                   Bolivia 2007    9119152 65.55400   3822.1371
145    Bosnia and Herzegovina 1952    2791000 53.82000    973.5332
146    Bosnia and Herzegovina 1957    3076000 58.45000   1353.9892
147    Bosnia and Herzegovina 1962    3349000 61.93000   1709.6837
148    Bosnia and Herzegovina 1967    3585000 64.79000   2172.3524
149    Bosnia and Herzegovina 1972    3819000 67.45000   2860.1698
150    Bosnia and Herzegovina 1977    4086000 69.86000   3528.4813
151    Bosnia and Herzegovina 1982    4172693 70.69000   4126.6132
152    Bosnia and Herzegovina 1987    4338977 71.14000   4314.1148
153    Bosnia and Herzegovina 1992    4256013 72.17800   2546.7814
154    Bosnia and Herzegovina 1997    3607000 73.24400   4766.3559
155    Bosnia and Herzegovina 2002    4165416 74.09000   6018.9752
156    Bosnia and Herzegovina 2007    4552198 74.85200   7446.2988
157                  Botswana 1952     442308 47.62200    851.2411
158                  Botswana 1957     474639 49.61800    918.2325
159                  Botswana 1962     512764 51.52000    983.6540
160                  Botswana 1967     553541 53.29800   1214.7093
161                  Botswana 1972     619351 56.02400   2263.6111
162                  Botswana 1977     781472 59.31900   3214.8578
163                  Botswana 1982     970347 61.48400   4551.1421
164                  Botswana 1987    1151184 63.62200   6205.8839
165                  Botswana 1992    1342614 62.74500   7954.1116
166                  Botswana 1997    1536536 52.55600   8647.1423
167                  Botswana 2002    1630347 46.63400  11003.6051
168                  Botswana 2007    1639131 50.72800  12569.8518
169                    Brazil 1952   56602560 50.91700   2108.9444
170                    Brazil 1957   65551171 53.28500   2487.3660
171                    Brazil 1962   76039390 55.66500   3336.5858
172                    Brazil 1967   88049823 57.63200   3429.8644
173                    Brazil 1972  100840058 59.50400   4985.7115
174                    Brazil 1977  114313951 61.48900   6660.1187
175                    Brazil 1982  128962939 63.33600   7030.8359
176                    Brazil 1987  142938076 65.20500   7807.0958
177                    Brazil 1992  155975974 67.05700   6950.2830
178                    Brazil 1997  168546719 69.38800   7957.9808
179                    Brazil 2002  179914212 71.00600   8131.2128
180                    Brazil 2007  190010647 72.39000   9065.8008
181                  Bulgaria 1952    7274900 59.60000   2444.2866
182                  Bulgaria 1957    7651254 66.61000   3008.6707
183                  Bulgaria 1962    8012946 69.51000   4254.3378
184                  Bulgaria 1967    8310226 70.42000   5577.0028
185                  Bulgaria 1972    8576200 70.90000   6597.4944
186                  Bulgaria 1977    8797022 70.81000   7612.2404
187                  Bulgaria 1982    8892098 71.08000   8224.1916
188                  Bulgaria 1987    8971958 71.34000   8239.8548
189                  Bulgaria 1992    8658506 71.19000   6302.6234
190                  Bulgaria 1997    8066057 70.32000   5970.3888
191                  Bulgaria 2002    7661799 72.14000   7696.7777
192                  Bulgaria 2007    7322858 73.00500  10680.7928
193              Burkina Faso 1952    4469979 31.97500    543.2552
194              Burkina Faso 1957    4713416 34.90600    617.1835
195              Burkina Faso 1962    4919632 37.81400    722.5120
196              Burkina Faso 1967    5127935 40.69700    794.8266
197              Burkina Faso 1972    5433886 43.59100    854.7360
198              Burkina Faso 1977    5889574 46.13700    743.3870
199              Burkina Faso 1982    6634596 48.12200    807.1986
200              Burkina Faso 1987    7586551 49.55700    912.0631
201              Burkina Faso 1992    8878303 50.26000    931.7528
202              Burkina Faso 1997   10352843 50.32400    946.2950
203              Burkina Faso 2002   12251209 50.65000   1037.6452
204              Burkina Faso 2007   14326203 52.29500   1217.0330
205                   Burundi 1952    2445618 39.03100    339.2965
206                   Burundi 1957    2667518 40.53300    379.5646
207                   Burundi 1962    2961915 42.04500    355.2032
208                   Burundi 1967    3330989 43.54800    412.9775
209                   Burundi 1972    3529983 44.05700    464.0995
210                   Burundi 1977    3834415 45.91000    556.1033
211                   Burundi 1982    4580410 47.47100    559.6032
212                   Burundi 1987    5126023 48.21100    621.8188
213                   Burundi 1992    5809236 44.73600    631.6999
214                   Burundi 1997    6121610 45.32600    463.1151
215                   Burundi 2002    7021078 47.36000    446.4035
216                   Burundi 2007    8390505 49.58000    430.0707
217                  Cambodia 1952    4693836 39.41700    368.4693
218                  Cambodia 1957    5322536 41.36600    434.0383
219                  Cambodia 1962    6083619 43.41500    496.9136
220                  Cambodia 1967    6960067 45.41500    523.4323
221                  Cambodia 1972    7450606 40.31700    421.6240
222                  Cambodia 1977    6978607 31.22000    524.9722
223                  Cambodia 1982    7272485 50.95700    624.4755
224                  Cambodia 1987    8371791 53.91400    683.8956
225                  Cambodia 1992   10150094 55.80300    682.3032
226                  Cambodia 1997   11782962 56.53400    734.2852
227                  Cambodia 2002   12926707 56.75200    896.2260
228                  Cambodia 2007   14131858 59.72300   1713.7787
229                  Cameroon 1952    5009067 38.52300   1172.6677
230                  Cameroon 1957    5359923 40.42800   1313.0481
231                  Cameroon 1962    5793633 42.64300   1399.6074
232                  Cameroon 1967    6335506 44.79900   1508.4531
233                  Cameroon 1972    7021028 47.04900   1684.1465
234                  Cameroon 1977    7959865 49.35500   1783.4329
235                  Cameroon 1982    9250831 52.96100   2367.9833
236                  Cameroon 1987   10780667 54.98500   2602.6642
237                  Cameroon 1992   12467171 54.31400   1793.1633
238                  Cameroon 1997   14195809 52.19900   1694.3375
239                  Cameroon 2002   15929988 49.85600   1934.0114
240                  Cameroon 2007   17696293 50.43000   2042.0952
241                    Canada 1952   14785584 68.75000  11367.1611
242                    Canada 1957   17010154 69.96000  12489.9501
243                    Canada 1962   18985849 71.30000  13462.4855
244                    Canada 1967   20819767 72.13000  16076.5880
245                    Canada 1972   22284500 72.88000  18970.5709
246                    Canada 1977   23796400 74.21000  22090.8831
247                    Canada 1982   25201900 75.76000  22898.7921
248                    Canada 1987   26549700 76.86000  26626.5150
249                    Canada 1992   28523502 77.95000  26342.8843
250                    Canada 1997   30305843 78.61000  28954.9259
251                    Canada 2002   31902268 79.77000  33328.9651
252                    Canada 2007   33390141 80.65300  36319.2350
253  Central African Republic 1952    1291695 35.46300   1071.3107
254  Central African Republic 1957    1392284 37.46400   1190.8443
255  Central African Republic 1962    1523478 39.47500   1193.0688
256  Central African Republic 1967    1733638 41.47800   1136.0566
257  Central African Republic 1972    1927260 43.45700   1070.0133
258  Central African Republic 1977    2167533 46.77500   1109.3743
259  Central African Republic 1982    2476971 48.29500    956.7530
260  Central African Republic 1987    2840009 50.48500    844.8764
261  Central African Republic 1992    3265124 49.39600    747.9055
262  Central African Republic 1997    3696513 46.06600    740.5063
263  Central African Republic 2002    4048013 43.30800    738.6906
264  Central African Republic 2007    4369038 44.74100    706.0165
265                      Chad 1952    2682462 38.09200   1178.6659
266                      Chad 1957    2894855 39.88100   1308.4956
267                      Chad 1962    3150417 41.71600   1389.8176
268                      Chad 1967    3495967 43.60100   1196.8106
269                      Chad 1972    3899068 45.56900   1104.1040
270                      Chad 1977    4388260 47.38300   1133.9850
271                      Chad 1982    4875118 49.51700    797.9081
272                      Chad 1987    5498955 51.05100    952.3861
273                      Chad 1992    6429417 51.72400   1058.0643
274                      Chad 1997    7562011 51.57300   1004.9614
275                      Chad 2002    8835739 50.52500   1156.1819
276                      Chad 2007   10238807 50.65100   1704.0637
277                     Chile 1952    6377619 54.74500   3939.9788
278                     Chile 1957    7048426 56.07400   4315.6227
279                     Chile 1962    7961258 57.92400   4519.0943
280                     Chile 1967    8858908 60.52300   5106.6543
281                     Chile 1972    9717524 63.44100   5494.0244
282                     Chile 1977   10599793 67.05200   4756.7638
283                     Chile 1982   11487112 70.56500   5095.6657
284                     Chile 1987   12463354 72.49200   5547.0638
285                     Chile 1992   13572994 74.12600   7596.1260
286                     Chile 1997   14599929 75.81600  10118.0532
287                     Chile 2002   15497046 77.86000  10778.7838
288                     Chile 2007   16284741 78.55300  13171.6388
289                     China 1952  556263528 44.00000    400.4486
290                     China 1957  637408000 50.54896    575.9870
291                     China 1962  665770000 44.50136    487.6740
292                     China 1967  754550000 58.38112    612.7057
293                     China 1972  862030000 63.11888    676.9001
294                     China 1977  943455000 63.96736    741.2375
295                     China 1982 1000281000 65.52500    962.4214
296                     China 1987 1084035000 67.27400   1378.9040
297                     China 1992 1164970000 68.69000   1655.7842
298                     China 1997 1230075000 70.42600   2289.2341
299                     China 2002 1280400000 72.02800   3119.2809
300                     China 2007 1318683096 72.96100   4959.1149
301                  Colombia 1952   12350771 50.64300   2144.1151
302                  Colombia 1957   14485993 55.11800   2323.8056
303                  Colombia 1962   17009885 57.86300   2492.3511
304                  Colombia 1967   19764027 59.96300   2678.7298
305                  Colombia 1972   22542890 61.62300   3264.6600
306                  Colombia 1977   25094412 63.83700   3815.8079
307                  Colombia 1982   27764644 66.65300   4397.5757
308                  Colombia 1987   30964245 67.76800   4903.2191
309                  Colombia 1992   34202721 68.42100   5444.6486
310                  Colombia 1997   37657830 70.31300   6117.3617
311                  Colombia 2002   41008227 71.68200   5755.2600
312                  Colombia 2007   44227550 72.88900   7006.5804
313                   Comoros 1952     153936 40.71500   1102.9909
314                   Comoros 1957     170928 42.46000   1211.1485
315                   Comoros 1962     191689 44.46700   1406.6483
316                   Comoros 1967     217378 46.47200   1876.0296
317                   Comoros 1972     250027 48.94400   1937.5777
318                   Comoros 1977     304739 50.93900   1172.6030
319                   Comoros 1982     348643 52.93300   1267.1001
320                   Comoros 1987     395114 54.92600   1315.9808
321                   Comoros 1992     454429 57.93900   1246.9074
322                   Comoros 1997     527982 60.66000   1173.6182
323                   Comoros 2002     614382 62.97400   1075.8116
324                   Comoros 2007     710960 65.15200    986.1479
325           Congo Dem. Rep. 1952   14100005 39.14300    780.5423
326           Congo Dem. Rep. 1957   15577932 40.65200    905.8602
327           Congo Dem. Rep. 1962   17486434 42.12200    896.3146
328           Congo Dem. Rep. 1967   19941073 44.05600    861.5932
329           Congo Dem. Rep. 1972   23007669 45.98900    904.8961
330           Congo Dem. Rep. 1977   26480870 47.80400    795.7573
331           Congo Dem. Rep. 1982   30646495 47.78400    673.7478
332           Congo Dem. Rep. 1987   35481645 47.41200    672.7748
333           Congo Dem. Rep. 1992   41672143 45.54800    457.7192
334           Congo Dem. Rep. 1997   47798986 42.58700    312.1884
335           Congo Dem. Rep. 2002   55379852 44.96600    241.1659
336           Congo Dem. Rep. 2007   64606759 46.46200    277.5519
337                Congo Rep. 1952     854885 42.11100   2125.6214
338                Congo Rep. 1957     940458 45.05300   2315.0566
339                Congo Rep. 1962    1047924 48.43500   2464.7832
340                Congo Rep. 1967    1179760 52.04000   2677.9396
341                Congo Rep. 1972    1340458 54.90700   3213.1527
342                Congo Rep. 1977    1536769 55.62500   3259.1790
343                Congo Rep. 1982    1774735 56.69500   4879.5075
344                Congo Rep. 1987    2064095 57.47000   4201.1949
345                Congo Rep. 1992    2409073 56.43300   4016.2395
346                Congo Rep. 1997    2800947 52.96200   3484.1644
347                Congo Rep. 2002    3328795 52.97000   3484.0620
348                Congo Rep. 2007    3800610 55.32200   3632.5578
349                Costa Rica 1952     926317 57.20600   2627.0095
350                Costa Rica 1957    1112300 60.02600   2990.0108
351                Costa Rica 1962    1345187 62.84200   3460.9370
352                Costa Rica 1967    1588717 65.42400   4161.7278
353                Costa Rica 1972    1834796 67.84900   5118.1469
354                Costa Rica 1977    2108457 70.75000   5926.8770
355                Costa Rica 1982    2424367 73.45000   5262.7348
356                Costa Rica 1987    2799811 74.75200   5629.9153
357                Costa Rica 1992    3173216 75.71300   6160.4163
358                Costa Rica 1997    3518107 77.26000   6677.0453
359                Costa Rica 2002    3834934 78.12300   7723.4472
360                Costa Rica 2007    4133884 78.78200   9645.0614
361             Cote d'Ivoire 1952    2977019 40.47700   1388.5947
362             Cote d'Ivoire 1957    3300000 42.46900   1500.8959
363             Cote d'Ivoire 1962    3832408 44.93000   1728.8694
364             Cote d'Ivoire 1967    4744870 47.35000   2052.0505
365             Cote d'Ivoire 1972    6071696 49.80100   2378.2011
366             Cote d'Ivoire 1977    7459574 52.37400   2517.7365
367             Cote d'Ivoire 1982    9025951 53.98300   2602.7102
368             Cote d'Ivoire 1987   10761098 54.65500   2156.9561
369             Cote d'Ivoire 1992   12772596 52.04400   1648.0738
370             Cote d'Ivoire 1997   14625967 47.99100   1786.2654
371             Cote d'Ivoire 2002   16252726 46.83200   1648.8008
372             Cote d'Ivoire 2007   18013409 48.32800   1544.7501
373                   Croatia 1952    3882229 61.21000   3119.2365
374                   Croatia 1957    3991242 64.77000   4338.2316
375                   Croatia 1962    4076557 67.13000   5477.8900
376                   Croatia 1967    4174366 68.50000   6960.2979
377                   Croatia 1972    4225310 69.61000   9164.0901
378                   Croatia 1977    4318673 70.64000  11305.3852
379                   Croatia 1982    4413368 70.46000  13221.8218
380                   Croatia 1987    4484310 71.52000  13822.5839
381                   Croatia 1992    4494013 72.52700   8447.7949
382                   Croatia 1997    4444595 73.68000   9875.6045
383                   Croatia 2002    4481020 74.87600  11628.3890
384                   Croatia 2007    4493312 75.74800  14619.2227
385                      Cuba 1952    6007797 59.42100   5586.5388
386                      Cuba 1957    6640752 62.32500   6092.1744
387                      Cuba 1962    7254373 65.24600   5180.7559
388                      Cuba 1967    8139332 68.29000   5690.2680
389                      Cuba 1972    8831348 70.72300   5305.4453
390                      Cuba 1977    9537988 72.64900   6380.4950
391                      Cuba 1982    9789224 73.71700   7316.9181
392                      Cuba 1987   10239839 74.17400   7532.9248
393                      Cuba 1992   10723260 74.41400   5592.8440
394                      Cuba 1997   10983007 76.15100   5431.9904
395                      Cuba 2002   11226999 77.15800   6340.6467
396                      Cuba 2007   11416987 78.27300   8948.1029
397            Czech Republic 1952    9125183 66.87000   6876.1403
398            Czech Republic 1957    9513758 69.03000   8256.3439
399            Czech Republic 1962    9620282 69.90000  10136.8671
400            Czech Republic 1967    9835109 70.38000  11399.4449
401            Czech Republic 1972    9862158 70.29000  13108.4536
402            Czech Republic 1977   10161915 70.71000  14800.1606
403            Czech Republic 1982   10303704 70.96000  15377.2285
404            Czech Republic 1987   10311597 71.58000  16310.4434
405            Czech Republic 1992   10315702 72.40000  14297.0212
406            Czech Republic 1997   10300707 74.01000  16048.5142
407            Czech Republic 2002   10256295 75.51000  17596.2102
408            Czech Republic 2007   10228744 76.48600  22833.3085
409                   Denmark 1952    4334000 70.78000   9692.3852
410                   Denmark 1957    4487831 71.81000  11099.6593
411                   Denmark 1962    4646899 72.35000  13583.3135
412                   Denmark 1967    4838800 72.96000  15937.2112
413                   Denmark 1972    4991596 73.47000  18866.2072
414                   Denmark 1977    5088419 74.69000  20422.9015
415                   Denmark 1982    5117810 74.63000  21688.0405
416                   Denmark 1987    5127024 74.80000  25116.1758
417                   Denmark 1992    5171393 75.33000  26406.7399
418                   Denmark 1997    5283663 76.11000  29804.3457
419                   Denmark 2002    5374693 77.18000  32166.5001
420                   Denmark 2007    5468120 78.33200  35278.4187
421                  Djibouti 1952      63149 34.81200   2669.5295
422                  Djibouti 1957      71851 37.32800   2864.9691
423                  Djibouti 1962      89898 39.69300   3020.9893
424                  Djibouti 1967     127617 42.07400   3020.0505
425                  Djibouti 1972     178848 44.36600   3694.2124
426                  Djibouti 1977     228694 46.51900   3081.7610
427                  Djibouti 1982     305991 48.81200   2879.4681
428                  Djibouti 1987     311025 50.04000   2880.1026
429                  Djibouti 1992     384156 51.60400   2377.1562
430                  Djibouti 1997     417908 53.15700   1895.0170
431                  Djibouti 2002     447416 53.37300   1908.2609
432                  Djibouti 2007     496374 54.79100   2082.4816
433        Dominican Republic 1952    2491346 45.92800   1397.7171
434        Dominican Republic 1957    2923186 49.82800   1544.4030
435        Dominican Republic 1962    3453434 53.45900   1662.1374
436        Dominican Republic 1967    4049146 56.75100   1653.7230
437        Dominican Republic 1972    4671329 59.63100   2189.8745
438        Dominican Republic 1977    5302800 61.78800   2681.9889
439        Dominican Republic 1982    5968349 63.72700   2861.0924
440        Dominican Republic 1987    6655297 66.04600   2899.8422
441        Dominican Republic 1992    7351181 68.45700   3044.2142
442        Dominican Republic 1997    7992357 69.95700   3614.1013
443        Dominican Republic 2002    8650322 70.84700   4563.8082
444        Dominican Republic 2007    9319622 72.23500   6025.3748
445                   Ecuador 1952    3548753 48.35700   3522.1107
446                   Ecuador 1957    4058385 51.35600   3780.5467
447                   Ecuador 1962    4681707 54.64000   4086.1141
448                   Ecuador 1967    5432424 56.67800   4579.0742
449                   Ecuador 1972    6298651 58.79600   5280.9947
450                   Ecuador 1977    7278866 61.31000   6679.6233
451                   Ecuador 1982    8365850 64.34200   7213.7913
452                   Ecuador 1987    9545158 67.23100   6481.7770
453                   Ecuador 1992   10748394 69.61300   7103.7026
454                   Ecuador 1997   11911819 72.31200   7429.4559
455                   Ecuador 2002   12921234 74.17300   5773.0445
456                   Ecuador 2007   13755680 74.99400   6873.2623
457                     Egypt 1952   22223309 41.89300   1418.8224
458                     Egypt 1957   25009741 44.44400   1458.9153
459                     Egypt 1962   28173309 46.99200   1693.3359
460                     Egypt 1967   31681188 49.29300   1814.8807
461                     Egypt 1972   34807417 51.13700   2024.0081
462                     Egypt 1977   38783863 53.31900   2785.4936
463                     Egypt 1982   45681811 56.00600   3503.7296
464                     Egypt 1987   52799062 59.79700   3885.4607
465                     Egypt 1992   59402198 63.67400   3794.7552
466                     Egypt 1997   66134291 67.21700   4173.1818
467                     Egypt 2002   73312559 69.80600   4754.6044
468                     Egypt 2007   80264543 71.33800   5581.1810
469               El Salvador 1952    2042865 45.26200   3048.3029
470               El Salvador 1957    2355805 48.57000   3421.5232
471               El Salvador 1962    2747687 52.30700   3776.8036
472               El Salvador 1967    3232927 55.85500   4358.5954
473               El Salvador 1972    3790903 58.20700   4520.2460
474               El Salvador 1977    4282586 56.69600   5138.9224
475               El Salvador 1982    4474873 56.60400   4098.3442
476               El Salvador 1987    4842194 63.15400   4140.4421
477               El Salvador 1992    5274649 66.79800   4444.2317
478               El Salvador 1997    5783439 69.53500   5154.8255
479               El Salvador 2002    6353681 70.73400   5351.5687
480               El Salvador 2007    6939688 71.87800   5728.3535
481         Equatorial Guinea 1952     216964 34.48200    375.6431
482         Equatorial Guinea 1957     232922 35.98300    426.0964
483         Equatorial Guinea 1962     249220 37.48500    582.8420
484         Equatorial Guinea 1967     259864 38.98700    915.5960
485         Equatorial Guinea 1972     277603 40.51600    672.4123
486         Equatorial Guinea 1977     192675 42.02400    958.5668
487         Equatorial Guinea 1982     285483 43.66200    927.8253
488         Equatorial Guinea 1987     341244 45.66400    966.8968
489         Equatorial Guinea 1992     387838 47.54500   1132.0550
490         Equatorial Guinea 1997     439971 48.24500   2814.4808
491         Equatorial Guinea 2002     495627 49.34800   7703.4959
492         Equatorial Guinea 2007     551201 51.57900  12154.0897
493                   Eritrea 1952    1438760 35.92800    328.9406
494                   Eritrea 1957    1542611 38.04700    344.1619
495                   Eritrea 1962    1666618 40.15800    380.9958
496                   Eritrea 1967    1820319 42.18900    468.7950
497                   Eritrea 1972    2260187 44.14200    514.3242
498                   Eritrea 1977    2512642 44.53500    505.7538
499                   Eritrea 1982    2637297 43.89000    524.8758
500                   Eritrea 1987    2915959 46.45300    521.1341
501                   Eritrea 1992    3668440 49.99100    582.8585
502                   Eritrea 1997    4058319 53.37800    913.4708
503                   Eritrea 2002    4414865 55.24000    765.3500
504                   Eritrea 2007    4906585 58.04000    641.3695
505                  Ethiopia 1952   20860941 34.07800    362.1463
506                  Ethiopia 1957   22815614 36.66700    378.9042
507                  Ethiopia 1962   25145372 40.05900    419.4564
508                  Ethiopia 1967   27860297 42.11500    516.1186
509                  Ethiopia 1972   30770372 43.51500    566.2439
510                  Ethiopia 1977   34617799 44.51000    556.8084
511                  Ethiopia 1982   38111756 44.91600    577.8607
512                  Ethiopia 1987   42999530 46.68400    573.7413
513                  Ethiopia 1992   52088559 48.09100    421.3535
514                  Ethiopia 1997   59861301 49.40200    515.8894
515                  Ethiopia 2002   67946797 50.72500    530.0535
516                  Ethiopia 2007   76511887 52.94700    690.8056
517                   Finland 1952    4090500 66.55000   6424.5191
518                   Finland 1957    4324000 67.49000   7545.4154
519                   Finland 1962    4491443 68.75000   9371.8426
520                   Finland 1967    4605744 69.83000  10921.6363
521                   Finland 1972    4639657 70.87000  14358.8759
522                   Finland 1977    4738902 72.52000  15605.4228
523                   Finland 1982    4826933 74.55000  18533.1576
524                   Finland 1987    4931729 74.83000  21141.0122
525                   Finland 1992    5041039 75.70000  20647.1650
526                   Finland 1997    5134406 77.13000  23723.9502
527                   Finland 2002    5193039 78.37000  28204.5906
528                   Finland 2007    5238460 79.31300  33207.0844
529                    France 1952   42459667 67.41000   7029.8093
530                    France 1957   44310863 68.93000   8662.8349
531                    France 1962   47124000 70.51000  10560.4855
532                    France 1967   49569000 71.55000  12999.9177
533                    France 1972   51732000 72.38000  16107.1917
534                    France 1977   53165019 73.83000  18292.6351
535                    France 1982   54433565 74.89000  20293.8975
536                    France 1987   55630100 76.34000  22066.4421
537                    France 1992   57374179 77.46000  24703.7961
538                    France 1997   58623428 78.64000  25889.7849
539                    France 2002   59925035 79.59000  28926.0323
540                    France 2007   61083916 80.65700  30470.0167
541                     Gabon 1952     420702 37.00300   4293.4765
542                     Gabon 1957     434904 38.99900   4976.1981
543                     Gabon 1962     455661 40.48900   6631.4592
544                     Gabon 1967     489004 44.59800   8358.7620
545                     Gabon 1972     537977 48.69000  11401.9484
546                     Gabon 1977     706367 52.79000  21745.5733
547                     Gabon 1982     753874 56.56400  15113.3619
548                     Gabon 1987     880397 60.19000  11864.4084
549                     Gabon 1992     985739 61.36600  13522.1575
550                     Gabon 1997    1126189 60.46100  14722.8419
551                     Gabon 2002    1299304 56.76100  12521.7139
552                     Gabon 2007    1454867 56.73500  13206.4845
553                    Gambia 1952     284320 30.00000    485.2307
554                    Gambia 1957     323150 32.06500    520.9267
555                    Gambia 1962     374020 33.89600    599.6503
556                    Gambia 1967     439593 35.85700    734.7829
557                    Gambia 1972     517101 38.30800    756.0868
558                    Gambia 1977     608274 41.84200    884.7553
559                    Gambia 1982     715523 45.58000    835.8096
560                    Gambia 1987     848406 49.26500    611.6589
561                    Gambia 1992    1025384 52.64400    665.6244
562                    Gambia 1997    1235767 55.86100    653.7302
563                    Gambia 2002    1457766 58.04100    660.5856
564                    Gambia 2007    1688359 59.44800    752.7497
565                   Germany 1952   69145952 67.50000   7144.1144
566                   Germany 1957   71019069 69.10000  10187.8267
567                   Germany 1962   73739117 70.30000  12902.4629
568                   Germany 1967   76368453 70.80000  14745.6256
569                   Germany 1972   78717088 71.00000  18016.1803
570                   Germany 1977   78160773 72.50000  20512.9212
571                   Germany 1982   78335266 73.80000  22031.5327
572                   Germany 1987   77718298 74.84700  24639.1857
573                   Germany 1992   80597764 76.07000  26505.3032
574                   Germany 1997   82011073 77.34000  27788.8842
575                   Germany 2002   82350671 78.67000  30035.8020
576                   Germany 2007   82400996 79.40600  32170.3744
577                     Ghana 1952    5581001 43.14900    911.2989
578                     Ghana 1957    6391288 44.77900   1043.5615
579                     Ghana 1962    7355248 46.45200   1190.0411
580                     Ghana 1967    8490213 48.07200   1125.6972
581                     Ghana 1972    9354120 49.87500   1178.2237
582                     Ghana 1977   10538093 51.75600    993.2240
583                     Ghana 1982   11400338 53.74400    876.0326
584                     Ghana 1987   14168101 55.72900    847.0061
585                     Ghana 1992   16278738 57.50100    925.0602
586                     Ghana 1997   18418288 58.55600   1005.2458
587                     Ghana 2002   20550751 58.45300   1111.9846
588                     Ghana 2007   22873338 60.02200   1327.6089
589                    Greece 1952    7733250 65.86000   3530.6901
590                    Greece 1957    8096218 67.86000   4916.2999
591                    Greece 1962    8448233 69.51000   6017.1907
592                    Greece 1967    8716441 71.00000   8513.0970
593                    Greece 1972    8888628 72.34000  12724.8296
594                    Greece 1977    9308479 73.68000  14195.5243
595                    Greece 1982    9786480 75.24000  15268.4209
596                    Greece 1987    9974490 76.67000  16120.5284
597                    Greece 1992   10325429 77.03000  17541.4963
598                    Greece 1997   10502372 77.86900  18747.6981
599                    Greece 2002   10603863 78.25600  22514.2548
600                    Greece 2007   10706290 79.48300  27538.4119
601                 Guatemala 1952    3146381 42.02300   2428.2378
602                 Guatemala 1957    3640876 44.14200   2617.1560
603                 Guatemala 1962    4208858 46.95400   2750.3644
604                 Guatemala 1967    4690773 50.01600   3242.5311
605                 Guatemala 1972    5149581 53.73800   4031.4083
606                 Guatemala 1977    5703430 56.02900   4879.9927
607                 Guatemala 1982    6395630 58.13700   4820.4948
608                 Guatemala 1987    7326406 60.78200   4246.4860
609                 Guatemala 1992    8486949 63.37300   4439.4508
610                 Guatemala 1997    9803875 66.32200   4684.3138
611                 Guatemala 2002   11178650 68.97800   4858.3475
612                 Guatemala 2007   12572928 70.25900   5186.0500
613                    Guinea 1952    2664249 33.60900    510.1965
614                    Guinea 1957    2876726 34.55800    576.2670
615                    Guinea 1962    3140003 35.75300    686.3737
616                    Guinea 1967    3451418 37.19700    708.7595
617                    Guinea 1972    3811387 38.84200    741.6662
618                    Guinea 1977    4227026 40.76200    874.6859
619                    Guinea 1982    4710497 42.89100    857.2504
620                    Guinea 1987    5650262 45.55200    805.5725
621                    Guinea 1992    6990574 48.57600    794.3484
622                    Guinea 1997    8048834 51.45500    869.4498
623                    Guinea 2002    8807818 53.67600    945.5836
624                    Guinea 2007    9947814 56.00700    942.6542
625             Guinea-Bissau 1952     580653 32.50000    299.8503
626             Guinea-Bissau 1957     601095 33.48900    431.7905
627             Guinea-Bissau 1962     627820 34.48800    522.0344
628             Guinea-Bissau 1967     601287 35.49200    715.5806
629             Guinea-Bissau 1972     625361 36.48600    820.2246
630             Guinea-Bissau 1977     745228 37.46500    764.7260
631             Guinea-Bissau 1982     825987 39.32700    838.1240
632             Guinea-Bissau 1987     927524 41.24500    736.4154
633             Guinea-Bissau 1992    1050938 43.26600    745.5399
634             Guinea-Bissau 1997    1193708 44.87300    796.6645
635             Guinea-Bissau 2002    1332459 45.50400    575.7047
636             Guinea-Bissau 2007    1472041 46.38800    579.2317
637                     Haiti 1952    3201488 37.57900   1840.3669
638                     Haiti 1957    3507701 40.69600   1726.8879
639                     Haiti 1962    3880130 43.59000   1796.5890
640                     Haiti 1967    4318137 46.24300   1452.0577
641                     Haiti 1972    4698301 48.04200   1654.4569
642                     Haiti 1977    4908554 49.92300   1874.2989
643                     Haiti 1982    5198399 51.46100   2011.1595
644                     Haiti 1987    5756203 53.63600   1823.0160
645                     Haiti 1992    6326682 55.08900   1456.3095
646                     Haiti 1997    6913545 56.67100   1341.7269
647                     Haiti 2002    7607651 58.13700   1270.3649
648                     Haiti 2007    8502814 60.91600   1201.6372
649                  Honduras 1952    1517453 41.91200   2194.9262
650                  Honduras 1957    1770390 44.66500   2220.4877
651                  Honduras 1962    2090162 48.04100   2291.1568
652                  Honduras 1967    2500689 50.92400   2538.2694
653                  Honduras 1972    2965146 53.88400   2529.8423
654                  Honduras 1977    3055235 57.40200   3203.2081
655                  Honduras 1982    3669448 60.90900   3121.7608
656                  Honduras 1987    4372203 64.49200   3023.0967
657                  Honduras 1992    5077347 66.39900   3081.6946
658                  Honduras 1997    5867957 67.65900   3160.4549
659                  Honduras 2002    6677328 68.56500   3099.7287
660                  Honduras 2007    7483763 70.19800   3548.3308
661           Hong Kong China 1952    2125900 60.96000   3054.4212
662           Hong Kong China 1957    2736300 64.75000   3629.0765
663           Hong Kong China 1962    3305200 67.65000   4692.6483
664           Hong Kong China 1967    3722800 70.00000   6197.9628
665           Hong Kong China 1972    4115700 72.00000   8315.9281
666           Hong Kong China 1977    4583700 73.60000  11186.1413
667           Hong Kong China 1982    5264500 75.45000  14560.5305
668           Hong Kong China 1987    5584510 76.20000  20038.4727
669           Hong Kong China 1992    5829696 77.60100  24757.6030
670           Hong Kong China 1997    6495918 80.00000  28377.6322
671           Hong Kong China 2002    6762476 81.49500  30209.0152
672           Hong Kong China 2007    6980412 82.20800  39724.9787
673                   Hungary 1952    9504000 64.03000   5263.6738
674                   Hungary 1957    9839000 66.41000   6040.1800
675                   Hungary 1962   10063000 67.96000   7550.3599
676                   Hungary 1967   10223422 69.50000   9326.6447
677                   Hungary 1972   10394091 69.76000  10168.6561
678                   Hungary 1977   10637171 69.95000  11674.8374
679                   Hungary 1982   10705535 69.39000  12545.9907
680                   Hungary 1987   10612740 69.58000  12986.4800
681                   Hungary 1992   10348684 69.17000  10535.6285
682                   Hungary 1997   10244684 71.04000  11712.7768
683                   Hungary 2002   10083313 72.59000  14843.9356
684                   Hungary 2007    9956108 73.33800  18008.9444
685                   Iceland 1952     147962 72.49000   7267.6884
686                   Iceland 1957     165110 73.47000   9244.0014
687                   Iceland 1962     182053 73.68000  10350.1591
688                   Iceland 1967     198676 73.73000  13319.8957
689                   Iceland 1972     209275 74.46000  15798.0636
690                   Iceland 1977     221823 76.11000  19654.9625
691                   Iceland 1982     233997 76.99000  23269.6075
692                   Iceland 1987     244676 77.23000  26923.2063
693                   Iceland 1992     259012 78.77000  25144.3920
694                   Iceland 1997     271192 78.95000  28061.0997
695                   Iceland 2002     288030 80.50000  31163.2020
696                   Iceland 2007     301931 81.75700  36180.7892
697                     India 1952  372000000 37.37300    546.5657
698                     India 1957  409000000 40.24900    590.0620
699                     India 1962  454000000 43.60500    658.3472
700                     India 1967  506000000 47.19300    700.7706
701                     India 1972  567000000 50.65100    724.0325
702                     India 1977  634000000 54.20800    813.3373
703                     India 1982  708000000 56.59600    855.7235
704                     India 1987  788000000 58.55300    976.5127
705                     India 1992  872000000 60.22300   1164.4068
706                     India 1997  959000000 61.76500   1458.8174
707                     India 2002 1034172547 62.87900   1746.7695
708                     India 2007 1110396331 64.69800   2452.2104
709                 Indonesia 1952   82052000 37.46800    749.6817
710                 Indonesia 1957   90124000 39.91800    858.9003
711                 Indonesia 1962   99028000 42.51800    849.2898
712                 Indonesia 1967  109343000 45.96400    762.4318
713                 Indonesia 1972  121282000 49.20300   1111.1079
714                 Indonesia 1977  136725000 52.70200   1382.7021
715                 Indonesia 1982  153343000 56.15900   1516.8730
716                 Indonesia 1987  169276000 60.13700   1748.3570
717                 Indonesia 1992  184816000 62.68100   2383.1409
718                 Indonesia 1997  199278000 66.04100   3119.3356
719                 Indonesia 2002  211060000 68.58800   2873.9129
720                 Indonesia 2007  223547000 70.65000   3540.6516
721                      Iran 1952   17272000 44.86900   3035.3260
722                      Iran 1957   19792000 47.18100   3290.2576
723                      Iran 1962   22874000 49.32500   4187.3298
724                      Iran 1967   26538000 52.46900   5906.7318
725                      Iran 1972   30614000 55.23400   9613.8186
726                      Iran 1977   35480679 57.70200  11888.5951
727                      Iran 1982   43072751 59.62000   7608.3346
728                      Iran 1987   51889696 63.04000   6642.8814
729                      Iran 1992   60397973 65.74200   7235.6532
730                      Iran 1997   63327987 68.04200   8263.5903
731                      Iran 2002   66907826 69.45100   9240.7620
732                      Iran 2007   69453570 70.96400  11605.7145
733                      Iraq 1952    5441766 45.32000   4129.7661
734                      Iraq 1957    6248643 48.43700   6229.3336
735                      Iraq 1962    7240260 51.45700   8341.7378
736                      Iraq 1967    8519282 54.45900   8931.4598
737                      Iraq 1972   10061506 56.95000   9576.0376
738                      Iraq 1977   11882916 60.41300  14688.2351
739                      Iraq 1982   14173318 62.03800  14517.9071
740                      Iraq 1987   16543189 65.04400  11643.5727
741                      Iraq 1992   17861905 59.46100   3745.6407
742                      Iraq 1997   20775703 58.81100   3076.2398
743                      Iraq 2002   24001816 57.04600   4390.7173
744                      Iraq 2007   27499638 59.54500   4471.0619
745                   Ireland 1952    2952156 66.91000   5210.2803
746                   Ireland 1957    2878220 68.90000   5599.0779
747                   Ireland 1962    2830000 70.29000   6631.5973
748                   Ireland 1967    2900100 71.08000   7655.5690
749                   Ireland 1972    3024400 71.28000   9530.7729
750                   Ireland 1977    3271900 72.03000  11150.9811
751                   Ireland 1982    3480000 73.10000  12618.3214
752                   Ireland 1987    3539900 74.36000  13872.8665
753                   Ireland 1992    3557761 75.46700  17558.8155
754                   Ireland 1997    3667233 76.12200  24521.9471
755                   Ireland 2002    3879155 77.78300  34077.0494
756                   Ireland 2007    4109086 78.88500  40675.9964
757                    Israel 1952    1620914 65.39000   4086.5221
758                    Israel 1957    1944401 67.84000   5385.2785
759                    Israel 1962    2310904 69.39000   7105.6307
760                    Israel 1967    2693585 70.75000   8393.7414
761                    Israel 1972    3095893 71.63000  12786.9322
762                    Israel 1977    3495918 73.06000  13306.6192
763                    Israel 1982    3858421 74.45000  15367.0292
764                    Israel 1987    4203148 75.60000  17122.4799
765                    Israel 1992    4936550 76.93000  18051.5225
766                    Israel 1997    5531387 78.26900  20896.6092
767                    Israel 2002    6029529 79.69600  21905.5951
768                    Israel 2007    6426679 80.74500  25523.2771
769                     Italy 1952   47666000 65.94000   4931.4042
770                     Italy 1957   49182000 67.81000   6248.6562
771                     Italy 1962   50843200 69.24000   8243.5823
772                     Italy 1967   52667100 71.06000  10022.4013
773                     Italy 1972   54365564 72.19000  12269.2738
774                     Italy 1977   56059245 73.48000  14255.9847
775                     Italy 1982   56535636 74.98000  16537.4835
776                     Italy 1987   56729703 76.42000  19207.2348
777                     Italy 1992   56840847 77.44000  22013.6449
778                     Italy 1997   57479469 78.82000  24675.0245
779                     Italy 2002   57926999 80.24000  27968.0982
780                     Italy 2007   58147733 80.54600  28569.7197
781                   Jamaica 1952    1426095 58.53000   2898.5309
782                   Jamaica 1957    1535090 62.61000   4756.5258
783                   Jamaica 1962    1665128 65.61000   5246.1075
784                   Jamaica 1967    1861096 67.51000   6124.7035
785                   Jamaica 1972    1997616 69.00000   7433.8893
786                   Jamaica 1977    2156814 70.11000   6650.1956
787                   Jamaica 1982    2298309 71.21000   6068.0513
788                   Jamaica 1987    2326606 71.77000   6351.2375
789                   Jamaica 1992    2378618 71.76600   7404.9237
790                   Jamaica 1997    2531311 72.26200   7121.9247
791                   Jamaica 2002    2664659 72.04700   6994.7749
792                   Jamaica 2007    2780132 72.56700   7320.8803
793                     Japan 1952   86459025 63.03000   3216.9563
794                     Japan 1957   91563009 65.50000   4317.6944
795                     Japan 1962   95831757 68.73000   6576.6495
796                     Japan 1967  100825279 71.43000   9847.7886
797                     Japan 1972  107188273 73.42000  14778.7864
798                     Japan 1977  113872473 75.38000  16610.3770
799                     Japan 1982  118454974 77.11000  19384.1057
800                     Japan 1987  122091325 78.67000  22375.9419
801                     Japan 1992  124329269 79.36000  26824.8951
802                     Japan 1997  125956499 80.69000  28816.5850
803                     Japan 2002  127065841 82.00000  28604.5919
804                     Japan 2007  127467972 82.60300  31656.0681
805                    Jordan 1952     607914 43.15800   1546.9078
806                    Jordan 1957     746559 45.66900   1886.0806
807                    Jordan 1962     933559 48.12600   2348.0092
808                    Jordan 1967    1255058 51.62900   2741.7963
809                    Jordan 1972    1613551 56.52800   2110.8563
810                    Jordan 1977    1937652 61.13400   2852.3516
811                    Jordan 1982    2347031 63.73900   4161.4160
812                    Jordan 1987    2820042 65.86900   4448.6799
813                    Jordan 1992    3867409 68.01500   3431.5936
814                    Jordan 1997    4526235 69.77200   3645.3796
815                    Jordan 2002    5307470 71.26300   3844.9172
816                    Jordan 2007    6053193 72.53500   4519.4612
817                     Kenya 1952    6464046 42.27000    853.5409
818                     Kenya 1957    7454779 44.68600    944.4383
819                     Kenya 1962    8678557 47.94900    896.9664
820                     Kenya 1967   10191512 50.65400   1056.7365
821                     Kenya 1972   12044785 53.55900   1222.3600
822                     Kenya 1977   14500404 56.15500   1267.6132
823                     Kenya 1982   17661452 58.76600   1348.2258
824                     Kenya 1987   21198082 59.33900   1361.9369
825                     Kenya 1992   25020539 59.28500   1341.9217
826                     Kenya 1997   28263827 54.40700   1360.4850
827                     Kenya 2002   31386842 50.99200   1287.5147
828                     Kenya 2007   35610177 54.11000   1463.2493
829           Korea Dem. Rep. 1952    8865488 50.05600   1088.2778
830           Korea Dem. Rep. 1957    9411381 54.08100   1571.1347
831           Korea Dem. Rep. 1962   10917494 56.65600   1621.6936
832           Korea Dem. Rep. 1967   12617009 59.94200   2143.5406
833           Korea Dem. Rep. 1972   14781241 63.98300   3701.6215
834           Korea Dem. Rep. 1977   16325320 67.15900   4106.3012
835           Korea Dem. Rep. 1982   17647518 69.10000   4106.5253
836           Korea Dem. Rep. 1987   19067554 70.64700   4106.4923
837           Korea Dem. Rep. 1992   20711375 69.97800   3726.0635
838           Korea Dem. Rep. 1997   21585105 67.72700   1690.7568
839           Korea Dem. Rep. 2002   22215365 66.66200   1646.7582
840           Korea Dem. Rep. 2007   23301725 67.29700   1593.0655
841                Korea Rep. 1952   20947571 47.45300   1030.5922
842                Korea Rep. 1957   22611552 52.68100   1487.5935
843                Korea Rep. 1962   26420307 55.29200   1536.3444
844                Korea Rep. 1967   30131000 57.71600   2029.2281
845                Korea Rep. 1972   33505000 62.61200   3030.8767
846                Korea Rep. 1977   36436000 64.76600   4657.2210
847                Korea Rep. 1982   39326000 67.12300   5622.9425
848                Korea Rep. 1987   41622000 69.81000   8533.0888
849                Korea Rep. 1992   43805450 72.24400  12104.2787
850                Korea Rep. 1997   46173816 74.64700  15993.5280
851                Korea Rep. 2002   47969150 77.04500  19233.9882
852                Korea Rep. 2007   49044790 78.62300  23348.1397
853                    Kuwait 1952     160000 55.56500 108382.3529
854                    Kuwait 1957     212846 58.03300 113523.1329
855                    Kuwait 1962     358266 60.47000  95458.1118
856                    Kuwait 1967     575003 64.62400  80894.8833
857                    Kuwait 1972     841934 67.71200 109347.8670
858                    Kuwait 1977    1140357 69.34300  59265.4771
859                    Kuwait 1982    1497494 71.30900  31354.0357
860                    Kuwait 1987    1891487 74.17400  28118.4300
861                    Kuwait 1992    1418095 75.19000  34932.9196
862                    Kuwait 1997    1765345 76.15600  40300.6200
863                    Kuwait 2002    2111561 76.90400  35110.1057
864                    Kuwait 2007    2505559 77.58800  47306.9898
865                   Lebanon 1952    1439529 55.92800   4834.8041
866                   Lebanon 1957    1647412 59.48900   6089.7869
867                   Lebanon 1962    1886848 62.09400   5714.5606
868                   Lebanon 1967    2186894 63.87000   6006.9830
869                   Lebanon 1972    2680018 65.42100   7486.3843
870                   Lebanon 1977    3115787 66.09900   8659.6968
871                   Lebanon 1982    3086876 66.98300   7640.5195
872                   Lebanon 1987    3089353 67.92600   5377.0913
873                   Lebanon 1992    3219994 69.29200   6890.8069
874                   Lebanon 1997    3430388 70.26500   8754.9639
875                   Lebanon 2002    3677780 71.02800   9313.9388
876                   Lebanon 2007    3921278 71.99300  10461.0587
877                   Lesotho 1952     748747 42.13800    298.8462
878                   Lesotho 1957     813338 45.04700    335.9971
879                   Lesotho 1962     893143 47.74700    411.8006
880                   Lesotho 1967     996380 48.49200    498.6390
881                   Lesotho 1972    1116779 49.76700    496.5816
882                   Lesotho 1977    1251524 52.20800    745.3695
883                   Lesotho 1982    1411807 55.07800    797.2631
884                   Lesotho 1987    1599200 57.18000    773.9932
885                   Lesotho 1992    1803195 59.68500    977.4863
886                   Lesotho 1997    1982823 55.55800   1186.1480
887                   Lesotho 2002    2046772 44.59300   1275.1846
888                   Lesotho 2007    2012649 42.59200   1569.3314
889                   Liberia 1952     863308 38.48000    575.5730
890                   Liberia 1957     975950 39.48600    620.9700
891                   Liberia 1962    1112796 40.50200    634.1952
892                   Liberia 1967    1279406 41.53600    713.6036
893                   Liberia 1972    1482628 42.61400    803.0055
894                   Liberia 1977    1703617 43.76400    640.3224
895                   Liberia 1982    1956875 44.85200    572.1996
896                   Liberia 1987    2269414 46.02700    506.1139
897                   Liberia 1992    1912974 40.80200    636.6229
898                   Liberia 1997    2200725 42.22100    609.1740
899                   Liberia 2002    2814651 43.75300    531.4824
900                   Liberia 2007    3193942 45.67800    414.5073
901                     Libya 1952    1019729 42.72300   2387.5481
902                     Libya 1957    1201578 45.28900   3448.2844
903                     Libya 1962    1441863 47.80800   6757.0308
904                     Libya 1967    1759224 50.22700  18772.7517
905                     Libya 1972    2183877 52.77300  21011.4972
906                     Libya 1977    2721783 57.44200  21951.2118
907                     Libya 1982    3344074 62.15500  17364.2754
908                     Libya 1987    3799845 66.23400  11770.5898
909                     Libya 1992    4364501 68.75500   9640.1385
910                     Libya 1997    4759670 71.55500   9467.4461
911                     Libya 2002    5368585 72.73700   9534.6775
912                     Libya 2007    6036914 73.95200  12057.4993
913                Madagascar 1952    4762912 36.68100   1443.0117
914                Madagascar 1957    5181679 38.86500   1589.2027
915                Madagascar 1962    5703324 40.84800   1643.3871
916                Madagascar 1967    6334556 42.88100   1634.0473
917                Madagascar 1972    7082430 44.85100   1748.5630
918                Madagascar 1977    8007166 46.88100   1544.2286
919                Madagascar 1982    9171477 48.96900   1302.8787
920                Madagascar 1987   10568642 49.35000   1155.4419
921                Madagascar 1992   12210395 52.21400   1040.6762
922                Madagascar 1997   14165114 54.97800    986.2959
923                Madagascar 2002   16473477 57.28600    894.6371
924                Madagascar 2007   19167654 59.44300   1044.7701
925                    Malawi 1952    2917802 36.25600    369.1651
926                    Malawi 1957    3221238 37.20700    416.3698
927                    Malawi 1962    3628608 38.41000    427.9011
928                    Malawi 1967    4147252 39.48700    495.5148
929                    Malawi 1972    4730997 41.76600    584.6220
930                    Malawi 1977    5637246 43.76700    663.2237
931                    Malawi 1982    6502825 45.64200    632.8039
932                    Malawi 1987    7824747 47.45700    635.5174
933                    Malawi 1992   10014249 49.42000    563.2000
934                    Malawi 1997   10419991 47.49500    692.2758
935                    Malawi 2002   11824495 45.00900    665.4231
936                    Malawi 2007   13327079 48.30300    759.3499
937                  Malaysia 1952    6748378 48.46300   1831.1329
938                  Malaysia 1957    7739235 52.10200   1810.0670
939                  Malaysia 1962    8906385 55.73700   2036.8849
940                  Malaysia 1967   10154878 59.37100   2277.7424
941                  Malaysia 1972   11441462 63.01000   2849.0948
942                  Malaysia 1977   12845381 65.25600   3827.9216
943                  Malaysia 1982   14441916 68.00000   4920.3560
944                  Malaysia 1987   16331785 69.50000   5249.8027
945                  Malaysia 1992   18319502 70.69300   7277.9128
946                  Malaysia 1997   20476091 71.93800  10132.9096
947                  Malaysia 2002   22662365 73.04400  10206.9779
948                  Malaysia 2007   24821286 74.24100  12451.6558
949                      Mali 1952    3838168 33.68500    452.3370
950                      Mali 1957    4241884 35.30700    490.3822
951                      Mali 1962    4690372 36.93600    496.1743
952                      Mali 1967    5212416 38.48700    545.0099
953                      Mali 1972    5828158 39.97700    581.3689
954                      Mali 1977    6491649 41.71400    686.3953
955                      Mali 1982    6998256 43.91600    618.0141
956                      Mali 1987    7634008 46.36400    684.1716
957                      Mali 1992    8416215 48.38800    739.0144
958                      Mali 1997    9384984 49.90300    790.2580
959                      Mali 2002   10580176 51.81800    951.4098
960                      Mali 2007   12031795 54.46700   1042.5816
961                Mauritania 1952    1022556 40.54300    743.1159
962                Mauritania 1957    1076852 42.33800    846.1203
963                Mauritania 1962    1146757 44.24800   1055.8960
964                Mauritania 1967    1230542 46.28900   1421.1452
965                Mauritania 1972    1332786 48.43700   1586.8518
966                Mauritania 1977    1456688 50.85200   1497.4922
967                Mauritania 1982    1622136 53.59900   1481.1502
968                Mauritania 1987    1841240 56.14500   1421.6036
969                Mauritania 1992    2119465 58.33300   1361.3698
970                Mauritania 1997    2444741 60.43000   1483.1361
971                Mauritania 2002    2828858 62.24700   1579.0195
972                Mauritania 2007    3270065 64.16400   1803.1515
973                 Mauritius 1952     516556 50.98600   1967.9557
974                 Mauritius 1957     609816 58.08900   2034.0380
975                 Mauritius 1962     701016 60.24600   2529.0675
976                 Mauritius 1967     789309 61.55700   2475.3876
977                 Mauritius 1972     851334 62.94400   2575.4842
978                 Mauritius 1977     913025 64.93000   3710.9830
979                 Mauritius 1982     992040 66.71100   3688.0377
980                 Mauritius 1987    1042663 68.74000   4783.5869
981                 Mauritius 1992    1096202 69.74500   6058.2538
982                 Mauritius 1997    1149818 70.73600   7425.7053
983                 Mauritius 2002    1200206 71.95400   9021.8159
984                 Mauritius 2007    1250882 72.80100  10956.9911
985                    Mexico 1952   30144317 50.78900   3478.1255
986                    Mexico 1957   35015548 55.19000   4131.5466
987                    Mexico 1962   41121485 58.29900   4581.6094
988                    Mexico 1967   47995559 60.11000   5754.7339
989                    Mexico 1972   55984294 62.36100   6809.4067
990                    Mexico 1977   63759976 65.03200   7674.9291
991                    Mexico 1982   71640904 67.40500   9611.1475
992                    Mexico 1987   80122492 69.49800   8688.1560
993                    Mexico 1992   88111030 71.45500   9472.3843
994                    Mexico 1997   95895146 73.67000   9767.2975
995                    Mexico 2002  102479927 74.90200  10742.4405
996                    Mexico 2007  108700891 76.19500  11977.5750
997                  Mongolia 1952     800663 42.24400    786.5669
998                  Mongolia 1957     882134 45.24800    912.6626
999                  Mongolia 1962    1010280 48.25100   1056.3540
1000                 Mongolia 1967    1149500 51.25300   1226.0411
1001                 Mongolia 1972    1320500 53.75400   1421.7420
1002                 Mongolia 1977    1528000 55.49100   1647.5117
1003                 Mongolia 1982    1756032 57.48900   2000.6031
1004                 Mongolia 1987    2015133 60.22200   2338.0083
1005                 Mongolia 1992    2312802 61.27100   1785.4020
1006                 Mongolia 1997    2494803 63.62500   1902.2521
1007                 Mongolia 2002    2674234 65.03300   2140.7393
1008                 Mongolia 2007    2874127 66.80300   3095.7723
1009               Montenegro 1952     413834 59.16400   2647.5856
1010               Montenegro 1957     442829 61.44800   3682.2599
1011               Montenegro 1962     474528 63.72800   4649.5938
1012               Montenegro 1967     501035 67.17800   5907.8509
1013               Montenegro 1972     527678 70.63600   7778.4140
1014               Montenegro 1977     560073 73.06600   9595.9299
1015               Montenegro 1982     562548 74.10100  11222.5876
1016               Montenegro 1987     569473 74.86500  11732.5102
1017               Montenegro 1992     621621 75.43500   7003.3390
1018               Montenegro 1997     692651 75.44500   6465.6133
1019               Montenegro 2002     720230 73.98100   6557.1943
1020               Montenegro 2007     684736 74.54300   9253.8961
1021                  Morocco 1952    9939217 42.87300   1688.2036
1022                  Morocco 1957   11406350 45.42300   1642.0023
1023                  Morocco 1962   13056604 47.92400   1566.3535
1024                  Morocco 1967   14770296 50.33500   1711.0448
1025                  Morocco 1972   16660670 52.86200   1930.1950
1026                  Morocco 1977   18396941 55.73000   2370.6200
1027                  Morocco 1982   20198730 59.65000   2702.6204
1028                  Morocco 1987   22987397 62.67700   2755.0470
1029                  Morocco 1992   25798239 65.39300   2948.0473
1030                  Morocco 1997   28529501 67.66000   2982.1019
1031                  Morocco 2002   31167783 69.61500   3258.4956
1032                  Morocco 2007   33757175 71.16400   3820.1752
1033               Mozambique 1952    6446316 31.28600    468.5260
1034               Mozambique 1957    7038035 33.77900    495.5868
1035               Mozambique 1962    7788944 36.16100    556.6864
1036               Mozambique 1967    8680909 38.11300    566.6692
1037               Mozambique 1972    9809596 40.32800    724.9178
1038               Mozambique 1977   11127868 42.49500    502.3197
1039               Mozambique 1982   12587223 42.79500    462.2114
1040               Mozambique 1987   12891952 42.86100    389.8762
1041               Mozambique 1992   13160731 44.28400    410.8968
1042               Mozambique 1997   16603334 46.34400    472.3461
1043               Mozambique 2002   18473780 44.02600    633.6179
1044               Mozambique 2007   19951656 42.08200    823.6856
1045                  Myanmar 1952   20092996 36.31900    331.0000
1046                  Myanmar 1957   21731844 41.90500    350.0000
1047                  Myanmar 1962   23634436 45.10800    388.0000
1048                  Myanmar 1967   25870271 49.37900    349.0000
1049                  Myanmar 1972   28466390 53.07000    357.0000
1050                  Myanmar 1977   31528087 56.05900    371.0000
1051                  Myanmar 1982   34680442 58.05600    424.0000
1052                  Myanmar 1987   38028578 58.33900    385.0000
1053                  Myanmar 1992   40546538 59.32000    347.0000
1054                  Myanmar 1997   43247867 60.32800    415.0000
1055                  Myanmar 2002   45598081 59.90800    611.0000
1056                  Myanmar 2007   47761980 62.06900    944.0000
1057                  Namibia 1952     485831 41.72500   2423.7804
1058                  Namibia 1957     548080 45.22600   2621.4481
1059                  Namibia 1962     621392 48.38600   3173.2156
1060                  Namibia 1967     706640 51.15900   3793.6948
1061                  Namibia 1972     821782 53.86700   3746.0809
1062                  Namibia 1977     977026 56.43700   3876.4860
1063                  Namibia 1982    1099010 58.96800   4191.1005
1064                  Namibia 1987    1278184 60.83500   3693.7313
1065                  Namibia 1992    1554253 61.99900   3804.5380
1066                  Namibia 1997    1774766 58.90900   3899.5243
1067                  Namibia 2002    1972153 51.47900   4072.3248
1068                  Namibia 2007    2055080 52.90600   4811.0604
1069                    Nepal 1952    9182536 36.15700    545.8657
1070                    Nepal 1957    9682338 37.68600    597.9364
1071                    Nepal 1962   10332057 39.39300    652.3969
1072                    Nepal 1967   11261690 41.47200    676.4422
1073                    Nepal 1972   12412593 43.97100    674.7881
1074                    Nepal 1977   13933198 46.74800    694.1124
1075                    Nepal 1982   15796314 49.59400    718.3731
1076                    Nepal 1987   17917180 52.53700    775.6325
1077                    Nepal 1992   20326209 55.72700    897.7404
1078                    Nepal 1997   23001113 59.42600   1010.8921
1079                    Nepal 2002   25873917 61.34000   1057.2063
1080                    Nepal 2007   28901790 63.78500   1091.3598
1081              Netherlands 1952   10381988 72.13000   8941.5719
1082              Netherlands 1957   11026383 72.99000  11276.1934
1083              Netherlands 1962   11805689 73.23000  12790.8496
1084              Netherlands 1967   12596822 73.82000  15363.2514
1085              Netherlands 1972   13329874 73.75000  18794.7457
1086              Netherlands 1977   13852989 75.24000  21209.0592
1087              Netherlands 1982   14310401 76.05000  21399.4605
1088              Netherlands 1987   14665278 76.83000  23651.3236
1089              Netherlands 1992   15174244 77.42000  26790.9496
1090              Netherlands 1997   15604464 78.03000  30246.1306
1091              Netherlands 2002   16122830 78.53000  33724.7578
1092              Netherlands 2007   16570613 79.76200  36797.9333
1093              New Zealand 1952    1994794 69.39000  10556.5757
1094              New Zealand 1957    2229407 70.26000  12247.3953
1095              New Zealand 1962    2488550 71.24000  13175.6780
1096              New Zealand 1967    2728150 71.52000  14463.9189
1097              New Zealand 1972    2929100 71.89000  16046.0373
1098              New Zealand 1977    3164900 72.22000  16233.7177
1099              New Zealand 1982    3210650 73.84000  17632.4104
1100              New Zealand 1987    3317166 74.32000  19007.1913
1101              New Zealand 1992    3437674 76.33000  18363.3249
1102              New Zealand 1997    3676187 77.55000  21050.4138
1103              New Zealand 2002    3908037 79.11000  23189.8014
1104              New Zealand 2007    4115771 80.20400  25185.0091
1105                Nicaragua 1952    1165790 42.31400   3112.3639
1106                Nicaragua 1957    1358828 45.43200   3457.4159
1107                Nicaragua 1962    1590597 48.63200   3634.3644
1108                Nicaragua 1967    1865490 51.88400   4643.3935
1109                Nicaragua 1972    2182908 55.15100   4688.5933
1110                Nicaragua 1977    2554598 57.47000   5486.3711
1111                Nicaragua 1982    2979423 59.29800   3470.3382
1112                Nicaragua 1987    3344353 62.00800   2955.9844
1113                Nicaragua 1992    4017939 65.84300   2170.1517
1114                Nicaragua 1997    4609572 68.42600   2253.0230
1115                Nicaragua 2002    5146848 70.83600   2474.5488
1116                Nicaragua 2007    5675356 72.89900   2749.3210
1117                    Niger 1952    3379468 37.44400    761.8794
1118                    Niger 1957    3692184 38.59800    835.5234
1119                    Niger 1962    4076008 39.48700    997.7661
1120                    Niger 1967    4534062 40.11800   1054.3849
1121                    Niger 1972    5060262 40.54600    954.2092
1122                    Niger 1977    5682086 41.29100    808.8971
1123                    Niger 1982    6437188 42.59800    909.7221
1124                    Niger 1987    7332638 44.55500    668.3000
1125                    Niger 1992    8392818 47.39100    581.1827
1126                    Niger 1997    9666252 51.31300    580.3052
1127                    Niger 2002   11140655 54.49600    601.0745
1128                    Niger 2007   12894865 56.86700    619.6769
1129                  Nigeria 1952   33119096 36.32400   1077.2819
1130                  Nigeria 1957   37173340 37.80200   1100.5926
1131                  Nigeria 1962   41871351 39.36000   1150.9275
1132                  Nigeria 1967   47287752 41.04000   1014.5141
1133                  Nigeria 1972   53740085 42.82100   1698.3888
1134                  Nigeria 1977   62209173 44.51400   1981.9518
1135                  Nigeria 1982   73039376 45.82600   1576.9738
1136                  Nigeria 1987   81551520 46.88600   1385.0296
1137                  Nigeria 1992   93364244 47.47200   1619.8482
1138                  Nigeria 1997  106207839 47.46400   1624.9413
1139                  Nigeria 2002  119901274 46.60800   1615.2864
1140                  Nigeria 2007  135031164 46.85900   2013.9773
1141                   Norway 1952    3327728 72.67000  10095.4217
1142                   Norway 1957    3491938 73.44000  11653.9730
1143                   Norway 1962    3638919 73.47000  13450.4015
1144                   Norway 1967    3786019 74.08000  16361.8765
1145                   Norway 1972    3933004 74.34000  18965.0555
1146                   Norway 1977    4043205 75.37000  23311.3494
1147                   Norway 1982    4114787 75.97000  26298.6353
1148                   Norway 1987    4186147 75.89000  31540.9748
1149                   Norway 1992    4286357 77.32000  33965.6611
1150                   Norway 1997    4405672 78.32000  41283.1643
1151                   Norway 2002    4535591 79.05000  44683.9753
1152                   Norway 2007    4627926 80.19600  49357.1902
1153                     Oman 1952     507833 37.57800   1828.2303
1154                     Oman 1957     561977 40.08000   2242.7466
1155                     Oman 1962     628164 43.16500   2924.6381
1156                     Oman 1967     714775 46.98800   4720.9427
1157                     Oman 1972     829050 52.14300  10618.0385
1158                     Oman 1977    1004533 57.36700  11848.3439
1159                     Oman 1982    1301048 62.72800  12954.7910
1160                     Oman 1987    1593882 67.73400  18115.2231
1161                     Oman 1992    1915208 71.19700  18616.7069
1162                     Oman 1997    2283635 72.49900  19702.0558
1163                     Oman 2002    2713462 74.19300  19774.8369
1164                     Oman 2007    3204897 75.64000  22316.1929
1165                 Pakistan 1952   41346560 43.43600    684.5971
1166                 Pakistan 1957   46679944 45.55700    747.0835
1167                 Pakistan 1962   53100671 47.67000    803.3427
1168                 Pakistan 1967   60641899 49.80000    942.4083
1169                 Pakistan 1972   69325921 51.92900   1049.9390
1170                 Pakistan 1977   78152686 54.04300   1175.9212
1171                 Pakistan 1982   91462088 56.15800   1443.4298
1172                 Pakistan 1987  105186881 58.24500   1704.6866
1173                 Pakistan 1992  120065004 60.83800   1971.8295
1174                 Pakistan 1997  135564834 61.81800   2049.3505
1175                 Pakistan 2002  153403524 63.61000   2092.7124
1176                 Pakistan 2007  169270617 65.48300   2605.9476
1177                   Panama 1952     940080 55.19100   2480.3803
1178                   Panama 1957    1063506 59.20100   2961.8009
1179                   Panama 1962    1215725 61.81700   3536.5403
1180                   Panama 1967    1405486 64.07100   4421.0091
1181                   Panama 1972    1616384 66.21600   5364.2497
1182                   Panama 1977    1839782 68.68100   5351.9121
1183                   Panama 1982    2036305 70.47200   7009.6016
1184                   Panama 1987    2253639 71.52300   7034.7792
1185                   Panama 1992    2484997 72.46200   6618.7431
1186                   Panama 1997    2734531 73.73800   7113.6923
1187                   Panama 2002    2990875 74.71200   7356.0319
1188                   Panama 2007    3242173 75.53700   9809.1856
1189                 Paraguay 1952    1555876 62.64900   1952.3087
1190                 Paraguay 1957    1770902 63.19600   2046.1547
1191                 Paraguay 1962    2009813 64.36100   2148.0271
1192                 Paraguay 1967    2287985 64.95100   2299.3763
1193                 Paraguay 1972    2614104 65.81500   2523.3380
1194                 Paraguay 1977    2984494 66.35300   3248.3733
1195                 Paraguay 1982    3366439 66.87400   4258.5036
1196                 Paraguay 1987    3886512 67.37800   3998.8757
1197                 Paraguay 1992    4483945 68.22500   4196.4111
1198                 Paraguay 1997    5154123 69.40000   4247.4003
1199                 Paraguay 2002    5884491 70.75500   3783.6742
1200                 Paraguay 2007    6667147 71.75200   4172.8385
1201                     Peru 1952    8025700 43.90200   3758.5234
1202                     Peru 1957    9146100 46.26300   4245.2567
1203                     Peru 1962   10516500 49.09600   4957.0380
1204                     Peru 1967   12132200 51.44500   5788.0933
1205                     Peru 1972   13954700 55.44800   5937.8273
1206                     Peru 1977   15990099 58.44700   6281.2909
1207                     Peru 1982   18125129 61.40600   6434.5018
1208                     Peru 1987   20195924 64.13400   6360.9434
1209                     Peru 1992   22430449 66.45800   4446.3809
1210                     Peru 1997   24748122 68.38600   5838.3477
1211                     Peru 2002   26769436 69.90600   5909.0201
1212                     Peru 2007   28674757 71.42100   7408.9056
1213              Philippines 1952   22438691 47.75200   1272.8810
1214              Philippines 1957   26072194 51.33400   1547.9448
1215              Philippines 1962   30325264 54.75700   1649.5522
1216              Philippines 1967   35356600 56.39300   1814.1274
1217              Philippines 1972   40850141 58.06500   1989.3741
1218              Philippines 1977   46850962 60.06000   2373.2043
1219              Philippines 1982   53456774 62.08200   2603.2738
1220              Philippines 1987   60017788 64.15100   2189.6350
1221              Philippines 1992   67185766 66.45800   2279.3240
1222              Philippines 1997   75012988 68.56400   2536.5349
1223              Philippines 2002   82995088 70.30300   2650.9211
1224              Philippines 2007   91077287 71.68800   3190.4810
1225                   Poland 1952   25730551 61.31000   4029.3297
1226                   Poland 1957   28235346 65.77000   4734.2530
1227                   Poland 1962   30329617 67.64000   5338.7521
1228                   Poland 1967   31785378 69.61000   6557.1528
1229                   Poland 1972   33039545 70.85000   8006.5070
1230                   Poland 1977   34621254 70.67000   9508.1415
1231                   Poland 1982   36227381 71.32000   8451.5310
1232                   Poland 1987   37740710 70.98000   9082.3512
1233                   Poland 1992   38370697 70.99000   7738.8812
1234                   Poland 1997   38654957 72.75000  10159.5837
1235                   Poland 2002   38625976 74.67000  12002.2391
1236                   Poland 2007   38518241 75.56300  15389.9247
1237                 Portugal 1952    8526050 59.82000   3068.3199
1238                 Portugal 1957    8817650 61.51000   3774.5717
1239                 Portugal 1962    9019800 64.39000   4727.9549
1240                 Portugal 1967    9103000 66.60000   6361.5180
1241                 Portugal 1972    8970450 69.26000   9022.2474
1242                 Portugal 1977    9662600 70.41000  10172.4857
1243                 Portugal 1982    9859650 72.77000  11753.8429
1244                 Portugal 1987    9915289 74.06000  13039.3088
1245                 Portugal 1992    9927680 74.86000  16207.2666
1246                 Portugal 1997   10156415 75.97000  17641.0316
1247                 Portugal 2002   10433867 77.29000  19970.9079
1248                 Portugal 2007   10642836 78.09800  20509.6478
1249              Puerto Rico 1952    2227000 64.28000   3081.9598
1250              Puerto Rico 1957    2260000 68.54000   3907.1562
1251              Puerto Rico 1962    2448046 69.62000   5108.3446
1252              Puerto Rico 1967    2648961 71.10000   6929.2777
1253              Puerto Rico 1972    2847132 72.16000   9123.0417
1254              Puerto Rico 1977    3080828 73.44000   9770.5249
1255              Puerto Rico 1982    3279001 73.75000  10330.9891
1256              Puerto Rico 1987    3444468 74.63000  12281.3419
1257              Puerto Rico 1992    3585176 73.91100  14641.5871
1258              Puerto Rico 1997    3759430 74.91700  16999.4333
1259              Puerto Rico 2002    3859606 77.77800  18855.6062
1260              Puerto Rico 2007    3942491 78.74600  19328.7090
1261                  Reunion 1952     257700 52.72400   2718.8853
1262                  Reunion 1957     308700 55.09000   2769.4518
1263                  Reunion 1962     358900 57.66600   3173.7233
1264                  Reunion 1967     414024 60.54200   4021.1757
1265                  Reunion 1972     461633 64.27400   5047.6586
1266                  Reunion 1977     492095 67.06400   4319.8041
1267                  Reunion 1982     517810 69.88500   5267.2194
1268                  Reunion 1987     562035 71.91300   5303.3775
1269                  Reunion 1992     622191 73.61500   6101.2558
1270                  Reunion 1997     684810 74.77200   6071.9414
1271                  Reunion 2002     743981 75.74400   6316.1652
1272                  Reunion 2007     798094 76.44200   7670.1226
1273                  Romania 1952   16630000 61.05000   3144.6132
1274                  Romania 1957   17829327 64.10000   3943.3702
1275                  Romania 1962   18680721 66.80000   4734.9976
1276                  Romania 1967   19284814 66.80000   6470.8665
1277                  Romania 1972   20662648 69.21000   8011.4144
1278                  Romania 1977   21658597 69.46000   9356.3972
1279                  Romania 1982   22356726 69.66000   9605.3141
1280                  Romania 1987   22686371 69.53000   9696.2733
1281                  Romania 1992   22797027 69.36000   6598.4099
1282                  Romania 1997   22562458 69.72000   7346.5476
1283                  Romania 2002   22404337 71.32200   7885.3601
1284                  Romania 2007   22276056 72.47600  10808.4756
1285                   Rwanda 1952    2534927 40.00000    493.3239
1286                   Rwanda 1957    2822082 41.50000    540.2894
1287                   Rwanda 1962    3051242 43.00000    597.4731
1288                   Rwanda 1967    3451079 44.10000    510.9637
1289                   Rwanda 1972    3992121 44.60000    590.5807
1290                   Rwanda 1977    4657072 45.00000    670.0806
1291                   Rwanda 1982    5507565 46.21800    881.5706
1292                   Rwanda 1987    6349365 44.02000    847.9912
1293                   Rwanda 1992    7290203 23.59900    737.0686
1294                   Rwanda 1997    7212583 36.08700    589.9445
1295                   Rwanda 2002    7852401 43.41300    785.6538
1296                   Rwanda 2007    8860588 46.24200    863.0885
1297    Sao Tome and Principe 1952      60011 46.47100    879.5836
1298    Sao Tome and Principe 1957      61325 48.94500    860.7369
1299    Sao Tome and Principe 1962      65345 51.89300   1071.5511
1300    Sao Tome and Principe 1967      70787 54.42500   1384.8406
1301    Sao Tome and Principe 1972      76595 56.48000   1532.9853
1302    Sao Tome and Principe 1977      86796 58.55000   1737.5617
1303    Sao Tome and Principe 1982      98593 60.35100   1890.2181
1304    Sao Tome and Principe 1987     110812 61.72800   1516.5255
1305    Sao Tome and Principe 1992     125911 62.74200   1428.7778
1306    Sao Tome and Principe 1997     145608 63.30600   1339.0760
1307    Sao Tome and Principe 2002     170372 64.33700   1353.0924
1308    Sao Tome and Principe 2007     199579 65.52800   1598.4351
1309             Saudi Arabia 1952    4005677 39.87500   6459.5548
1310             Saudi Arabia 1957    4419650 42.86800   8157.5912
1311             Saudi Arabia 1962    4943029 45.91400  11626.4197
1312             Saudi Arabia 1967    5618198 49.90100  16903.0489
1313             Saudi Arabia 1972    6472756 53.88600  24837.4287
1314             Saudi Arabia 1977    8128505 58.69000  34167.7626
1315             Saudi Arabia 1982   11254672 63.01200  33693.1753
1316             Saudi Arabia 1987   14619745 66.29500  21198.2614
1317             Saudi Arabia 1992   16945857 68.76800  24841.6178
1318             Saudi Arabia 1997   21229759 70.53300  20586.6902
1319             Saudi Arabia 2002   24501530 71.62600  19014.5412
1320             Saudi Arabia 2007   27601038 72.77700  21654.8319
1321                  Senegal 1952    2755589 37.27800   1450.3570
1322                  Senegal 1957    3054547 39.32900   1567.6530
1323                  Senegal 1962    3430243 41.45400   1654.9887
1324                  Senegal 1967    3965841 43.56300   1612.4046
1325                  Senegal 1972    4588696 45.81500   1597.7121
1326                  Senegal 1977    5260855 48.87900   1561.7691
1327                  Senegal 1982    6147783 52.37900   1518.4800
1328                  Senegal 1987    7171347 55.76900   1441.7207
1329                  Senegal 1992    8307920 58.19600   1367.8994
1330                  Senegal 1997    9535314 60.18700   1392.3683
1331                  Senegal 2002   10870037 61.60000   1519.6353
1332                  Senegal 2007   12267493 63.06200   1712.4721
1333                   Serbia 1952    6860147 57.99600   3581.4594
1334                   Serbia 1957    7271135 61.68500   4981.0909
1335                   Serbia 1962    7616060 64.53100   6289.6292
1336                   Serbia 1967    7971222 66.91400   7991.7071
1337                   Serbia 1972    8313288 68.70000  10522.0675
1338                   Serbia 1977    8686367 70.30000  12980.6696
1339                   Serbia 1982    9032824 70.16200  15181.0927
1340                   Serbia 1987    9230783 71.21800  15870.8785
1341                   Serbia 1992    9826397 71.65900   9325.0682
1342                   Serbia 1997   10336594 72.23200   7914.3203
1343                   Serbia 2002   10111559 73.21300   7236.0753
1344                   Serbia 2007   10150265 74.00200   9786.5347
1345             Sierra Leone 1952    2143249 30.33100    879.7877
1346             Sierra Leone 1957    2295678 31.57000   1004.4844
1347             Sierra Leone 1962    2467895 32.76700   1116.6399
1348             Sierra Leone 1967    2662190 34.11300   1206.0435
1349             Sierra Leone 1972    2879013 35.40000   1353.7598
1350             Sierra Leone 1977    3140897 36.78800   1348.2852
1351             Sierra Leone 1982    3464522 38.44500   1465.0108
1352             Sierra Leone 1987    3868905 40.00600   1294.4478
1353             Sierra Leone 1992    4260884 38.33300   1068.6963
1354             Sierra Leone 1997    4578212 39.89700    574.6482
1355             Sierra Leone 2002    5359092 41.01200    699.4897
1356             Sierra Leone 2007    6144562 42.56800    862.5408
1357                Singapore 1952    1127000 60.39600   2315.1382
1358                Singapore 1957    1445929 63.17900   2843.1044
1359                Singapore 1962    1750200 65.79800   3674.7356
1360                Singapore 1967    1977600 67.94600   4977.4185
1361                Singapore 1972    2152400 69.52100   8597.7562
1362                Singapore 1977    2325300 70.79500  11210.0895
1363                Singapore 1982    2651869 71.76000  15169.1611
1364                Singapore 1987    2794552 73.56000  18861.5308
1365                Singapore 1992    3235865 75.78800  24769.8912
1366                Singapore 1997    3802309 77.15800  33519.4766
1367                Singapore 2002    4197776 78.77000  36023.1054
1368                Singapore 2007    4553009 79.97200  47143.1796
1369          Slovak Republic 1952    3558137 64.36000   5074.6591
1370          Slovak Republic 1957    3844277 67.45000   6093.2630
1371          Slovak Republic 1962    4237384 70.33000   7481.1076
1372          Slovak Republic 1967    4442238 70.98000   8412.9024
1373          Slovak Republic 1972    4593433 70.35000   9674.1676
1374          Slovak Republic 1977    4827803 70.45000  10922.6640
1375          Slovak Republic 1982    5048043 70.80000  11348.5459
1376          Slovak Republic 1987    5199318 71.08000  12037.2676
1377          Slovak Republic 1992    5302888 71.38000   9498.4677
1378          Slovak Republic 1997    5383010 72.71000  12126.2306
1379          Slovak Republic 2002    5410052 73.80000  13638.7784
1380          Slovak Republic 2007    5447502 74.66300  18678.3144
1381                 Slovenia 1952    1489518 65.57000   4215.0417
1382                 Slovenia 1957    1533070 67.85000   5862.2766
1383                 Slovenia 1962    1582962 69.15000   7402.3034
1384                 Slovenia 1967    1646912 69.18000   9405.4894
1385                 Slovenia 1972    1694510 69.82000  12383.4862
1386                 Slovenia 1977    1746919 70.97000  15277.0302
1387                 Slovenia 1982    1861252 71.06300  17866.7218
1388                 Slovenia 1987    1945870 72.25000  18678.5349
1389                 Slovenia 1992    1999210 73.64000  14214.7168
1390                 Slovenia 1997    2011612 75.13000  17161.1073
1391                 Slovenia 2002    2011497 76.66000  20660.0194
1392                 Slovenia 2007    2009245 77.92600  25768.2576
1393                  Somalia 1952    2526994 32.97800   1135.7498
1394                  Somalia 1957    2780415 34.97700   1258.1474
1395                  Somalia 1962    3080153 36.98100   1369.4883
1396                  Somalia 1967    3428839 38.97700   1284.7332
1397                  Somalia 1972    3840161 40.97300   1254.5761
1398                  Somalia 1977    4353666 41.97400   1450.9925
1399                  Somalia 1982    5828892 42.95500   1176.8070
1400                  Somalia 1987    6921858 44.50100   1093.2450
1401                  Somalia 1992    6099799 39.65800    926.9603
1402                  Somalia 1997    6633514 43.79500    930.5964
1403                  Somalia 2002    7753310 45.93600    882.0818
1404                  Somalia 2007    9118773 48.15900    926.1411
1405             South Africa 1952   14264935 45.00900   4725.2955
1406             South Africa 1957   16151549 47.98500   5487.1042
1407             South Africa 1962   18356657 49.95100   5768.7297
1408             South Africa 1967   20997321 51.92700   7114.4780
1409             South Africa 1972   23935810 53.69600   7765.9626
1410             South Africa 1977   27129932 55.52700   8028.6514
1411             South Africa 1982   31140029 58.16100   8568.2662
1412             South Africa 1987   35933379 60.83400   7825.8234
1413             South Africa 1992   39964159 61.88800   7225.0693
1414             South Africa 1997   42835005 60.23600   7479.1882
1415             South Africa 2002   44433622 53.36500   7710.9464
1416             South Africa 2007   43997828 49.33900   9269.6578
1417                    Spain 1952   28549870 64.94000   3834.0347
1418                    Spain 1957   29841614 66.66000   4564.8024
1419                    Spain 1962   31158061 69.69000   5693.8439
1420                    Spain 1967   32850275 71.44000   7993.5123
1421                    Spain 1972   34513161 73.06000  10638.7513
1422                    Spain 1977   36439000 74.39000  13236.9212
1423                    Spain 1982   37983310 76.30000  13926.1700
1424                    Spain 1987   38880702 76.90000  15764.9831
1425                    Spain 1992   39549438 77.57000  18603.0645
1426                    Spain 1997   39855442 78.77000  20445.2990
1427                    Spain 2002   40152517 79.78000  24835.4717
1428                    Spain 2007   40448191 80.94100  28821.0637
1429                Sri Lanka 1952    7982342 57.59300   1083.5320
1430                Sri Lanka 1957    9128546 61.45600   1072.5466
1431                Sri Lanka 1962   10421936 62.19200   1074.4720
1432                Sri Lanka 1967   11737396 64.26600   1135.5143
1433                Sri Lanka 1972   13016733 65.04200   1213.3955
1434                Sri Lanka 1977   14116836 65.94900   1348.7757
1435                Sri Lanka 1982   15410151 68.75700   1648.0798
1436                Sri Lanka 1987   16495304 69.01100   1876.7668
1437                Sri Lanka 1992   17587060 70.37900   2153.7392
1438                Sri Lanka 1997   18698655 70.45700   2664.4773
1439                Sri Lanka 2002   19576783 70.81500   3015.3788
1440                Sri Lanka 2007   20378239 72.39600   3970.0954
1441                    Sudan 1952    8504667 38.63500   1615.9911
1442                    Sudan 1957    9753392 39.62400   1770.3371
1443                    Sudan 1962   11183227 40.87000   1959.5938
1444                    Sudan 1967   12716129 42.85800   1687.9976
1445                    Sudan 1972   14597019 45.08300   1659.6528
1446                    Sudan 1977   17104986 47.80000   2202.9884
1447                    Sudan 1982   20367053 50.33800   1895.5441
1448                    Sudan 1987   24725960 51.74400   1507.8192
1449                    Sudan 1992   28227588 53.55600   1492.1970
1450                    Sudan 1997   32160729 55.37300   1632.2108
1451                    Sudan 2002   37090298 56.36900   1993.3983
1452                    Sudan 2007   42292929 58.55600   2602.3950
1453                Swaziland 1952     290243 41.40700   1148.3766
1454                Swaziland 1957     326741 43.42400   1244.7084
1455                Swaziland 1962     370006 44.99200   1856.1821
1456                Swaziland 1967     420690 46.63300   2613.1017
1457                Swaziland 1972     480105 49.55200   3364.8366
1458                Swaziland 1977     551425 52.53700   3781.4106
1459                Swaziland 1982     649901 55.56100   3895.3840
1460                Swaziland 1987     779348 57.67800   3984.8398
1461                Swaziland 1992     962344 58.47400   3553.0224
1462                Swaziland 1997    1054486 54.28900   3876.7685
1463                Swaziland 2002    1130269 43.86900   4128.1169
1464                Swaziland 2007    1133066 39.61300   4513.4806
1465                   Sweden 1952    7124673 71.86000   8527.8447
1466                   Sweden 1957    7363802 72.49000   9911.8782
1467                   Sweden 1962    7561588 73.37000  12329.4419
1468                   Sweden 1967    7867931 74.16000  15258.2970
1469                   Sweden 1972    8122293 74.72000  17832.0246
1470                   Sweden 1977    8251648 75.44000  18855.7252
1471                   Sweden 1982    8325260 76.42000  20667.3812
1472                   Sweden 1987    8421403 77.19000  23586.9293
1473                   Sweden 1992    8718867 78.16000  23880.0168
1474                   Sweden 1997    8897619 79.39000  25266.5950
1475                   Sweden 2002    8954175 80.04000  29341.6309
1476                   Sweden 2007    9031088 80.88400  33859.7484
1477              Switzerland 1952    4815000 69.62000  14734.2327
1478              Switzerland 1957    5126000 70.56000  17909.4897
1479              Switzerland 1962    5666000 71.32000  20431.0927
1480              Switzerland 1967    6063000 72.77000  22966.1443
1481              Switzerland 1972    6401400 73.78000  27195.1130
1482              Switzerland 1977    6316424 75.39000  26982.2905
1483              Switzerland 1982    6468126 76.21000  28397.7151
1484              Switzerland 1987    6649942 77.41000  30281.7046
1485              Switzerland 1992    6995447 78.03000  31871.5303
1486              Switzerland 1997    7193761 79.37000  32135.3230
1487              Switzerland 2002    7361757 80.62000  34480.9577
1488              Switzerland 2007    7554661 81.70100  37506.4191
1489                    Syria 1952    3661549 45.88300   1643.4854
1490                    Syria 1957    4149908 48.28400   2117.2349
1491                    Syria 1962    4834621 50.30500   2193.0371
1492                    Syria 1967    5680812 53.65500   1881.9236
1493                    Syria 1972    6701172 57.29600   2571.4230
1494                    Syria 1977    7932503 61.19500   3195.4846
1495                    Syria 1982    9410494 64.59000   3761.8377
1496                    Syria 1987   11242847 66.97400   3116.7743
1497                    Syria 1992   13219062 69.24900   3340.5428
1498                    Syria 1997   15081016 71.52700   4014.2390
1499                    Syria 2002   17155814 73.05300   4090.9253
1500                    Syria 2007   19314747 74.14300   4184.5481
1501                   Taiwan 1952    8550362 58.50000   1206.9479
1502                   Taiwan 1957   10164215 62.40000   1507.8613
1503                   Taiwan 1962   11918938 65.20000   1822.8790
1504                   Taiwan 1967   13648692 67.50000   2643.8587
1505                   Taiwan 1972   15226039 69.39000   4062.5239
1506                   Taiwan 1977   16785196 70.59000   5596.5198
1507                   Taiwan 1982   18501390 72.16000   7426.3548
1508                   Taiwan 1987   19757799 73.40000  11054.5618
1509                   Taiwan 1992   20686918 74.26000  15215.6579
1510                   Taiwan 1997   21628605 75.25000  20206.8210
1511                   Taiwan 2002   22454239 76.99000  23235.4233
1512                   Taiwan 2007   23174294 78.40000  28718.2768
1513                 Tanzania 1952    8322925 41.21500    716.6501
1514                 Tanzania 1957    9452826 42.97400    698.5356
1515                 Tanzania 1962   10863958 44.24600    722.0038
1516                 Tanzania 1967   12607312 45.75700    848.2187
1517                 Tanzania 1972   14706593 47.62000    915.9851
1518                 Tanzania 1977   17129565 49.91900    962.4923
1519                 Tanzania 1982   19844382 50.60800    874.2426
1520                 Tanzania 1987   23040630 51.53500    831.8221
1521                 Tanzania 1992   26605473 50.44000    825.6825
1522                 Tanzania 1997   30686889 48.46600    789.1862
1523                 Tanzania 2002   34593779 49.65100    899.0742
1524                 Tanzania 2007   38139640 52.51700   1107.4822
1525                 Thailand 1952   21289402 50.84800    757.7974
1526                 Thailand 1957   25041917 53.63000    793.5774
1527                 Thailand 1962   29263397 56.06100   1002.1992
1528                 Thailand 1967   34024249 58.28500   1295.4607
1529                 Thailand 1972   39276153 60.40500   1524.3589
1530                 Thailand 1977   44148285 62.49400   1961.2246
1531                 Thailand 1982   48827160 64.59700   2393.2198
1532                 Thailand 1987   52910342 66.08400   2982.6538
1533                 Thailand 1992   56667095 67.29800   4616.8965
1534                 Thailand 1997   60216677 67.52100   5852.6255
1535                 Thailand 2002   62806748 68.56400   5913.1875
1536                 Thailand 2007   65068149 70.61600   7458.3963
1537                     Togo 1952    1219113 38.59600    859.8087
1538                     Togo 1957    1357445 41.20800    925.9083
1539                     Togo 1962    1528098 43.92200   1067.5348
1540                     Togo 1967    1735550 46.76900   1477.5968
1541                     Togo 1972    2056351 49.75900   1649.6602
1542                     Togo 1977    2308582 52.88700   1532.7770
1543                     Togo 1982    2644765 55.47100   1344.5780
1544                     Togo 1987    3154264 56.94100   1202.2014
1545                     Togo 1992    3747553 58.06100   1034.2989
1546                     Togo 1997    4320890 58.39000    982.2869
1547                     Togo 2002    4977378 57.56100    886.2206
1548                     Togo 2007    5701579 58.42000    882.9699
1549      Trinidad and Tobago 1952     662850 59.10000   3023.2719
1550      Trinidad and Tobago 1957     764900 61.80000   4100.3934
1551      Trinidad and Tobago 1962     887498 64.90000   4997.5240
1552      Trinidad and Tobago 1967     960155 65.40000   5621.3685
1553      Trinidad and Tobago 1972     975199 65.90000   6619.5514
1554      Trinidad and Tobago 1977    1039009 68.30000   7899.5542
1555      Trinidad and Tobago 1982    1116479 68.83200   9119.5286
1556      Trinidad and Tobago 1987    1191336 69.58200   7388.5978
1557      Trinidad and Tobago 1992    1183669 69.86200   7370.9909
1558      Trinidad and Tobago 1997    1138101 69.46500   8792.5731
1559      Trinidad and Tobago 2002    1101832 68.97600  11460.6002
1560      Trinidad and Tobago 2007    1056608 69.81900  18008.5092
1561                  Tunisia 1952    3647735 44.60000   1468.4756
1562                  Tunisia 1957    3950849 47.10000   1395.2325
1563                  Tunisia 1962    4286552 49.57900   1660.3032
1564                  Tunisia 1967    4786986 52.05300   1932.3602
1565                  Tunisia 1972    5303507 55.60200   2753.2860
1566                  Tunisia 1977    6005061 59.83700   3120.8768
1567                  Tunisia 1982    6734098 64.04800   3560.2332
1568                  Tunisia 1987    7724976 66.89400   3810.4193
1569                  Tunisia 1992    8523077 70.00100   4332.7202
1570                  Tunisia 1997    9231669 71.97300   4876.7986
1571                  Tunisia 2002    9770575 73.04200   5722.8957
1572                  Tunisia 2007   10276158 73.92300   7092.9230
1573                   Turkey 1952   22235677 43.58500   1969.1010
1574                   Turkey 1957   25670939 48.07900   2218.7543
1575                   Turkey 1962   29788695 52.09800   2322.8699
1576                   Turkey 1967   33411317 54.33600   2826.3564
1577                   Turkey 1972   37492953 57.00500   3450.6964
1578                   Turkey 1977   42404033 59.50700   4269.1223
1579                   Turkey 1982   47328791 61.03600   4241.3563
1580                   Turkey 1987   52881328 63.10800   5089.0437
1581                   Turkey 1992   58179144 66.14600   5678.3483
1582                   Turkey 1997   63047647 68.83500   6601.4299
1583                   Turkey 2002   67308928 70.84500   6508.0857
1584                   Turkey 2007   71158647 71.77700   8458.2764
1585                   Uganda 1952    5824797 39.97800    734.7535
1586                   Uganda 1957    6675501 42.57100    774.3711
1587                   Uganda 1962    7688797 45.34400    767.2717
1588                   Uganda 1967    8900294 48.05100    908.9185
1589                   Uganda 1972   10190285 51.01600    950.7359
1590                   Uganda 1977   11457758 50.35000    843.7331
1591                   Uganda 1982   12939400 49.84900    682.2662
1592                   Uganda 1987   15283050 51.50900    617.7244
1593                   Uganda 1992   18252190 48.82500    644.1708
1594                   Uganda 1997   21210254 44.57800    816.5591
1595                   Uganda 2002   24739869 47.81300    927.7210
1596                   Uganda 2007   29170398 51.54200   1056.3801
1597           United Kingdom 1952   50430000 69.18000   9979.5085
1598           United Kingdom 1957   51430000 70.42000  11283.1779
1599           United Kingdom 1962   53292000 70.76000  12477.1771
1600           United Kingdom 1967   54959000 71.36000  14142.8509
1601           United Kingdom 1972   56079000 72.01000  15895.1164
1602           United Kingdom 1977   56179000 72.76000  17428.7485
1603           United Kingdom 1982   56339704 74.04000  18232.4245
1604           United Kingdom 1987   56981620 75.00700  21664.7877
1605           United Kingdom 1992   57866349 76.42000  22705.0925
1606           United Kingdom 1997   58808266 77.21800  26074.5314
1607           United Kingdom 2002   59912431 78.47100  29478.9992
1608           United Kingdom 2007   60776238 79.42500  33203.2613
1609            United States 1952  157553000 68.44000  13990.4821
1610            United States 1957  171984000 69.49000  14847.1271
1611            United States 1962  186538000 70.21000  16173.1459
1612            United States 1967  198712000 70.76000  19530.3656
1613            United States 1972  209896000 71.34000  21806.0359
1614            United States 1977  220239000 73.38000  24072.6321
1615            United States 1982  232187835 74.65000  25009.5591
1616            United States 1987  242803533 75.02000  29884.3504
1617            United States 1992  256894189 76.09000  32003.9322
1618            United States 1997  272911760 76.81000  35767.4330
1619            United States 2002  287675526 77.31000  39097.0995
1620            United States 2007  301139947 78.24200  42951.6531
1621                  Uruguay 1952    2252965 66.07100   5716.7667
1622                  Uruguay 1957    2424959 67.04400   6150.7730
1623                  Uruguay 1962    2598466 68.25300   5603.3577
1624                  Uruguay 1967    2748579 68.46800   5444.6196
1625                  Uruguay 1972    2829526 68.67300   5703.4089
1626                  Uruguay 1977    2873520 69.48100   6504.3397
1627                  Uruguay 1982    2953997 70.80500   6920.2231
1628                  Uruguay 1987    3045153 71.91800   7452.3990
1629                  Uruguay 1992    3149262 72.75200   8137.0048
1630                  Uruguay 1997    3262838 74.22300   9230.2407
1631                  Uruguay 2002    3363085 75.30700   7727.0020
1632                  Uruguay 2007    3447496 76.38400  10611.4630
1633                Venezuela 1952    5439568 55.08800   7689.7998
1634                Venezuela 1957    6702668 57.90700   9802.4665
1635                Venezuela 1962    8143375 60.77000   8422.9742
1636                Venezuela 1967    9709552 63.47900   9541.4742
1637                Venezuela 1972   11515649 65.71200  10505.2597
1638                Venezuela 1977   13503563 67.45600  13143.9510
1639                Venezuela 1982   15620766 68.55700  11152.4101
1640                Venezuela 1987   17910182 70.19000   9883.5846
1641                Venezuela 1992   20265563 71.15000  10733.9263
1642                Venezuela 1997   22374398 72.14600  10165.4952
1643                Venezuela 2002   24287670 72.76600   8605.0478
1644                Venezuela 2007   26084662 73.74700  11415.8057
1645                  Vietnam 1952   26246839 40.41200    605.0665
1646                  Vietnam 1957   28998543 42.88700    676.2854
1647                  Vietnam 1962   33796140 45.36300    772.0492
1648                  Vietnam 1967   39463910 47.83800    637.1233
1649                  Vietnam 1972   44655014 50.25400    699.5016
1650                  Vietnam 1977   50533506 55.76400    713.5371
1651                  Vietnam 1982   56142181 58.81600    707.2358
1652                  Vietnam 1987   62826491 62.82000    820.7994
1653                  Vietnam 1992   69940728 67.66200    989.0231
1654                  Vietnam 1997   76048996 70.67200   1385.8968
1655                  Vietnam 2002   80908147 73.01700   1764.4567
1656                  Vietnam 2007   85262356 74.24900   2441.5764
1657       West Bank and Gaza 1952    1030585 43.16000   1515.5923
1658       West Bank and Gaza 1957    1070439 45.67100   1827.0677
1659       West Bank and Gaza 1962    1133134 48.12700   2198.9563
1660       West Bank and Gaza 1967    1142636 51.63100   2649.7150
1661       West Bank and Gaza 1972    1089572 56.53200   3133.4093
1662       West Bank and Gaza 1977    1261091 60.76500   3682.8315
1663       West Bank and Gaza 1982    1425876 64.40600   4336.0321
1664       West Bank and Gaza 1987    1691210 67.04600   5107.1974
1665       West Bank and Gaza 1992    2104779 69.71800   6017.6548
1666       West Bank and Gaza 1997    2826046 71.09600   7110.6676
1667       West Bank and Gaza 2002    3389578 72.37000   4515.4876
1668       West Bank and Gaza 2007    4018332 73.42200   3025.3498
1669               Yemen Rep. 1952    4963829 32.54800    781.7176
1670               Yemen Rep. 1957    5498090 33.97000    804.8305
1671               Yemen Rep. 1962    6120081 35.18000    825.6232
1672               Yemen Rep. 1967    6740785 36.98400    862.4421
1673               Yemen Rep. 1972    7407075 39.84800   1265.0470
1674               Yemen Rep. 1977    8403990 44.17500   1829.7652
1675               Yemen Rep. 1982    9657618 49.11300   1977.5570
1676               Yemen Rep. 1987   11219340 52.92200   1971.7415
1677               Yemen Rep. 1992   13367997 55.59900   1879.4967
1678               Yemen Rep. 1997   15826497 58.02000   2117.4845
1679               Yemen Rep. 2002   18701257 60.30800   2234.8208
1680               Yemen Rep. 2007   22211743 62.69800   2280.7699
1681                   Zambia 1952    2672000 42.03800   1147.3888
1682                   Zambia 1957    3016000 44.07700   1311.9568
1683                   Zambia 1962    3421000 46.02300   1452.7258
1684                   Zambia 1967    3900000 47.76800   1777.0773
1685                   Zambia 1972    4506497 50.10700   1773.4983
1686                   Zambia 1977    5216550 51.38600   1588.6883
1687                   Zambia 1982    6100407 51.82100   1408.6786
1688                   Zambia 1987    7272406 50.82100   1213.3151
1689                   Zambia 1992    8381163 46.10000   1210.8846
1690                   Zambia 1997    9417789 40.23800   1071.3538
1691                   Zambia 2002   10595811 39.19300   1071.6139
1692                   Zambia 2007   11746035 42.38400   1271.2116
1693                 Zimbabwe 1952    3080907 48.45100    406.8841
1694                 Zimbabwe 1957    3646340 50.46900    518.7643
1695                 Zimbabwe 1962    4277736 52.35800    527.2722
1696                 Zimbabwe 1967    4995432 53.99500    569.7951
1697                 Zimbabwe 1972    5861135 55.63500    799.3622
1698                 Zimbabwe 1977    6642107 57.67400    685.5877
1699                 Zimbabwe 1982    7636524 60.36300    788.8550
1700                 Zimbabwe 1987    9216418 62.35100    706.1573
1701                 Zimbabwe 1992   10704340 60.37700    693.4208
1702                 Zimbabwe 1997   11404948 46.80900    792.4500
1703                 Zimbabwe 2002   11926563 39.98900    672.0386
1704                 Zimbabwe 2007   12311143 43.48700    469.7093</code></pre>
</div>
</div>
<p>Note that there are some other packages (e.g.&nbsp;the MASS package) that also have a function called <code>select()</code>. If you happen to load one of those packages after loading the tidyverse package in your session, you may end up with an error that says <code>Error in select(., x) : unused argument (x)</code>. To fix this, you will either need to directly call the <code>select()</code> function from the dplyr package using <code>dplyr::select()</code> or ensure that you load such packages <em>before</em> the tidyverse package (which automatically loads the dplyr package).</p>
</section>
<section id="filter-filter-to-rows-that-satisfy-certain-conditions" class="level2">
<h2 class="anchored" data-anchor-id="filter-filter-to-rows-that-satisfy-certain-conditions"><code>filter</code>: filter to rows that satisfy certain conditions</h2>
<p>Filtering is a very simple way of only keeping rows that satisfy certain conditions. These conditions are always based on logical statements involving variables/columns of the data frame.</p>
<p>For instance, to keep only the rows that have a recorded population of at least 1 billion, you can use a filtering with a logical statement involving the <code>pop</code> variable (again unquoted).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;">filter</span>(pop <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1000000000</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  country year        pop continent lifeExp gdpPercap
1   China 1982 1000281000      Asia  65.525  962.4214
2   China 1987 1084035000      Asia  67.274 1378.9040
3   China 1992 1164970000      Asia  68.690 1655.7842
4   China 1997 1230075000      Asia  70.426 2289.2341
5   China 2002 1280400000      Asia  72.028 3119.2809
6   China 2007 1318683096      Asia  72.961 4959.1149
7   India 2002 1034172547      Asia  62.879 1746.7695
8   India 2007 1110396331      Asia  64.698 2452.2104</code></pre>
</div>
</div>
<p>You can specify multiple filter conditions using a comma (and in this case the filter function will return rows that satisfy <em>all</em> of the conditions specified). Below I filter to rows from 1992 that have a population of at least 100 million in that year.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;">filter</span>(pop <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">100000000</span>, year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1992</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        country year        pop continent lifeExp  gdpPercap
1    Bangladesh 1992  113704579      Asia  56.018   837.8102
2        Brazil 1992  155975974  Americas  67.057  6950.2830
3         China 1992 1164970000      Asia  68.690  1655.7842
4         India 1992  872000000      Asia  60.223  1164.4068
5     Indonesia 1992  184816000      Asia  62.681  2383.1409
6         Japan 1992  124329269      Asia  79.360 26824.8951
7      Pakistan 1992  120065004      Asia  60.838  1971.8295
8 United States 1992  256894189  Americas  76.090 32003.9322</code></pre>
</div>
</div>
</section>
<section id="mutate-add-a-new-variable" class="level2">
<h2 class="anchored" data-anchor-id="mutate-add-a-new-variable"><code>mutate</code>: add a new variable</h2>
<p>Mutating the data frame involves adding a new variable. This new variable is usually a function of existing variables, but it can also be defined based on external objects.</p>
<p>For instance below I add a new variable, <code>gdp</code>, to the gapminder data frame. <code>gdp</code> is equal to <code>gdpPercap</code> multiplied by <code>pop</code>, and then look at the first 6 rows of the data frame using the classic <code>head()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">gdp =</span> gdpPercap <span class="sc" style="color: #5E5E5E;">*</span> pop) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb29-3">  head</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      country year      pop continent lifeExp gdpPercap         gdp
1 Afghanistan 1952  8425333      Asia  28.801  779.4453  6567086330
2 Afghanistan 1957  9240934      Asia  30.332  820.8530  7585448670
3 Afghanistan 1962 10267083      Asia  31.997  853.1007  8758855797
4 Afghanistan 1967 11537966      Asia  34.020  836.1971  9648014150
5 Afghanistan 1972 13079460      Asia  36.088  739.9811  9678553274
6 Afghanistan 1977 14880372      Asia  38.438  786.1134 11697659231</code></pre>
</div>
</div>
<p>Note that I haven’t re-defined the gapminder data frame, so all I have done here is print out the data frame with the additional gdp variable.</p>
<p>If you wanted to be able to use this gdp variable down the line, you would need to re-define the gapminder data frame so that <code>gapminder</code> now corresponds to the version with the <code>gdp</code> variable.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">gapminder <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">gdp =</span> gdpPercap <span class="sc" style="color: #5E5E5E;">*</span> pop)</span></code></pre></div>
</div>
</section>
<section id="arrange-arrange-the-rows-of-the-data-frame-in-order-a-variable" class="level2">
<h2 class="anchored" data-anchor-id="arrange-arrange-the-rows-of-the-data-frame-in-order-a-variable"><code>arrange</code>: arrange the rows of the data frame in order a variable</h2>
<p>The <code>arrange</code> function allows you to easily reorder the rows of the data frame in increasing or decreasing order of one (or more) of the variables of the data frame.</p>
<p>For instance, you could arrange all rows in the data frame in order of increasing life expectancy.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;">arrange</span>(lifeExp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb32-3">  head</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       country year     pop continent lifeExp gdpPercap         gdp
1       Rwanda 1992 7290203    Africa  23.599  737.0686  5373379682
2  Afghanistan 1952 8425333      Asia  28.801  779.4453  6567086330
3       Gambia 1952  284320    Africa  30.000  485.2307   137960781
4       Angola 1952 4232095    Africa  30.015 3520.6103 14899557133
5 Sierra Leone 1952 2143249    Africa  30.331  879.7877  1885604185
6  Afghanistan 1957 9240934      Asia  30.332  820.8530  7585448670</code></pre>
</div>
</div>
<p>To arrange in <em>descending</em> order, you need to wrap the variable name in the <code>desc()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb34-2">  <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(gdpPercap)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb34-3">  head</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  country year     pop continent lifeExp gdpPercap         gdp
1  Kuwait 1957  212846      Asia  58.033 113523.13 24162944745
2  Kuwait 1972  841934      Asia  67.712 109347.87 92063687055
3  Kuwait 1952  160000      Asia  55.565 108382.35 17341176464
4  Kuwait 1962  358266      Asia  60.470  95458.11 34199395868
5  Kuwait 1967  575003      Asia  64.624  80894.88 46514800559
6  Kuwait 1977 1140357      Asia  69.343  59265.48 67583801715</code></pre>
</div>
</div>
<p>Again, if you wanted your data frame to actually be arranged as specified, you would need to re-define the gapminder data frame. But if you only need it for one quick analysis (e.g.&nbsp;creating a summary table), then you don’t need to redefine the data frame.</p>
<p>Below I re-define the gapminder dataset so that the rows are in order of increasing year, and the countries are in alphabetical order within each year (the secondary arrange variable).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb36-2">  <span class="fu" style="color: #4758AB;">arrange</span>(year, country) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb36-3">  head</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      country year      pop continent lifeExp  gdpPercap          gdp
1 Afghanistan 1952  8425333      Asia  28.801   779.4453   6567086330
2     Albania 1952  1282697    Europe  55.230  1601.0561   2053669902
3     Algeria 1952  9279525    Africa  43.077  2449.0082  22725632678
4      Angola 1952  4232095    Africa  30.015  3520.6103  14899557133
5   Argentina 1952 17876956  Americas  62.485  5911.3151 105676319105
6   Australia 1952  8691212   Oceania  69.120 10039.5956  87256254102</code></pre>
</div>
</div>
</section>
<section id="group_by-apply-other-dplyr-functions-separately-within-within-a-group-defined-by-one-or-more-variables" class="level2">
<h2 class="anchored" data-anchor-id="group_by-apply-other-dplyr-functions-separately-within-within-a-group-defined-by-one-or-more-variables"><code>group_by</code>: apply other dplyr functions separately within within a group defined by one or more variables</h2>
<p>The <code>group_by()</code> function can be really useful if you want to apply a function independently within groups of observations (where the groups are specified by a categorical variable in your data frame). Think of <code>group_by()</code> as splitting your data frame into several separate data frames based on the categorical variable you specify. All functions that you apply to the grouped data frame are applied separately to each group until you specify an <code>ungroup()</code> function.</p>
<p>The code below filters the data frame to only the country-years that have life expectancy above the average life expectancy <em>for their continent</em>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb38-2">  <span class="fu" style="color: #4758AB;">group_by</span>(continent) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb38-3">  <span class="fu" style="color: #4758AB;">filter</span>(lifeExp <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">mean</span>(lifeExp)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb38-4">  <span class="fu" style="color: #4758AB;">ungroup</span>() </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 873 × 7
   country  year      pop continent lifeExp gdpPercap           gdp
   &lt;chr&gt;   &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;
 1 Albania  1987  3075321 Europe       72       3739.  11498418358.
 2 Albania  1997  3428038 Europe       73.0     3193.  10945912519.
 3 Albania  2002  3508512 Europe       75.7     4604.  16153932130.
 4 Albania  2007  3600523 Europe       76.4     5937.  21376411360.
 5 Algeria  1967 12760499 Africa       51.4     3247.  41433235247.
 6 Algeria  1972 14760787 Africa       54.5     4183.  61739408943.
 7 Algeria  1977 17152804 Africa       58.0     4910.  84227416174.
 8 Algeria  1982 20033753 Africa       61.4     5745. 115097120653.
 9 Algeria  1987 23254956 Africa       65.8     5681. 132119742845.
10 Algeria  1992 26298373 Africa       67.7     5023. 132102425043.
# … with 863 more rows</code></pre>
</div>
</div>
<p>To check that this does something different than it would without the <code>group_by()</code> (i.e.&nbsp;filtering to the country-years that have life expectancy above the average <em>global</em> life expectancy), compare the distribution of continents from each <code>filter()</code> command using the <code>count()</code> function (another handly dplyr function):</p>
<p>The number of countries from each continent included post-filtering when grouping by continent is:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;">group_by</span>(continent) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb40-3">  <span class="fu" style="color: #4758AB;">filter</span>(lifeExp <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">mean</span>(lifeExp)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb40-4">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb40-5">  <span class="fu" style="color: #4758AB;">count</span>(continent)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 2
  continent     n
  &lt;chr&gt;     &lt;int&gt;
1 Africa      282
2 Americas    176
3 Asia        216
4 Europe      189
5 Oceania      10</code></pre>
</div>
</div>
<p>The number of countries from each continent included post-filtering when <strong>not</strong> grouping by continent is:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;">filter</span>(lifeExp <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">mean</span>(lifeExp)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb42-3">  <span class="fu" style="color: #4758AB;">count</span>(continent)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  continent   n
1    Africa  80
2  Americas 218
3      Asia 224
4    Europe 349
5   Oceania  24</code></pre>
</div>
</div>
<p>Notice that when you <em>don’t</em> group by continent, substantially fewer African countries are included since they tend to have lower life expectencies than the global average.</p>
<p>To combine some of the things you’ve just learnt, the code below first filters to the year 2007, and then splits the data frame into groups by continent and adds a row to each group corresponding to the average life expectancy of all of the countries in that group/continent.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb44-2">  <span class="co" style="color: #5E5E5E;"># first filter to 2007</span></span>
<span id="cb44-3">  <span class="fu" style="color: #4758AB;">filter</span>(year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb44-4">  <span class="co" style="color: #5E5E5E;"># group by continent</span></span>
<span id="cb44-5">  <span class="fu" style="color: #4758AB;">group_by</span>(continent) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb44-6">  <span class="co" style="color: #5E5E5E;"># add a column within each continent corresponding to the average life expectancy</span></span>
<span id="cb44-7">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">continent_lifeExp =</span> <span class="fu" style="color: #4758AB;">mean</span>(lifeExp)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb44-8">  <span class="co" style="color: #5E5E5E;"># ungroup the data frame</span></span>
<span id="cb44-9">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb44-10">  <span class="co" style="color: #5E5E5E;"># only show a few variables</span></span>
<span id="cb44-11">  <span class="fu" style="color: #4758AB;">select</span>(country, continent, lifeExp, continent_lifeExp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb44-12">  <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 4
   country     continent lifeExp continent_lifeExp
   &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;             &lt;dbl&gt;
 1 Afghanistan Asia         43.8              70.7
 2 Albania     Europe       76.4              77.6
 3 Algeria     Africa       72.3              54.8
 4 Angola      Africa       42.7              54.8
 5 Argentina   Americas     75.3              73.6
 6 Australia   Oceania      81.2              80.7
 7 Austria     Europe       79.8              77.6
 8 Bahrain     Asia         75.6              70.7
 9 Bangladesh  Asia         64.1              70.7
10 Belgium     Europe       79.4              77.6</code></pre>
</div>
</div>
<p>Notice that all rows from the same continent have the same value for <code>continent_lifeExp</code>. Note that even though this example defines a single value for each continent, this value is repeated for all rows within the continent.</p>
</section>
<section id="summarisesummarize-define-a-variable-that-is-a-summary-of-other-variables" class="level2">
<h2 class="anchored" data-anchor-id="summarisesummarize-define-a-variable-that-is-a-summary-of-other-variables"><code>summarise</code>/<code>summarize</code>: define a variable that is a summary of other variables</h2>
<p>The <code>summarise()</code> (or <code>summarize()</code>) function aggregates across the rows of the data frame. For instance, you can calculate the average life expectancy, as well as the total GDP.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">mean_lifeExp =</span> <span class="fu" style="color: #4758AB;">mean</span>(lifeExp),</span>
<span id="cb46-3">            <span class="at" style="color: #657422;">total_gdp =</span> <span class="fu" style="color: #4758AB;">sum</span>(gdp))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  mean_lifeExp    total_gdp
1     59.47444 3.183235e+14</code></pre>
</div>
</div>
<p>The summarise function plays very nicely with the <code>group_by()</code> function. For instance, by first grouping by year and then calculating the average life expectancy and total GDP <em>for each year</em>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;">group_by</span>(year) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb48-3">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">mean_lifeExp =</span> <span class="fu" style="color: #4758AB;">mean</span>(lifeExp),</span>
<span id="cb48-4">            <span class="at" style="color: #657422;">total_gdp =</span> <span class="fu" style="color: #4758AB;">sum</span>(gdp)) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 12 × 3
    year mean_lifeExp total_gdp
   &lt;int&gt;        &lt;dbl&gt;     &lt;dbl&gt;
 1  1952         49.1   7.04e12
 2  1957         51.5   8.90e12
 3  1962         53.6   1.10e13
 4  1967         55.7   1.42e13
 5  1972         57.6   1.84e13
 6  1977         59.6   2.23e13
 7  1982         61.5   2.54e13
 8  1987         63.2   3.01e13
 9  1992         64.2   3.45e13
10  1997         65.0   4.10e13
11  2002         65.7   4.73e13
12  2007         67.0   5.81e13</code></pre>
</div>
</div>
<p>Note that since these are summaries of the data frame itself, I just want to print them out, rather than re-defining the <code>gapminder</code> data frame to be equal to these summaries. And since I won’t be using them for anything other than to look at, I don’t need to define them as a variable.</p>
</section>
<section id="more-dplyr-functions" class="level2">
<h2 class="anchored" data-anchor-id="more-dplyr-functions">More dplyr functions</h2>
<p>Other dplyr functions that are incredibly useful include:</p>
<p><code>rename()</code> for renaming variables of the data frame</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb50-2">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">gdp_per_capita =</span> gdpPercap,</span>
<span id="cb50-3">         <span class="at" style="color: #657422;">life_exp =</span> lifeExp) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb50-4">  head</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      country year      pop continent life_exp gdp_per_capita         gdp
1 Afghanistan 1952  8425333      Asia   28.801       779.4453  6567086330
2 Afghanistan 1957  9240934      Asia   30.332       820.8530  7585448670
3 Afghanistan 1962 10267083      Asia   31.997       853.1007  8758855797
4 Afghanistan 1967 11537966      Asia   34.020       836.1971  9648014150
5 Afghanistan 1972 13079460      Asia   36.088       739.9811  9678553274
6 Afghanistan 1977 14880372      Asia   38.438       786.1134 11697659231</code></pre>
</div>
</div>
<p><code>distinct()</code> for extracting the distinct values of a variable</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb52-2">  <span class="fu" style="color: #4758AB;">distinct</span>(continent)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  continent
1      Asia
2    Europe
3    Africa
4  Americas
5   Oceania</code></pre>
</div>
</div>
<p><code>sample_n()</code> and <code>sample_frac()</code> for taking random samples of rows</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb54-2">  <span class="fu" style="color: #4758AB;">sample_n</span>(<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  country year     pop continent lifeExp  gdpPercap        gdp
1 Iceland 2002  288030    Europe   80.50 31163.2020 8975937061
2    Togo 2007 5701579    Africa   58.42   882.9699 5034322889</code></pre>
</div>
</div>
<p><code>count()</code> for counting the number of rows with each value of a categorical variable</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb56-2">  <span class="fu" style="color: #4758AB;">count</span>(continent)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  continent   n
1    Africa 624
2  Americas 300
3      Asia 396
4    Europe 360
5   Oceania  24</code></pre>
</div>
</div>
<p><code>transmute()</code> for doing a mutate and select at the same time: only the variables defined in the mutation are retained.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb58-2">  <span class="fu" style="color: #4758AB;">transmute</span>(<span class="at" style="color: #657422;">gdp =</span> gdpPercap <span class="sc" style="color: #5E5E5E;">*</span> pop) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb58-3">  head</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          gdp
1  6567086330
2  7585448670
3  8758855797
4  9648014150
5  9678553274
6 11697659231</code></pre>
</div>
</div>
<p>Advanced dplyr practitioners will eventually want to learn about <a href="http://www.rebeccabarter.com/blog/2019-01-23_scoped-verbs/"><em>scoped verbs</em></a>.</p>
</section>
</section>
<section id="visualization-ggplot2" class="level1">
<h1>Visualization: ggplot2</h1>
<p align="center">
<img src="https://www.rebeccabarter.com/img/tidyverse/ggplot2.png" alt="ggplot" width="180" height="200">
</p>
<p>The first tidyverse package I ever learnt was ggplot2 (the more popular older sibling of the non-existent ggplot1). Ggplot2 is the data visualization package made by Hadley Wickham, and it is based a set of principles called the <em>layered grammar of graphics</em>. The basic idea is that a ggplot graphic layers geometric objects (circles, lines, etc), themes, and scales ontop of data. The form of the geometric object is defined by a <code>geom_xxx()</code> function and the properties (position, size, colour) of the geometric objects that based on the data variables are specified by the aesthetic (<code>aes()</code>) function (within the <code>geom_xxx()</code> function).</p>
<p>The base layer of any ggplot graph is the empty ggplot layer defined by the <code>ggplot()</code> function, which describes the data frame that the plot will be based on. I haven’t told ggplot what type of geometric object(s) I want yet, nor how the variables should be mapped to the geometric objects, so I just have a blank plot.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-36-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Since you now know about pipes, you could pipe in the data that you want to plot. Piping makes it easy to do intermediate manipulations that you don’t necessarily want to save in the data frame itself, such as only plotting one year’s worth of data</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb61-2">  <span class="fu" style="color: #4758AB;">filter</span>(year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb61-3">  <span class="fu" style="color: #4758AB;">ggplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-37-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<section id="adding-geom-layers" class="level2">
<h2 class="anchored" data-anchor-id="adding-geom-layers">Adding geom layers</h2>
<p>Next, I will add a “geom” layer to our ggplot object.</p>
<p>Layers are added to ggplot objects using <code>+</code>, instead of <code>%&gt;%</code>, since you are not explicitly piping the LHS into each subsequent layer (we are actually adding a layer on top). The error messages have recently been improved to warn you if you are accidentally using a pipe <code>%&gt;%</code> to add layers to ggplot objects (which, once you start piping everything into everything, becomes an easy mistake to make).</p>
<p>Probably the most common geom layer is <code>geom_point</code>. Inside <code>geom_point()</code>, you will specify the aesthetic mappings from the variables to the geometric objects that you want. For instance, if you want to plot a scatterplot with <code>gdpPercap</code> on the x-axis and <code>lifeExp</code> on the y-axis, then you would add a <code>geom_point()</code> geometric layer with relevant aesthetic function: <code>geom_point(aes(x = gdpPercap, y = lifeExp))</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="co" style="color: #5E5E5E;"># describe the base ggplot object and tell it what data we are interested in along with the aesthetic mapping</span></span>
<span id="cb62-2">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb62-3">  <span class="fu" style="color: #4758AB;">filter</span>(year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb62-4">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb62-5">  <span class="co" style="color: #5E5E5E;"># add a points layer on top</span></span>
<span id="cb62-6">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-38-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>We could also add a smoothed trend line layer on top of the points using <code>geom_smooth()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="co" style="color: #5E5E5E;"># describe the base ggplot object and tell it what data we are interested in along with the aesthetic mapping</span></span>
<span id="cb63-2">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb63-3">  <span class="fu" style="color: #4758AB;">filter</span>(year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb63-4">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb63-5">  <span class="co" style="color: #5E5E5E;"># add a points layer on top</span></span>
<span id="cb63-6">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb63-7">  <span class="co" style="color: #5E5E5E;"># add a smoothed LOESS layer</span></span>
<span id="cb63-8">  <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp), <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"loess"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-39-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Note that since the aesthetics for <code>geom_point()</code> and <code>geom_smooth()</code> are the same, you might want to just specify global aesthetics in the <code>ggplot()</code> function, rather than layer-specific aesthetics.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="co" style="color: #5E5E5E;"># describe the base ggplot object and tell it what data we are interested in along with the aesthetic mapping</span></span>
<span id="cb65-2">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb65-3">  <span class="fu" style="color: #4758AB;">filter</span>(year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb65-4">  <span class="co" style="color: #5E5E5E;"># specify global aesthetic mappings</span></span>
<span id="cb65-5">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb65-6">  <span class="co" style="color: #5E5E5E;"># add a points layer on top</span></span>
<span id="cb65-7">  <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb65-8">  <span class="co" style="color: #5E5E5E;"># add a smoothed LOESS layer</span></span>
<span id="cb65-9">  <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"loess"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-40-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>We could also combine a <em>points</em> geom layer with a <em>line</em> geom layer, or any other type of geom layer. Line plots work well for plotting time series, so below we plot the average life expectancy over time using both point and line layers.</p>
<p>Here you can do some clever combinations of dplyr manipulations with ggplot2 by summarising life expectancy by year and piping the results into a ggplot without having to define any intermediate variables.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb67-2">  <span class="co" style="color: #5E5E5E;"># calcualte the average life expectency for each year</span></span>
<span id="cb67-3">  <span class="fu" style="color: #4758AB;">group_by</span>(year) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb67-4">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">avg_lifeExp =</span> <span class="fu" style="color: #4758AB;">mean</span>(lifeExp)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb67-5">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb67-6">  <span class="co" style="color: #5E5E5E;"># specify global aesthetic mappings</span></span>
<span id="cb67-7">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> year, <span class="at" style="color: #657422;">y =</span> avg_lifeExp)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb67-8">  <span class="co" style="color: #5E5E5E;"># add a points layer on top</span></span>
<span id="cb67-9">  <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb67-10">  <span class="co" style="color: #5E5E5E;"># add a line layer on top</span></span>
<span id="cb67-11">  <span class="fu" style="color: #4758AB;">geom_line</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-41-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>If you wanted to have a separate line on our plot for each continent (rather than an aggregated line across all continents), you <strong>don’t</strong> need to add an individual layer for each continent to get the following plot:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output cell-output-stderr">
<pre><code>`summarise()` has grouped output by 'continent'. You can override using the
`.groups` argument.</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-42-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Instead, start by also grouping by <code>continent</code> when you calculate the average life expectency by year.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb69-2">  <span class="fu" style="color: #4758AB;">group_by</span>(continent, year) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb69-3">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">avg_lifeExp =</span> <span class="fu" style="color: #4758AB;">mean</span>(lifeExp))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`summarise()` has grouped output by 'continent'. You can override using the
`.groups` argument.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 60 × 3
# Groups:   continent [5]
   continent  year avg_lifeExp
   &lt;chr&gt;     &lt;int&gt;       &lt;dbl&gt;
 1 Africa     1952        39.1
 2 Africa     1957        41.3
 3 Africa     1962        43.3
 4 Africa     1967        45.3
 5 Africa     1972        47.5
 6 Africa     1977        49.6
 7 Africa     1982        51.6
 8 Africa     1987        53.3
 9 Africa     1992        53.6
10 Africa     1997        53.6
# … with 50 more rows</code></pre>
</div>
</div>
<p>However if you try to use the same code as above to plot a line on the country-year grouped data frame, you get a weird zig-zag pattern.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb72-2">  <span class="fu" style="color: #4758AB;">group_by</span>(continent, year) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb72-3">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">avg_lifeExp =</span> <span class="fu" style="color: #4758AB;">mean</span>(lifeExp)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb72-4">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb72-5">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb72-6">  <span class="co" style="color: #5E5E5E;"># add a points layer on top</span></span>
<span id="cb72-7">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> year, <span class="at" style="color: #657422;">y =</span> avg_lifeExp)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb72-8">  <span class="co" style="color: #5E5E5E;"># add a lines layer ontop</span></span>
<span id="cb72-9">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> year, <span class="at" style="color: #657422;">y =</span> avg_lifeExp))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`summarise()` has grouped output by 'continent'. You can override using the
`.groups` argument.</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-44-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This happens because you now have multiple average life expectancy values for each year, but you haven’t specified which ones go together. To fix this plot, you need to specify how the rows are grouped together (i.e.&nbsp;which variable defines the individual lines) by specifying the <code>group = continent</code> argument in the <code>aes()</code> function of the <code>geom_line()</code> layer.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb74-2">  <span class="fu" style="color: #4758AB;">group_by</span>(continent, year) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb74-3">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">avg_lifeExp =</span> <span class="fu" style="color: #4758AB;">mean</span>(lifeExp)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb74-4">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb74-5">  <span class="co" style="color: #5E5E5E;"># add a points layer on top</span></span>
<span id="cb74-6">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> year, <span class="at" style="color: #657422;">y =</span> avg_lifeExp)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb74-7">  <span class="co" style="color: #5E5E5E;"># add a lines layer on top that is grouped by continent</span></span>
<span id="cb74-8">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> year, <span class="at" style="color: #657422;">y =</span> avg_lifeExp, <span class="at" style="color: #657422;">group =</span> continent))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`summarise()` has grouped output by 'continent'. You can override using the
`.groups` argument.</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-45-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="more-aesthetic-mappings-based-on-variables" class="level2">
<h2 class="anchored" data-anchor-id="more-aesthetic-mappings-based-on-variables">More aesthetic mappings based on variables</h2>
<p>So far we have only specified the x- and y-position aesthetic mappings from the data to the geom objects. But you can also specify other types of aesthetic mappings, such as using a variable to specify the colour of the points.</p>
<p>If you want all of the points to be the same colour, you can specify a global point colour argument (that lies outside the <code>aes()</code> function).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb76-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb76-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp),</span>
<span id="cb76-4">             <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"cornflowerblue"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-46-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>However, if you wanted to use a variable from the data frame to define the colour (or any other aesthetic feature) of the geoms, <strong>you will need to include it inside the <code>aes()</code> function</strong>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb77-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb77-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, </span>
<span id="cb77-4">                 <span class="at" style="color: #657422;">y =</span> lifeExp, </span>
<span id="cb77-5">                 <span class="at" style="color: #657422;">col  =</span> continent))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-47-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Note that the <code>continent</code> variable does not specify the colours themselves: this is done automatically. You can specify the colours you want yourself by adding a scale layer for colour.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb78-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb78-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, </span>
<span id="cb78-4">                 <span class="at" style="color: #657422;">y =</span> lifeExp, </span>
<span id="cb78-5">                 <span class="at" style="color: #657422;">col  =</span> continent)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb78-6">  <span class="fu" style="color: #4758AB;">scale_colour_manual</span>(<span class="at" style="color: #657422;">values =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"orange"</span>, <span class="st" style="color: #20794D;">"red4"</span>, <span class="st" style="color: #20794D;">"purple"</span>, <span class="st" style="color: #20794D;">"darkgreen"</span>, <span class="st" style="color: #20794D;">"blue"</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-48-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>There are lots of types of scales that you can use for every type of aesthetic mapping (including x- and y-positions), and typically scales are specific to whether your variable using in the aesthetic mapping is discrete or continuous.</p>
<p>We could also add aesthetic mappings for other features such as shape, size, transparency (alpha) and more! For example, changing the size based on population:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb79-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb79-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp, </span>
<span id="cb79-4">                 <span class="at" style="color: #657422;">col =</span> continent, <span class="at" style="color: #657422;">size =</span> pop),</span>
<span id="cb79-5">             <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-49-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>For the line plot example above where we plotted an average life expectancy time line for each continent, instead of specifying a <code>group</code> argument, you could instead specify a <code>colour</code> argument to be <code>continent</code>. This will will automatically group and colour by <code>continent</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb80-2">  <span class="fu" style="color: #4758AB;">group_by</span>(continent, year) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb80-3">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">avg_lifeExp =</span> <span class="fu" style="color: #4758AB;">mean</span>(lifeExp)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb80-4">  <span class="co" style="color: #5E5E5E;"># specify global aesthetic mappings</span></span>
<span id="cb80-5">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb80-6">  <span class="co" style="color: #5E5E5E;"># add a points layer on top</span></span>
<span id="cb80-7">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> year, <span class="at" style="color: #657422;">y =</span> avg_lifeExp, <span class="at" style="color: #657422;">colour =</span> continent))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`summarise()` has grouped output by 'continent'. You can override using the
`.groups` argument.</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-50-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="other-types-of-layers" class="level2">
<h2 class="anchored" data-anchor-id="other-types-of-layers">Other types of layers</h2>
<p>So far, we have only seen scatterplots (points) and line plots, however, there are many other geoms you could add, including:</p>
<section id="histograms" class="level3">
<h3 class="anchored" data-anchor-id="histograms">Histograms</h3>
<p>Histograms only require an x-aesthetic (the y-aesthetic is a count by default, but you can force it to be a density by specifying <code>y = ..density..</code>).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb82-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb82-3">  <span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> lifeExp), <span class="at" style="color: #657422;">binwidth =</span> <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-51-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="boxplots" class="level3">
<h3 class="anchored" data-anchor-id="boxplots">Boxplots</h3>
<p>Boxplots are automatically grouped by the x-aesthetic provided (e.g.&nbsp;continent in the plot below). To colour boxplots, use the <code>fill</code> argument instead of the <code>col</code> (or <code>color</code>/<code>colour</code>) argument.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb83-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb83-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb83-3">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> continent, <span class="at" style="color: #657422;">y =</span> lifeExp, <span class="at" style="color: #657422;">fill =</span> continent))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-52-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="faceting" class="level3">
<h3 class="anchored" data-anchor-id="faceting">Faceting</h3>
<p>You can create a grid (or “facet”) of plots separated by a categorical variable of your choosing (e.g.&nbsp;<code>continent</code>) by adding a facet layer.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb84-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb84-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb84-4">  <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;">~</span>continent, <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-53-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="customizing-ggplot2" class="level2">
<h2 class="anchored" data-anchor-id="customizing-ggplot2">Customizing ggplot2</h2>
<p>While we have stayed within the default ggplot2 functionalities here, there is a lot you can do with ggplot2. For instance, with practice, you will learn how to produce highly-customized plots by combining many layers together. As motivation, here is a much more beautiful plot that can be made with ggplot2:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb85-1">gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb85-2">  <span class="fu" style="color: #4758AB;">filter</span>(year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb85-3">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb85-4">  <span class="co" style="color: #5E5E5E;"># add scatter points</span></span>
<span id="cb85-5">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp, <span class="at" style="color: #657422;">col =</span> continent, <span class="at" style="color: #657422;">size =</span> pop),</span>
<span id="cb85-6">             <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb85-7">  <span class="co" style="color: #5E5E5E;"># add some text annotations for the very large countries</span></span>
<span id="cb85-8">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">label =</span> country),</span>
<span id="cb85-9">            <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"grey50"</span>,</span>
<span id="cb85-10">            <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">filter</span>(gapminder, year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>, pop <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1000000000</span> <span class="sc" style="color: #5E5E5E;">|</span> country <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Nigeria"</span>, <span class="st" style="color: #20794D;">"United States"</span>))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb85-11">  <span class="co" style="color: #5E5E5E;"># clean the axes names and breaks</span></span>
<span id="cb85-12">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>(<span class="at" style="color: #657422;">limits =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">200</span>, <span class="dv" style="color: #AD0000;">60000</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb85-13">  <span class="co" style="color: #5E5E5E;"># change labels</span></span>
<span id="cb85-14">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"GDP versus life expectancy in 2007"</span>,</span>
<span id="cb85-15">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"GDP per capita (log scale)"</span>,</span>
<span id="cb85-16">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Life expectancy"</span>,</span>
<span id="cb85-17">       <span class="at" style="color: #657422;">size =</span> <span class="st" style="color: #20794D;">"Population"</span>,</span>
<span id="cb85-18">       <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"Continent"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb85-19">  <span class="co" style="color: #5E5E5E;"># change the size scale</span></span>
<span id="cb85-20">  <span class="fu" style="color: #4758AB;">scale_size</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.1</span>, <span class="dv" style="color: #AD0000;">10</span>),</span>
<span id="cb85-21">             <span class="co" style="color: #5E5E5E;"># remove size legend</span></span>
<span id="cb85-22">             <span class="at" style="color: #657422;">guide =</span> <span class="st" style="color: #20794D;">"none"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb85-23">  <span class="co" style="color: #5E5E5E;"># add a nicer theme</span></span>
<span id="cb85-24">  <span class="fu" style="color: #4758AB;">theme_classic</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb85-25">  <span class="co" style="color: #5E5E5E;"># place legend at top and grey axis lines</span></span>
<span id="cb85-26">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"top"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-54-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>In <a href="http://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_pt2/">part two</a> of this post on the tidyverse, you will see some ggplot2 code (under the guise of learning about factors) that makes this plot:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.
ℹ Please use `linewidth` instead.</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_files/figure-html/unnamed-chunk-55-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>If you’d like to learn more about ggplot2, such as themes, scales and advanced geoms, check out my more detailed <a href="http://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial/">ggplot2 blog post</a>.</p>
<p>If the tidyverse is new to you, I suggest that you stop here for now. Focus on incorporating piping, dplyr, and ggplot2 into every analysis that you do for the next few months (even if it would initially be quicker to use base R versions). When you feel comfortable with your new skills, move onto <a href="http://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_pt2/">part two</a> of this blog post and start to incorporate the remaining tidyverse packages (below) into your analytic workflow. Trying to learn everything at once is a sure-fire way to become discouraged. First get comfortable with the main ideas, then learn some more.</p>


</section>
</section>

 ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <category>dplyr</category>
  <category>ggplot2</category>
  <category>pipes</category>
  <guid>https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse.html</guid>
  <pubDate>Mon, 05 Aug 2019 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Transitioning into the tidyverse (part 2)</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_pt2.html</link>
  <description><![CDATA[ 




<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/img/tidyverse/tidyverse_all.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>If you’re new to the tidyverse, I recommend that you first read <a href="http://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse/">part one</a> of this two-part series on transitioning into the tidyverse. Part 1 focuses on what I feel are the most important aspects and packages of the tidyverse: tidy thinking, piping, dplyr and ggplot2.</p>
<p>This second part of the two-part series focuses on the remaining (less essential, but still immensely useful) packages that make up the tidyverse: tidyr, purrr, readr, tibbles, as well as some additional type-specific packages (lubridate, forcats and stringr). Additional resources include the set of tidyverse <a href="https://www.rstudio.com/resources/cheatsheets/">cheatsheets</a>, as well as the <a href="https://r4ds.had.co.nz/">R for Data Science book</a>.</p>
<p>Start by loading the tidyverse package into your environment.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
</div>
<p>Then load the gapminder data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># to download the data directly:</span></span>
<span id="cb2-2">gapminder_orig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder-FiveYearData.csv"</span>)</span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># define a copy of the original dataset that we will clean and play with </span></span>
<span id="cb2-4">gapminder <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder_orig</span></code></pre></div>
</div>
<section id="data-shaping-tidyr" class="level1">
<h1>Data shaping: tidyr</h1>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/img/tidyverse/tidyr.jpg" width="180" height="200" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Tidyr aims to help you reshape your data, and is very useful if you receive data in a format that isn’t already “tidy”. I also find myself using tidyr functions to help me calculate specific types of summaries and plots.</p>
<p>For instance, tidyr helps you convert your data between (a) long-form data where each variable is in a single column</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>         country year lifeExp
1      Australia 1992  77.560
2      Australia 1997  78.830
3      Australia 2002  80.370
4      Australia 2007  81.235
5         Canada 1992  77.950
6         Canada 1997  78.610
7         Canada 2002  79.770
8         Canada 2007  80.653
9  United States 1992  76.090
10 United States 1997  76.810
11 United States 2002  77.310
12 United States 2007  78.242</code></pre>
</div>
</div>
<p>and (b) wide-form data where a single variable is separated into multiple columns based on some grouping (in this case, the life expectancy variable is separated into three columns, one for each country):</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>  year Australia_lifeExp Canada_lifeExp United States_lifeExp
1 1992            77.560         77.950                76.090
2 1997            78.830         78.610                76.810
3 2002            80.370         79.770                77.310
4 2007            81.235         80.653                78.242</code></pre>
</div>
</div>
<section id="gathering-and-spreading" class="level2">
<h2 class="anchored" data-anchor-id="gathering-and-spreading">Gathering and spreading</h2>
<p>The main tidyr functions are <code>spread()</code> and <code>gather()</code>. If you are familiar with the older reshape2 R package, you can think of tidyr as the tidyverse version, where <code>spread()</code> is the equivalent of <code>cast</code>, and <code>gather()</code> is the equivalent of <code>melt()</code>. If not… never mind!</p>
<p>Think of <code>spread()</code> as a function that will spread a single variable’s “values” across multiple columns based on a “key”, or grouping variable. Similarly, think of <code>gather()</code> as a function that will gather a variable whose “values” are spread across multiple columns (where the “key” is the grouping variable that distinguishes the columns) into a single column.</p>
<p>The main things you need to figure out when using <code>spread()</code> and <code>gather()</code> are what are the “key” and what are the “value” columns of your data frame. If you are spreading your data (to make it wider), then your key and value variables are existing variables in the data. If you are gathering your data (making it longer), then you will need to define key and value variables that will become variable names in your long-form data frame.</p>
<p>Below I’ll show how this works with a small subset of the gapminder dataset, corresponding to the life expectancy for US, Australia, and Canada for each year in the data after 1990.</p>
<p>Suppose that you started with the long-form data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">gapminder_sample_long <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">filter</span>(country <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Australia"</span>, <span class="st" style="color: #20794D;">"United States"</span>, <span class="st" style="color: #20794D;">"Canada"</span>), year <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1990</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">select</span>(country, year, lifeExp) </span>
<span id="cb5-4">gapminder_sample_long</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         country year lifeExp
1      Australia 1992  77.560
2      Australia 1997  78.830
3      Australia 2002  80.370
4      Australia 2007  81.235
5         Canada 1992  77.950
6         Canada 1997  78.610
7         Canada 2002  79.770
8         Canada 2007  80.653
9  United States 1992  76.090
10 United States 1997  76.810
11 United States 2002  77.310
12 United States 2007  78.242</code></pre>
</div>
</div>
<p>A wide-form version might have the life expectancy variable <em>spread</em> into three variables, one for each country (it would also be perfectly feasible to separate by year). So in this case, the <strong>value</strong> that you want to spread is the <code>lifeExp</code> variable, and the <strong>key</strong> that you want to spread/group by is the <code>country</code> variable.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">gapminder_sample_wide <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder_sample_long <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">spread</span>(<span class="at" style="color: #657422;">key =</span> country, <span class="at" style="color: #657422;">value =</span> lifeExp)</span>
<span id="cb7-3">gapminder_sample_wide</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  year Australia Canada United States
1 1992    77.560 77.950        76.090
2 1997    78.830 78.610        76.810
3 2002    80.370 79.770        77.310
4 2007    81.235 80.653        78.242</code></pre>
</div>
</div>
<p>So the columns with the country names, <code>Australia</code>, <code>Canada</code>, and <code>United States</code> contain the <code>lifeExp</code> values corresponding to those countries for each year. Note that the <code>year</code> variable has been retained in the wide form. If you had tried to do this without the <code>year</code> variable in the data frame, you would run into an error that said <code>"Error: Each row of output must be identified by a unique combination of keys."</code> Try running the following code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">gapminder_sample_long <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>year) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">spread</span>(<span class="at" style="color: #657422;">key =</span> country, <span class="at" style="color: #657422;">value =</span> lifeExp)</span></code></pre></div>
</div>
<p>This is because when the year column is missing, there is no variable that tells purrr which values should go in the same rows together. This error message is a common source of frustration in tidyr, and Hadley has been working on replacements for <code>gather()</code> and <code>spread()</code> called <code>pivot_wider()</code> and <code>pivot_longer()</code>: https://tidyr.tidyverse.org/dev/articles/pivot.html. They haven’t been incorporated into the CRAN versions of tidyr and the tidyverse yet though, but they probably will be soon. If you understand the principles of <code>gather()</code> and <code>spread()</code> then when the new pivot functions are introduced, it will be easy to learn how to use them.</p>
<p>If you wanted to go from the wide form to the long-form, you need to <em>gather</em> together the life expectancy values. This time, the <code>country</code> <strong>key</strong> and <code>lifeExp</code> <strong>value</strong> variable names do not currently exist in the data frame. The <code>key</code> and <code>value</code> arguments that you provide in the <code>gather()</code> function are what will be used as the names of the variables for the long-form version you’re about to create. Just so you can see that these variables did not need to exist in the original data, you will call the key <code>country_var</code> and the value <code>lifeExp_var</code> (previously unused names).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">gapminder_sample_wide</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  year Australia Canada United States
1 1992    77.560 77.950        76.090
2 1997    78.830 78.610        76.810
3 2002    80.370 79.770        77.310
4 2007    81.235 80.653        78.242</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">gapminder_sample_wide <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">gather</span>(<span class="at" style="color: #657422;">key =</span> country_var, <span class="at" style="color: #657422;">value =</span> lifeExp_var)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     country_var lifeExp_var
1           year    1992.000
2           year    1997.000
3           year    2002.000
4           year    2007.000
5      Australia      77.560
6      Australia      78.830
7      Australia      80.370
8      Australia      81.235
9         Canada      77.950
10        Canada      78.610
11        Canada      79.770
12        Canada      80.653
13 United States      76.090
14 United States      76.810
15 United States      77.310
16 United States      78.242</code></pre>
</div>
</div>
<p>Oh no…. something went wrong! The <code>year</code> variable has been included as a key (country). Since there is no distinction between the three country columns (<code>Australia</code>, <code>Canada</code>, and <code>United States</code>) and the <code>year</code> column, the <code>year</code> column was included in the gathering process. To exclude a column from the gathering process, you can explicitly remove it using e.g.&nbsp;<code>-year</code> as an argument to the gather function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">gapminder_sample_wide <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;">gather</span>(<span class="at" style="color: #657422;">key =</span> country_var, <span class="at" style="color: #657422;">value =</span> lifeExp_var, <span class="sc" style="color: #5E5E5E;">-</span>year)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   year   country_var lifeExp_var
1  1992     Australia      77.560
2  1997     Australia      78.830
3  2002     Australia      80.370
4  2007     Australia      81.235
5  1992        Canada      77.950
6  1997        Canada      78.610
7  2002        Canada      79.770
8  2007        Canada      80.653
9  1992 United States      76.090
10 1997 United States      76.810
11 2002 United States      77.310
12 2007 United States      78.242</code></pre>
</div>
</div>
</section>
<section id="combining-and-separating-variables" class="level2">
<h2 class="anchored" data-anchor-id="combining-and-separating-variables">Combining and separating variables</h2>
<p>The <code>unite()</code> function combines columns into a single column. For instance, you can combine the country and year variables into a single variable, <code>countryyear</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">gapminder_sample_united <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder_sample_long <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">unite</span>(<span class="st" style="color: #20794D;">"countryyear"</span>, country, year, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb16-3">gapminder_sample_united</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          countryyear lifeExp
1      Australia_1992  77.560
2      Australia_1997  78.830
3      Australia_2002  80.370
4      Australia_2007  81.235
5         Canada_1992  77.950
6         Canada_1997  78.610
7         Canada_2002  79.770
8         Canada_2007  80.653
9  United States_1992  76.090
10 United States_1997  76.810
11 United States_2002  77.310
12 United States_2007  78.242</code></pre>
</div>
</div>
<p>Conversely, you can separate single columns into multiple columns. Below, I undo the <code>unite()</code> that I performed above using <code>separate()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">gapminder_sample_united <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;">separate</span>(countryyear, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"country"</span>, <span class="st" style="color: #20794D;">"year"</span>), <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         country year lifeExp
1      Australia 1992  77.560
2      Australia 1997  78.830
3      Australia 2002  80.370
4      Australia 2007  81.235
5         Canada 1992  77.950
6         Canada 1997  78.610
7         Canada 2002  79.770
8         Canada 2007  80.653
9  United States 1992  76.090
10 United States 1997  76.810
11 United States 2002  77.310
12 United States 2007  78.242</code></pre>
</div>
</div>
<p>Tidyr also has some nice functions for dealing with missing values including</p>
<ul>
<li><p><code>drop_na()</code> that will remove every row that has a missing value (<code>NA</code>) in it.</p></li>
<li><p><code>replace_na()</code> that will replace every missing value (<code>NA</code>) with whatever value you specify.</p></li>
</ul>
</section>
</section>
<section id="replacing-loops-purrr" class="level1">
<h1>Replacing loops: purrr</h1>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/img/tidyverse/purrr.jpg" width="180" height="200" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Iteration in the tidyverse is handled using <code>purrr</code>; a feline-friendly package for applying “map” functions (although it does a few other neat things too). If you are experienced in base R, then you’re probably familiar with the <code>apply()</code> functions that can be used in place of loops for iteratively applying a function. The most common apply functions are</p>
<p><code>apply(matrix, margin, fun)</code> applies a function, <code>fun</code>, across each of the rows (if you set <code>margin = 1</code>) or each of the columns (if you set <code>margin = 2</code>) of a <code>matrix</code> (or array) and returns a vector.</p>
<p><code>sapply(object, fun)</code> applies a function, <code>fun</code>, to each entry of an <code>object</code> (which could be a vector, a data frame or a list), and usually returns a vector, but sometimes it returns a matrix, and often it is difficult to guess what type of object it will return before you run your code.</p>
<p><code>lapply(list, fun)</code> applies a function, <code>fun</code>, to each entry of a <code>list</code>, and returns a list. This one at least usually makes sense relative to the other apply functions.</p>
<p>While there is nothing fundamentally wrong with the base R apply functions, the syntax is somewhat inconsistent across the different apply functions, and the expected type of the object they return is often ambiguous (at least it is for <code>sapply</code>…). Each of <code>purrr</code>’s map functions can be applied to vectors, lists and data frames.</p>
<p>It is useful to remember that a data frame is a special type of a list where each columns of the data frame corresponds to an entry of the list. Each entry of the data frame-list is a vector of the same length (although the vectors do not need to be of the same type).</p>
<p>One of the primary features of <code>purrr</code>’s map functions is that you need to specify the form of your output as a function suffix separated by an underscore. The first element is always the data object over which you want to iterate, and the second argument is always the function that you want to iteratively apply. For example:</p>
<ul>
<li><p><code>map(object, fun)</code> is the primary mapping function and returns a list</p></li>
<li><p><code>map_df(object, fun)</code> returns a data frame</p></li>
<li><p><code>map_dbl(object, fun)</code> returns a numeric (double) vector</p></li>
<li><p><code>map_chr(object, fun)</code> returns a character vector</p></li>
<li><p><code>map_lgl(object, fun)</code> returns a logical vector</p></li>
</ul>
<p>The <strong>input</strong> to any <code>map</code> function is always either</p>
<ul>
<li><p>a <strong>vector</strong> (of any type), in which case the iteration is done over the entries of the vector</p></li>
<li><p>a <strong>list</strong>, in which case the iteration is performed over the elements of the list</p></li>
<li><p>a <strong>data frame</strong>, in which case the iteration is performed over the columns of the data frame (which, since a data frame is a special kind of list, is technically the same as the previous point)</p></li>
</ul>
<p>The <strong>output</strong> of each map function is specified by the term that follows the underscore in the function name.</p>
<p>Fundamentally, maps are for iteration. In the example below I will iterate through the vector <code>c(1, 4, 7)</code> by adding 10 to each entry. The following code is how you would do this using the base R apply functions</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">lapply</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">7</span>), <span class="cf" style="color: #003B4F;">function</span>(number) {</span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;">return</span>(number <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb20-3">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 11

[[2]]
[1] 14

[[3]]
[1] 17</code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;">sapply</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">7</span>), <span class="cf" style="color: #003B4F;">function</span>(number) {</span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;">return</span>(number <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb22-3">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 11 14 17</code></pre>
</div>
</div>
<p>For the <code>purrr</code> equivalents, if you want your output to be a list, you would use <code>map()</code>, if you want it to be a numeric vector, then you would use <code>map_dbl()</code>, if you want it to be a character, then it is <code>map_chr()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;">library</span>(purrr)</span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;">map</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">7</span>), <span class="cf" style="color: #003B4F;">function</span>(number) {</span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;">return</span>(number <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb24-4">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 11

[[2]]
[1] 14

[[3]]
[1] 17</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;">map_dbl</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">7</span>), <span class="cf" style="color: #003B4F;">function</span>(number) {</span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;">return</span>(number <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb26-3">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 11 14 17</code></pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;">map_chr</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">7</span>), <span class="cf" style="color: #003B4F;">function</span>(number) {</span>
<span id="cb28-2">  <span class="fu" style="color: #4758AB;">return</span>(number <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb28-3">})</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Automatic coercion from double to character was deprecated in purrr 1.0.0.
ℹ Please use an explicit call to `as.character()` within `map_chr()` instead.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "11.000000" "14.000000" "17.000000"</code></pre>
</div>
</div>
<p>If you want to return a data frame, then you would use <code>map_df</code> (but you need to make sure that in each iteration you’re returning a data frame which has consistent column names).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;">map_df</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">7</span>), <span class="cf" style="color: #003B4F;">function</span>(number) {</span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">old_number =</span> number, </span>
<span id="cb31-3">                    <span class="at" style="color: #657422;">new_number =</span> number <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb31-4">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  old_number new_number
1          1         11
2          4         14
3          7         17</code></pre>
</div>
</div>
<p><code>map2</code> and <code>pmap</code> are versions of map functions that work over multiple data frames/lists/vectors at once. There are also fancy things that you can do with purrr that include iterating over entire lists of data as entries to columns of a tibble, but I won’t talk about those here. My next blog post will be on purrr so keep a look out if you want to learn more. For a more comprehensive look at purrr, I recommend <a href="https://jennybc.github.io/purrr-tutorial/">Jenny Bryan’s tutorial</a>.</p>
</section>
<section id="loading-data-readr" class="level1">
<h1>Loading data: readr</h1>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/img/tidyverse/readr.png" width="180" height="200" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>At face-value, readr is probably the least exciting tidyverse package. At first glance, it mostly appears to offer tidyverse equivalents to the classic base R data loading functions such as <code>read.csv()</code>. Calling a readr data loading function is usually the same as the base R versions, <em>but</em> they use an underscore <code>_</code> separator rather than a period separator <code>.</code>, as in <code>read_csv()</code>.</p>
<p>The main advantages of the readr versions is that the data is read in directly as a <strong>tibble</strong>, and the readr loading functions do a much better job at deciding what <em>type</em> each variable should be (and it makes it easier to specify what types the columns should be at the time of loading if you have strong opinions).</p>
<p>However, a closer look reveals that <code>readr</code> has some hidden talents that are sure to come in handy! For instance, readr has a series of <code>parse_</code> functions that convert abnormally represented data into normally represented data. For instance, <code>parse_number()</code> will extract the numeric component of strings with numbers in them. So if your collaborators give you a file with prices that have preceding “$”s or other characters in them, <code>parse_number()</code> will remove them for you without you having to do anything involving regular expressions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;">parse_number</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"$1,234.5"</span>, <span class="st" style="color: #20794D;">"$12.45"</span>, <span class="st" style="color: #20794D;">"99%"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1234.50   12.45   99.00</code></pre>
</div>
</div>
<p>Tidyr can also be used to convert dates and times coded as strings to actual date-time formats.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;">parse_datetime</span>(<span class="st" style="color: #20794D;">"2010-10-01 21:45"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2010-10-01 21:45:00 UTC"</code></pre>
</div>
</div>
<p>But to be honest, I prefer to use the <em>lubridate</em> package for doing things with dates (see below).</p>
<p>Okay, so maybe tidyr isn’t the most exciting package, but that <code>parse_number()</code> thing is pretty neat!</p>
</section>
<section id="storing-data-tibbles" class="level1">
<h1>Storing data: tibbles</h1>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/img/tidyverse/tibble.png" width="180" height="200" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Tibbles are the tidyverse version of a data frame. You’ve probably used tibbles before without even realizing. They look and behave a LOT like a data frame. Often when you input a data frame to a tidyverse function, it comes out the other end as a tibble. The differences are minor and you’re unlikely to notice them if you’re just starting out, so I wouldn’t worry about whether your data is stored as a data frame or a tibble.</p>
<p>The main differences that you might notice is in how they are printed to the console: tibbles are automatically truncated to 10 rows when printed into the console, and if you have too many variables, many of the variables are hidden from view. I secretly sometimes view my tibbles in the console using <code>as.data.frame(data)</code> so that it doesn’t truncate. Probably a better thing to do would be to <code>View(data)</code>, but that opens a whole new window which I sometimes find kind of annoying.</p>
<p>Tibbles only become important much later down the tidyverse track when you want to use list columns to do fancy stuff with purrr.</p>
</section>
<section id="dates-factors-and-strings-lubridate-forcats-and-stringr" class="level1">
<h1>Dates, factors and strings: lubridate, forcats and stringr</h1>
<p>While not technically a part of the tidyverse, there are also very useful packages for manipulating type-specific variables: lubridate for dates/times, forcats for factors and stringr for strings.</p>
<section id="handling-dates-and-times-lubridate" class="level2">
<h2 class="anchored" data-anchor-id="handling-dates-and-times-lubridate">Handling dates and times: lubridate</h2>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/img/tidyverse/lubridate.png" width="180" height="200" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Lubridate makes it really straightforward to deal with dates. One might say… it <em>lubricates</em> them… one might also not say that, because it’s a bit weird.</p>
<p>Lubridate offers a simple way of converting dates/times stored as strings to dates/times stored as dates/times, and it makes it easy to do math with dates.</p>
<p>The primary set of functions are date-time-reading functions that convert strings to dates. To decide which function to use, you will need to figure out what format your dates are in (by… looking at them…). For instance, if your date is coded as <code>"August 2nd 2019"</code> or <code>"08-05-19"</code> or <code>"08/02/19"</code>, then you would use the <code>mdy()</code> function because it is coded as “month-day-year”:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;">library</span>(lubridate)</span>
<span id="cb37-2"><span class="fu" style="color: #4758AB;">mdy</span>(<span class="st" style="color: #20794D;">"August 2nd 2019"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2019-08-02"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;">mdy</span>(<span class="st" style="color: #20794D;">"8-2-2019"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2019-08-02"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;">mdy</span>(<span class="st" style="color: #20794D;">"8/2/19"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2019-08-02"</code></pre>
</div>
</div>
<p>If your dates were coded as “year-month-day” then you would use the <code>ymd()</code> function, and so on.</p>
<p>Strings that contain times can be parsed using <code>hms()</code> for “hour-minute-second”.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;">hms</span>(<span class="st" style="color: #20794D;">"8:45:12"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "8H 45M 12S"</code></pre>
</div>
</div>
<p>And date-times can be parsed using <code>ymd_hms()</code>, <code>ymd_hm()</code>, <code>ymd_h()</code>, as well as for the other date versions (<code>mdy_hms()</code>, <code>dmy_hms()</code>, etc…).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;">mdy_hms</span>(<span class="st" style="color: #20794D;">"March 13th 2019 at 9:02:00"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2019-03-13 09:02:00 UTC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="fu" style="color: #4758AB;">mdy_hm</span>(<span class="st" style="color: #20794D;">"03-13-19, 9:02"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2019-03-13 09:02:00 UTC"</code></pre>
</div>
</div>
<p>You can add fixed periods of time to dates easily using the <code>years()</code>, <code>months()</code>, <code>days()</code>, <code>hours()</code>, etc… functions. For instance:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="fu" style="color: #4758AB;">mdy</span>(<span class="st" style="color: #20794D;">"August 2nd 2019"</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">days</span>(<span class="dv" style="color: #AD0000;">42</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2019-09-13"</code></pre>
</div>
</div>
<p>Once your dates are in an actual date format, you can do intuitive mathematical calculations with date-times:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1"><span class="fu" style="color: #4758AB;">mdy_hms</span>(<span class="st" style="color: #20794D;">"August 2nd 2019, 1:21:30 pm"</span>) <span class="sc" style="color: #5E5E5E;">-</span> <span class="fu" style="color: #4758AB;">mdy_hms</span>(<span class="st" style="color: #20794D;">"August 1st 2019, 11:23:33 am"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time difference of 1.08191 days</code></pre>
</div>
</div>
<p>Plus ggplot2 handles lubridate-dates really well.</p>
</section>
<section id="handling-factors-forcats" class="level2">
<h2 class="anchored" data-anchor-id="handling-factors-forcats">Handling factors: forcats</h2>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/img/tidyverse/forcats.png" width="180" height="200" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Factors are somehow simultaneously very useful and the worst thing ever. Fortunately, since I discovered the <code>forcats</code> package, my factors have been on their best behaviour.</p>
<p>The forcats package has a few really useful functions. The ones I use most often are</p>
<ul>
<li><p><code>fct_inorder()</code> for reordering the levels of a factor so that the levels are in the order that they appear in the factor vector.</p></li>
<li><p><code>fct_infreq()</code> for reordering the levels of a factor so that the levels are in order of most to least frequent.</p></li>
<li><p><code>fct_rev()</code> for reversing the order of the levels of a factor.</p></li>
<li><p><code>fct_relevel()</code> for manually reordering the levels of the factor.</p></li>
<li><p><code>fct_reorder()</code> for reordering the levels based on their relationship to another variable.</p></li>
</ul>
<p>There are other functions too, but I rarely use them. Check out the forcats <a href="file:///Users/Rebecca/Downloads/factors.pdf">cheatsheet</a>!</p>
<p>An example of how the forcats package makes my life easier is when I want to reorder the factor levels. Factor levels are usually alphabetical by default, and I often want the factor levels to be in a specific order.</p>
<p>As an exercise both in ggplot2 and dplyr, I want to make a plot that shows the difference between life expectancy between 2007 and 1952 and arrange the countries in order of greatest difference in life expectancy.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">gapminder_life_exp_diff <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb53-2">  <span class="co" style="color: #5E5E5E;"># filter to the starting and ending years only</span></span>
<span id="cb53-3">  <span class="fu" style="color: #4758AB;">filter</span>(year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1952</span> <span class="sc" style="color: #5E5E5E;">|</span> year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb53-4">  <span class="co" style="color: #5E5E5E;"># ensure that the data are arranged so that 1952 is first and 2007 is second </span></span>
<span id="cb53-5">  <span class="co" style="color: #5E5E5E;"># within each year</span></span>
<span id="cb53-6">  <span class="fu" style="color: #4758AB;">arrange</span>(country, year) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb53-7">  <span class="co" style="color: #5E5E5E;"># for country, add a variable corresponding to the difference between life </span></span>
<span id="cb53-8">  <span class="co" style="color: #5E5E5E;"># expectency in 2007 and 1952</span></span>
<span id="cb53-9">  <span class="fu" style="color: #4758AB;">group_by</span>(country) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb53-10">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">lifeExp_diff =</span> lifeExp[<span class="dv" style="color: #AD0000;">2</span>] <span class="sc" style="color: #5E5E5E;">-</span> lifeExp[<span class="dv" style="color: #AD0000;">1</span>],</span>
<span id="cb53-11">         <span class="co" style="color: #5E5E5E;"># also calculate the largest population for the country (based on the two years)</span></span>
<span id="cb53-12">         <span class="at" style="color: #657422;">max_pop =</span> <span class="fu" style="color: #4758AB;">max</span>(pop)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb53-13">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb53-14">  <span class="co" style="color: #5E5E5E;"># arrange in order of the biggest difference in life expectency</span></span>
<span id="cb53-15">  <span class="fu" style="color: #4758AB;">arrange</span>(lifeExp_diff) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb53-16">  <span class="co" style="color: #5E5E5E;"># restrict to countries with a population of at least 30,000 so we can fit </span></span>
<span id="cb53-17">  <span class="co" style="color: #5E5E5E;"># the plot in a reasonable space</span></span>
<span id="cb53-18">  <span class="fu" style="color: #4758AB;">filter</span>(max_pop <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">30000000</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb53-19">  <span class="fu" style="color: #4758AB;">select</span>(country, year, continent, lifeExp, lifeExp_diff)</span>
<span id="cb53-20">gapminder_life_exp_diff  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 72 × 5
   country          year continent lifeExp lifeExp_diff
   &lt;chr&gt;           &lt;int&gt; &lt;chr&gt;       &lt;dbl&gt;        &lt;dbl&gt;
 1 South Africa     1952 Africa       45.0         4.33
 2 South Africa     2007 Africa       49.3         4.33
 3 Congo Dem. Rep.  1952 Africa       39.1         7.32
 4 Congo Dem. Rep.  2007 Africa       46.5         7.32
 5 United States    1952 Americas     68.4         9.80
 6 United States    2007 Americas     78.2         9.80
 7 United Kingdom   1952 Europe       69.2        10.2 
 8 United Kingdom   2007 Europe       79.4        10.2 
 9 Nigeria          1952 Africa       36.3        10.5 
10 Nigeria          2007 Africa       46.9        10.5 
# … with 62 more rows</code></pre>
</div>
</div>
<p>To understand what the intermediate dplyr steps are doing in the code below, I suggest printing each step out to the console (without defining a new data frame) - i.e.&nbsp;first print <code>gapminder %&gt;% filter(year == 1952 | year == 2007)</code>, then print <code>gapminder %&gt;% filter(year == 1952 | year == 2007) %&gt;% arrange(country, year)</code>, etc.</p>
<p>The next task is to make a dot plot that shows the life expectancy in 1952 and 2007 for each country. Since the countries in our data frame is arranged in order of smallest to biggest difference in life expectancy, one would expect that the plot will be too. However, the countries in the plot still appear in alphabetical order! The problem is that ggplot2 plots factors in order of their levels, but the <code>arrange()</code> dplyr function rearranges the order of the rows in the data frame but does not change the order of the factor levels.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">gapminder_life_exp_diff <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb55-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb55-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> lifeExp, <span class="at" style="color: #657422;">y =</span> country, <span class="at" style="color: #657422;">col =</span> <span class="fu" style="color: #4758AB;">as.factor</span>(year)))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_pt2_files/figure-html/unnamed-chunk-30-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>If I tried to fix this using base R, I would undoubtedly end up messing up which country is which. Fortunately this is really, really easy to fix using forcats! The <code>fct_inorder()</code> function will automatically reorder the levels of a factor in the order in which they appear in the vector. So all I need to do is add one line of pre-processing code before I make my plot: <code>mutate(country = fct_inorder(country))</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">gapminder_life_exp_diff <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb56-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">country =</span> <span class="fu" style="color: #4758AB;">fct_inorder</span>(country)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb56-3">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb56-4">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> lifeExp, <span class="at" style="color: #657422;">y =</span> country, <span class="at" style="color: #657422;">col =</span> <span class="fu" style="color: #4758AB;">as.factor</span>(year)))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_pt2_files/figure-html/unnamed-chunk-31-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>I’m a bit pedantic about data viz, so I can’t leave this plot looking like this, so I’m just going to place some ggplot2 code here for making this plot waaaaay more badass. Try to read through the code and understand what its doing. This isn’t a lesson in forcats, it’s a lesson in EDA!</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">gapminder_life_exp_diff <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb57-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">country =</span> <span class="fu" style="color: #4758AB;">fct_inorder</span>(country)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb57-3">  <span class="co" style="color: #5E5E5E;"># for each country define a varaible for min and max life expectancy</span></span>
<span id="cb57-4">  <span class="fu" style="color: #4758AB;">group_by</span>(country) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb57-5">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">max_lifeExp =</span> <span class="fu" style="color: #4758AB;">max</span>(lifeExp),</span>
<span id="cb57-6">         <span class="at" style="color: #657422;">min_lifeExp =</span> <span class="fu" style="color: #4758AB;">min</span>(lifeExp)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb57-7">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb57-8">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb57-9">  <span class="co" style="color: #5E5E5E;"># plot a horizontal line from min to max life expectency for each country</span></span>
<span id="cb57-10">  <span class="fu" style="color: #4758AB;">geom_segment</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> min_lifeExp, <span class="at" style="color: #657422;">xend =</span> max_lifeExp, </span>
<span id="cb57-11">                   <span class="at" style="color: #657422;">y =</span> country, <span class="at" style="color: #657422;">yend =</span> country,</span>
<span id="cb57-12">                   <span class="at" style="color: #657422;">col =</span> continent), <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">7</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb57-13">  <span class="co" style="color: #5E5E5E;"># add a point for each life expectancy data point</span></span>
<span id="cb57-14">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> lifeExp, <span class="at" style="color: #657422;">y =</span> country, <span class="at" style="color: #657422;">col =</span> continent), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">8</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb57-15">  <span class="co" style="color: #5E5E5E;"># add text of the country name as well as the max and min life expectency </span></span>
<span id="cb57-16">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> min_lifeExp <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.7</span>, <span class="at" style="color: #657422;">y =</span> country, </span>
<span id="cb57-17">                <span class="at" style="color: #657422;">label =</span> <span class="fu" style="color: #4758AB;">paste</span>(country, <span class="fu" style="color: #4758AB;">round</span>(min_lifeExp))), </span>
<span id="cb57-18">            <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"grey50"</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="st" style="color: #20794D;">"right"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb57-19">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> max_lifeExp <span class="sc" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.7</span>, <span class="at" style="color: #657422;">y =</span> country, </span>
<span id="cb57-20">                <span class="at" style="color: #657422;">label =</span> <span class="fu" style="color: #4758AB;">round</span>(max_lifeExp)), </span>
<span id="cb57-21">            <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"grey50"</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="st" style="color: #20794D;">"left"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb57-22">  <span class="co" style="color: #5E5E5E;"># ensure that the left-most text is not cut off </span></span>
<span id="cb57-23">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(<span class="at" style="color: #657422;">limits =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">85</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb57-24">  <span class="co" style="color: #5E5E5E;"># choose a different colour palette</span></span>
<span id="cb57-25">  <span class="fu" style="color: #4758AB;">scale_colour_brewer</span>(<span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"Pastel2"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb57-26">  <span class="co" style="color: #5E5E5E;"># set the title</span></span>
<span id="cb57-27">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Change in life expectancy"</span>,</span>
<span id="cb57-28">       <span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">"Between 1952 and 2007"</span>,</span>
<span id="cb57-29">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Life expectancy (in 1952 and 2007)"</span>,</span>
<span id="cb57-30">       <span class="at" style="color: #657422;">y =</span> <span class="cn" style="color: #8f5902;">NULL</span>, </span>
<span id="cb57-31">       <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"Continent"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb57-32">  <span class="co" style="color: #5E5E5E;"># remove the grey background</span></span>
<span id="cb57-33">  <span class="fu" style="color: #4758AB;">theme_classic</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb57-34">  <span class="co" style="color: #5E5E5E;"># remove the axes and move the legend to the top</span></span>
<span id="cb57-35">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"top"</span>, </span>
<span id="cb57-36">        <span class="at" style="color: #657422;">axis.line =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb57-37">        <span class="at" style="color: #657422;">axis.ticks =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb57-38">        <span class="at" style="color: #657422;">axis.text =</span> <span class="fu" style="color: #4758AB;">element_blank</span>())</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.
ℹ Please use `linewidth` instead.</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_pt2_files/figure-html/unnamed-chunk-32-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="handling-strings-stringr" class="level2">
<h2 class="anchored" data-anchor-id="handling-strings-stringr">Handling strings: stringr</h2>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/img/tidyverse/stringr.jpg" width="180" height="200" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>R used to be terrible at handling strings. Stringr has made string-handling a LOT easier. The functions all start with <code>str_</code> and end with what you want to do to the string.</p>
<p>For instance, to return a logical that specifies whether a specific pattern exists in the string (the equivalent of <code>grepl()</code> in base R), you can use the <code>str_detect()</code> function</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="fu" style="color: #4758AB;">str_detect</span>(<span class="st" style="color: #20794D;">"I like bananas"</span>, <span class="st" style="color: #20794D;">"banana"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>My friend Sara Stoudt <a href="https://twitter.com/sastoudt">@sastoudt</a> wrote a wrote a very useful post for the tidyverse website comparing stringr with its Base R equivalents (https://stringr.tidyverse.org/articles/from-base.html). She provides the following useful table (hers is a bit longer - I’m just showing the parts I find most useful):</p>
<table class="table">
<colgroup>
<col style="width: 38%">
<col style="width: 29%">
<col style="width: 32%">
</colgroup>
<thead>
<tr class="header">
<th>Action</th>
<th>Base R</th>
<th>Tidyverse</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Identify the location of a pattern</td>
<td><code>gregexpr(pattern, x)</code></td>
<td><code>str_locate_all(x, pattern)</code></td>
</tr>
<tr class="even">
<td>Keep strings matching a pattern</td>
<td><code>grep(pattern, x, value = TRUE)</code></td>
<td><code>str_subset(x, pattern)</code></td>
</tr>
<tr class="odd">
<td>Identify position matching a pattern</td>
<td><code>grep(pattern, x)</code></td>
<td><code>str_which(x, pattern)</code></td>
</tr>
<tr class="even">
<td>Detect presence or absence of a pattern</td>
<td><code>grepl(pattern, x)</code></td>
<td><code>str_detect(x, pattern)</code></td>
</tr>
<tr class="odd">
<td>Replace a pattern</td>
<td><code>gsub(pattern, replacement, x)</code></td>
<td><code>str_replace_all(x, pattern, replacement)</code></td>
</tr>
<tr class="even">
<td>Calculate the number of characters in a string</td>
<td><code>nchar(x)</code></td>
<td><code>str_length(x)</code></td>
</tr>
<tr class="odd">
<td>Split a string into pieces</td>
<td><code>strsplit(x, pattern)</code></td>
<td><code>str_split(x, pattern)</code></td>
</tr>
<tr class="even">
<td>Extract a subset of a string</td>
<td><code>substr(x, start, end)</code></td>
<td><code>str_sub(x, start, end)</code></td>
</tr>
<tr class="odd">
<td>Convert a string to lowercase</td>
<td><code>tolower(x)</code></td>
<td><code>str_to_lower(x)</code></td>
</tr>
<tr class="even">
<td>Convert a string to “Title Case”</td>
<td><code>tools::toTitleCase(x)</code></td>
<td><code>str_to_title(x)</code></td>
</tr>
<tr class="odd">
<td>Convert a string to uppercase</td>
<td><code>toupper(x)</code></td>
<td><code>str_to_upper(x)</code></td>
</tr>
<tr class="even">
<td>Trim white space from a string</td>
<td><code>trimws(x)</code></td>
<td><code>str_trim(x)</code></td>
</tr>
</tbody>
</table>
<p>If you’d like to see a little more of stringr, check out Sara’s post!</p>


</section>
</section>

 ]]></description>
  <category>R</category>
  <category>tidyverse</category>
  <category>tidyr</category>
  <category>purrr</category>
  <category>readr</category>
  <category>tibbles</category>
  <category>lubridate</category>
  <category>forcats</category>
  <category>stringr</category>
  <guid>https://www.rebeccabarter.com/blog/2019-08-05_base_r_to_tidyverse_pt2.html</guid>
  <pubDate>Mon, 05 Aug 2019 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Using the recipes package for easy pre-processing</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2019-06-06_pre_processing.html</link>
  <description><![CDATA[ 




<p>Pre-processing data in R used to be the bane of my existence. For something that should be fairly straightforward, it often really wasn’t. Often my frustrations stemmed from simple things such as factor variables having different levels in the training data and test data, or a variable having missing values in the test data but not in the training data. I’d write a function that would pre-process the training data, and when I’d try to apply it to the test data, R would cry and yell and just be generally unpleasant.</p>
<p>Thankfully most of the pain of pre-processing is now in the past thanks to the <a href="https://tidymodels.github.io/recipes/">recipes</a> R package that is a part of the new “tidymodels” package ecosystem (which, I guess is supposed to be equivalent to the data-focused “tidyverse” package ecosystem that includes dplyr, tidyr, and other super awesome packages like that). Recipes was developed by Max Kuhn and Hadley Wickham.</p>
<!-- Those who have ever seen Hadley Wickham give a talk will know that baking and data are inherently related (see photo below).  -->
<!-- ```{r echo = FALSE, fig.align="center", fig.cap = "A photo I took at an R Ladies SF meetup of Hadley's cupcake recipes."} -->
<!-- knitr::include_graphics("/img/recipes/hadley_cupcakes.jpg") -->
<!-- ``` -->
<p>So let’s get baking!</p>
<section id="the-fundamentals-of-pre-processing-your-data-using-recipes" class="level2">
<h2 class="anchored" data-anchor-id="the-fundamentals-of-pre-processing-your-data-using-recipes">The fundamentals of pre-processing your data using recipes</h2>
<p>Creating a recipe has four steps:</p>
<ol type="1">
<li><p><strong>Get the ingredients</strong> (<code>recipe()</code>): specify the response variable and predictor variables</p></li>
<li><p><strong>Write the recipe</strong> (<code>step_zzz()</code>): define the pre-processing steps, such as imputation, creating dummy variables, scaling, and more</p></li>
<li><p><strong>Prepare the recipe</strong> (<code>prep()</code>): provide a dataset to base each step on (e.g.&nbsp;if one of the steps is to remove variables that only have one unique value, then you need to give it a dataset so it can decide which variables satisfy this criteria to ensure that it is doing the same thing to every dataset you apply it to)</p></li>
<li><p><strong>Bake the recipe</strong> (<code>bake()</code>): apply the pre-processing steps to your datasets</p></li>
</ol>
<p>In this blog post I’ll walk you through these three steps, touching on the wide range of things that recipes can do, while hopefully convincing you that recipes makes life really easy and that you should use it next time you need to do some pre-processing.</p>
</section>
<section id="a-simple-example-cupcakes-or-muffins" class="level2">
<h2 class="anchored" data-anchor-id="a-simple-example-cupcakes-or-muffins">A simple example: cupcakes or muffins?</h2>
<p>To keep things in the theme, I’m going to use a dataset from <a href="https://github.com/adashofdata">Alice Zhao’s git repo</a> that I found when I typed “cupcake dataset” into Google. Our goal will be to classify recipes as either cupcakes or muffins based on the quantities used for each of the ingredients. So perhaps we will learn two things today: (1) how to use the recipes package, and (2) the difference between cupcakes and muffins.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># set up so that all variables of tibbles are printed</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">dplyr.width =</span> <span class="cn" style="color: #8f5902;">Inf</span>)</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># load useful libraries</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(recipes) <span class="co" style="color: #5E5E5E;"># could also load the tidymodels package</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># load in the data</span></span>
<span id="cb1-7">muffin_cupcake_data_orig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/adashofdata/muffin-cupcake/master/recipes_muffins_cupcakes.csv"</span>)</span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># look at data</span></span>
<span id="cb1-9">muffin_cupcake_data_orig</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 9
   Type    Flour  Milk Sugar Butter   Egg `Baking Powder` Vanilla  Salt
   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;           &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
 1 Muffin     55    28     3      7     5               2       0     0
 2 Muffin     47    24    12      6     9               1       0     0
 3 Muffin     47    23    18      6     4               1       0     0
 4 Muffin     45    11    17     17     8               1       0     0
 5 Muffin     50    25    12      6     5               2       1     0
 6 Muffin     55    27     3      7     5               2       1     0
 7 Muffin     54    27     7      5     5               2       0     0
 8 Muffin     47    26    10     10     4               1       0     0
 9 Muffin     50    17    17      8     6               1       0     0
10 Muffin     50    17    17     11     4               1       0     0
11 Cupcake    39     0    26     19    14               1       1     0
12 Cupcake    42    21    16     10     8               3       0     0
13 Cupcake    34    17    20     20     5               2       1     0
14 Cupcake    39    13    17     19    10               1       1     0
15 Cupcake    38    15    23     15     8               0       1     0
16 Cupcake    42    18    25      9     5               1       0     0
17 Cupcake    36    14    21     14    11               2       1     0
18 Cupcake    38    15    31      8     6               1       1     0
19 Cupcake    36    16    24     12     9               1       1     0
20 Cupcake    34    17    23     11    13               0       1     0</code></pre>
</div>
</div>
<p>Since the space in the column name <code>Baking Powder</code> is going to really annoy me, I’m going to do a quick clean where I convert all of the column names to lower case and replace the space with an underscore.</p>
<p>As a side note, I’ve started naming all of my temporary function arguments (lambda functions?) with a period preceding the name. I find it makes it a lot easier to read. As another side note, if you’ve never seen the <code>rename_all()</code> function before, check out my <a href="http://www.rebeccabarter.com/blog/2019-01-23_scoped-verbs/">blog post</a> on scoped verbs!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">muffin_cupcake_data <span class="ot" style="color: #003B4F;">&lt;-</span> muffin_cupcake_data_orig <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-2">  <span class="co" style="color: #5E5E5E;"># rename all columns </span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">rename_all</span>(<span class="cf" style="color: #003B4F;">function</span>(.name) {</span>
<span id="cb3-4">    .name <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-5">      <span class="co" style="color: #5E5E5E;"># replace all names with the lowercase versions</span></span>
<span id="cb3-6">      tolower <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-7">      <span class="co" style="color: #5E5E5E;"># replace all spaces with underscores</span></span>
<span id="cb3-8">      <span class="fu" style="color: #4758AB;">str_replace</span>(<span class="st" style="color: #20794D;">" "</span>, <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb3-9">    })</span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;"># check that this did what I wanted</span></span>
<span id="cb3-11">muffin_cupcake_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 9
   type    flour  milk sugar butter   egg baking_powder vanilla  salt
   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
 1 Muffin     55    28     3      7     5             2       0     0
 2 Muffin     47    24    12      6     9             1       0     0
 3 Muffin     47    23    18      6     4             1       0     0
 4 Muffin     45    11    17     17     8             1       0     0
 5 Muffin     50    25    12      6     5             2       1     0
 6 Muffin     55    27     3      7     5             2       1     0
 7 Muffin     54    27     7      5     5             2       0     0
 8 Muffin     47    26    10     10     4             1       0     0
 9 Muffin     50    17    17      8     6             1       0     0
10 Muffin     50    17    17     11     4             1       0     0
11 Cupcake    39     0    26     19    14             1       1     0
12 Cupcake    42    21    16     10     8             3       0     0
13 Cupcake    34    17    20     20     5             2       1     0
14 Cupcake    39    13    17     19    10             1       1     0
15 Cupcake    38    15    23     15     8             0       1     0
16 Cupcake    42    18    25      9     5             1       0     0
17 Cupcake    36    14    21     14    11             2       1     0
18 Cupcake    38    15    31      8     6             1       1     0
19 Cupcake    36    16    24     12     9             1       1     0
20 Cupcake    34    17    23     11    13             0       1     0</code></pre>
</div>
</div>
<p>Since recipes does a lot of useful stuff for categorical variables as well as with missing values, I’m going to modify the data a little bit so that it’s a bit more interesting (for educational purposes only - don’t ever actually modify your data so it’s more interesting, in science that’s called “fraud”, and fraud is bad).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># add an additional ingredients column that is categorical</span></span>
<span id="cb5-2">muffin_cupcake_data <span class="ot" style="color: #003B4F;">&lt;-</span> muffin_cupcake_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">additional_ingredients =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"fruit"</span>, </span>
<span id="cb5-4">                                    <span class="st" style="color: #20794D;">"fruit"</span>, </span>
<span id="cb5-5">                                    <span class="st" style="color: #20794D;">"none"</span>, </span>
<span id="cb5-6">                                    <span class="st" style="color: #20794D;">"nuts"</span>, </span>
<span id="cb5-7">                                    <span class="st" style="color: #20794D;">"fruit"</span>, </span>
<span id="cb5-8">                                    <span class="st" style="color: #20794D;">"fruit"</span>, </span>
<span id="cb5-9">                                    <span class="st" style="color: #20794D;">"nuts"</span>, </span>
<span id="cb5-10">                                    <span class="st" style="color: #20794D;">"none"</span>, </span>
<span id="cb5-11">                                    <span class="st" style="color: #20794D;">"none"</span>, </span>
<span id="cb5-12">                                    <span class="st" style="color: #20794D;">"nuts"</span>,</span>
<span id="cb5-13">                                    <span class="st" style="color: #20794D;">"icing"</span>,</span>
<span id="cb5-14">                                    <span class="st" style="color: #20794D;">"icing"</span>,</span>
<span id="cb5-15">                                    <span class="st" style="color: #20794D;">"fruit"</span>,</span>
<span id="cb5-16">                                    <span class="st" style="color: #20794D;">"none"</span>,</span>
<span id="cb5-17">                                    <span class="st" style="color: #20794D;">"fruit"</span>,</span>
<span id="cb5-18">                                    <span class="st" style="color: #20794D;">"icing"</span>,</span>
<span id="cb5-19">                                    <span class="st" style="color: #20794D;">"none"</span>,</span>
<span id="cb5-20">                                    <span class="st" style="color: #20794D;">"fruit"</span>,</span>
<span id="cb5-21">                                    <span class="st" style="color: #20794D;">"icing"</span>,</span>
<span id="cb5-22">                                    <span class="st" style="color: #20794D;">"icing"</span>))</span>
<span id="cb5-23"><span class="co" style="color: #5E5E5E;"># add some random missing values here and there just for fun</span></span>
<span id="cb5-24"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">26738</span>)</span>
<span id="cb5-25">muffin_cupcake_data <span class="ot" style="color: #003B4F;">&lt;-</span> muffin_cupcake_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-26">  <span class="co" style="color: #5E5E5E;"># only add missing values to numeric columns</span></span>
<span id="cb5-27">  <span class="fu" style="color: #4758AB;">mutate_if</span>(is.numeric,</span>
<span id="cb5-28">            <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb5-29">              <span class="co" style="color: #5E5E5E;"># randomly decide if 0, 2, or 3 values will be missing from each column</span></span>
<span id="cb5-30">              n_missing <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">0</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb5-31">              <span class="co" style="color: #5E5E5E;"># replace n_missing randomly selected values from each column with NA</span></span>
<span id="cb5-32">              x[<span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">20</span>, n_missing)] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">NA</span></span>
<span id="cb5-33">              <span class="fu" style="color: #4758AB;">return</span>(x)</span>
<span id="cb5-34">              })</span>
<span id="cb5-35">muffin_cupcake_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 10
   type    flour  milk sugar butter   egg baking_powder vanilla  salt
   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
 1 Muffin     55    28     3      7     5             2       0     0
 2 Muffin     47    24    12      6     9             1      NA     0
 3 Muffin     47    23    18      6     4             1       0     0
 4 Muffin     NA    NA    17     17     8            NA       0     0
 5 Muffin     50    25    12      6     5             2       1     0
 6 Muffin     55    27     3      7     5             2       1     0
 7 Muffin     54    27     7      5     5             2       0     0
 8 Muffin     47    26    10     10     4            NA      NA     0
 9 Muffin     50    17    17      8     6             1       0     0
10 Muffin     50    NA    17     11     4             1       0     0
11 Cupcake    39     0    26     19    14             1       1     0
12 Cupcake    42    21    16     10     8             3       0     0
13 Cupcake    NA    17    20     20     5             2       1     0
14 Cupcake    39    13    17     19    10             1       1     0
15 Cupcake    38    15    23     NA     8             0       1     0
16 Cupcake    42    18    25     NA     5             1       0     0
17 Cupcake    36    14    21     14    11             2       1     0
18 Cupcake    38    15    31      8     6             1       1     0
19 Cupcake    36    16    24     12     9             1      NA     0
20 Cupcake    34    17    23     11    13             0       1     0
   additional_ingredients
   &lt;chr&gt;                 
 1 fruit                 
 2 fruit                 
 3 none                  
 4 nuts                  
 5 fruit                 
 6 fruit                 
 7 nuts                  
 8 none                  
 9 none                  
10 nuts                  
11 icing                 
12 icing                 
13 fruit                 
14 none                  
15 fruit                 
16 icing                 
17 none                  
18 fruit                 
19 icing                 
20 icing                 </code></pre>
</div>
</div>
<p>Finally, I’m going to split my data into training and test sets, so that you can see how nicely our recipe can be applied to multiple data frames.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">library</span>(rsample)</span>
<span id="cb7-2">muffin_cupcake_split <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">initial_split</span>(muffin_cupcake_data)</span>
<span id="cb7-3">muffin_cupcake_train <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">training</span>(muffin_cupcake_split)</span>
<span id="cb7-4">muffin_cupcake_test <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">testing</span>(muffin_cupcake_split)</span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;">rm</span>(muffin_cupcake_data)</span></code></pre></div>
</div>
<p>Our training data is</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">muffin_cupcake_train</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 15 × 10
   type    flour  milk sugar butter   egg baking_powder vanilla  salt
   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
 1 Cupcake    42    18    25     NA     5             1       0     0
 2 Muffin     50    17    17      8     6             1       0     0
 3 Cupcake    38    15    23     NA     8             0       1     0
 4 Cupcake    39    13    17     19    10             1       1     0
 5 Muffin     47    26    10     10     4            NA      NA     0
 6 Muffin     55    27     3      7     5             2       1     0
 7 Cupcake    42    21    16     10     8             3       0     0
 8 Muffin     50    NA    17     11     4             1       0     0
 9 Muffin     47    23    18      6     4             1       0     0
10 Cupcake    34    17    23     11    13             0       1     0
11 Cupcake    39     0    26     19    14             1       1     0
12 Cupcake    36    14    21     14    11             2       1     0
13 Muffin     NA    NA    17     17     8            NA       0     0
14 Muffin     50    25    12      6     5             2       1     0
15 Cupcake    36    16    24     12     9             1      NA     0
   additional_ingredients
   &lt;chr&gt;                 
 1 icing                 
 2 none                  
 3 fruit                 
 4 none                  
 5 none                  
 6 fruit                 
 7 icing                 
 8 nuts                  
 9 none                  
10 icing                 
11 icing                 
12 none                  
13 nuts                  
14 fruit                 
15 icing                 </code></pre>
</div>
</div>
<p>and our testing data is</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">muffin_cupcake_test</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 10
  type    flour  milk sugar butter   egg baking_powder vanilla  salt
  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
1 Muffin     55    28     3      7     5             2       0     0
2 Muffin     47    24    12      6     9             1      NA     0
3 Muffin     54    27     7      5     5             2       0     0
4 Cupcake    NA    17    20     20     5             2       1     0
5 Cupcake    38    15    31      8     6             1       1     0
  additional_ingredients
  &lt;chr&gt;                 
1 fruit                 
2 fruit                 
3 nuts                  
4 fruit                 
5 fruit                 </code></pre>
</div>
</div>
</section>
<section id="writing-and-applying-the-recipe" class="level2">
<h2 class="anchored" data-anchor-id="writing-and-applying-the-recipe">Writing and applying the recipe</h2>
<p>Now that we’ve set up our data, we’re ready to write some recipes and do some baking! The first thing we need to do is get the ingredients. We can use formula notation within the <code>recipe()</code> function to do this: the thing we’re trying to predict is the variable to the left of the <code>~</code>, and the predictor variables are the things to the right of it (Since I’m including all of my variables, I could have written <code>type ~ .</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># define the recipe (it looks a lot like applying the lm function)</span></span>
<span id="cb12-2">model_recipe <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(type <span class="sc" style="color: #5E5E5E;">~</span> flour <span class="sc" style="color: #5E5E5E;">+</span> milk <span class="sc" style="color: #5E5E5E;">+</span> sugar <span class="sc" style="color: #5E5E5E;">+</span> butter <span class="sc" style="color: #5E5E5E;">+</span> egg <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb12-3">                         baking_powder <span class="sc" style="color: #5E5E5E;">+</span> vanilla <span class="sc" style="color: #5E5E5E;">+</span> salt <span class="sc" style="color: #5E5E5E;">+</span> additional_ingredients, </span>
<span id="cb12-4">                       <span class="at" style="color: #657422;">data =</span> muffin_cupcake_train)</span></code></pre></div>
</div>
<p>If we print a summary of the <code>model_recipe</code> object, it just shows us the variables we’ve specified, their type, and whether they’re a predictor or an outcome.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">summary</span>(model_recipe)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 4
   variable               type      role      source  
   &lt;chr&gt;                  &lt;list&gt;    &lt;chr&gt;     &lt;chr&gt;   
 1 flour                  &lt;chr [2]&gt; predictor original
 2 milk                   &lt;chr [2]&gt; predictor original
 3 sugar                  &lt;chr [2]&gt; predictor original
 4 butter                 &lt;chr [2]&gt; predictor original
 5 egg                    &lt;chr [2]&gt; predictor original
 6 baking_powder          &lt;chr [2]&gt; predictor original
 7 vanilla                &lt;chr [2]&gt; predictor original
 8 salt                   &lt;chr [2]&gt; predictor original
 9 additional_ingredients &lt;chr [3]&gt; predictor original
10 type                   &lt;chr [3]&gt; outcome   original</code></pre>
</div>
</div>
<section id="writing-the-recipe-steps" class="level3">
<h3 class="anchored" data-anchor-id="writing-the-recipe-steps">Writing the recipe steps</h3>
<p>So now we have our ingredients, we are ready to write the recipe (i.e.&nbsp;describe our pre-processing steps). We write the recipe one step at a time. We have many steps to choose from, including:</p>
<ul>
<li><p><code>step_dummy()</code>: creating dummy variables from categorical variables.</p></li>
<li><p><code>step_zzzimpute()</code>: where instead of “<code>zzz</code>” it is the name of a method, such as <code>step_knnimpute()</code>, <code>step_meanimpute()</code>, <code>step_modeimpute()</code>. I find that the fancier imputation methods are reeeeally slow for decently large datasets, so I would probably do this step outside of the recipes package unless you just want to do a quick mean or mode impute (which, to be honest, I often do).</p></li>
<li><p><code>step_scale()</code>: normalize to have a standard deviation of 1.</p></li>
<li><p><code>step_center()</code>: center to have a mean of 0.</p></li>
<li><p><code>step_range()</code>: normalize numeric data to be within a pre-defined range of values.</p></li>
<li><p><code>step_pca()</code>: create principal component variables from your data.</p></li>
<li><p><code>step_nzv()</code>: remove variables that have (or almost have) the same value for every data point.</p></li>
</ul>
<p>You can also create your own step (which I’ve never felt the need to do, but the details of which can be found here https://tidymodels.github.io/recipes/articles/Custom_Steps.html).</p>
<p>In each step, you need to specify which variables you want to apply it to. There are many ways to do this:</p>
<ol type="1">
<li><p>Specifying the variable name(s) as the first argument</p></li>
<li><p>Standard dplyr selectors:</p>
<ul>
<li><p><code>everything()</code> applies the step to all columns,</p></li>
<li><p><code>contains()</code> allows you to specify column names that contain a specific string,</p></li>
<li><p><code>starts_with()</code> allows you to specify column names that start with a sepcific string,</p></li>
<li><p>etc</p></li>
</ul></li>
<li><p>Functions that specify the role of the variables:</p>
<ul>
<li><p><code>all_predictors()</code> applies the step to the predictor variables only</p></li>
<li><p><code>all_outcomes()</code> applies the step to the outcome variable(s) only</p></li>
</ul></li>
<li><p>Functions that specify the type of the variables:</p>
<ul>
<li><p><code>all_nominal()</code> applies the step to all variables that are nominal (categorical)</p></li>
<li><p><code>all_numeric()</code> applies the step to all variables that are numeric</p></li>
</ul></li>
</ol>
<p>To ignore a specific column, you can specify it’s name with a negative sign as a variable (just like you would in <code>select()</code>)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># define the steps we want to apply</span></span>
<span id="cb15-2">model_recipe_steps <span class="ot" style="color: #003B4F;">&lt;-</span> model_recipe <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-3">  <span class="co" style="color: #5E5E5E;"># mean impute numeric variables</span></span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;">step_impute_mean</span>(<span class="fu" style="color: #4758AB;">all_numeric</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb15-5">  <span class="co" style="color: #5E5E5E;"># convert the additional ingredients variable to dummy variables</span></span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;">step_dummy</span>(additional_ingredients) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb15-7">  <span class="co" style="color: #5E5E5E;"># rescale all numeric variables except for vanilla, salt and baking powder to lie between 0 and 1</span></span>
<span id="cb15-8">  <span class="fu" style="color: #4758AB;">step_range</span>(<span class="fu" style="color: #4758AB;">all_numeric</span>(), <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="sc" style="color: #5E5E5E;">-</span>vanilla, <span class="sc" style="color: #5E5E5E;">-</span>salt, <span class="sc" style="color: #5E5E5E;">-</span>baking_powder) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb15-9">  <span class="co" style="color: #5E5E5E;"># remove predictor variables that are almost the same for every entry</span></span>
<span id="cb15-10">  <span class="fu" style="color: #4758AB;">step_nzv</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>()) </span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">model_recipe_steps</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Recipe ──────────────────────────────────────────────────────────────────────</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Inputs </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Number of variables by role</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>outcome:   1
predictor: 9</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Operations </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• Mean imputation for: all_numeric()</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• Dummy variables from: additional_ingredients</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• Range scaling to [0,1] for: all_numeric(), -vanilla, -salt, -baking_powder</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• Sparse, unbalanced variable filter on: all_predictors()</code></pre>
</div>
</div>
<p>Note that the order in which you apply the steps does matter to some extent. The recommended ordering (<a href="https://tidymodels.github.io/recipes/articles/Ordering.html">taken from here</a>) is</p>
<ol type="1">
<li><p>Impute</p></li>
<li><p>Individual transformations for skewness and other issues</p></li>
<li><p>Discretize (if needed and if you have no other choice)</p></li>
<li><p>Create dummy variables</p></li>
<li><p>Create interactions</p></li>
<li><p>Normalization steps (center, scale, range, etc)</p></li>
<li><p>Multivariate transformation (e.g.&nbsp;PCA, spatial sign, etc)</p></li>
</ol>
</section>
<section id="preparing-the-recipe" class="level3">
<h3 class="anchored" data-anchor-id="preparing-the-recipe">Preparing the recipe</h3>
<p>Next, we need to provide a dataset on which to base the pre-processing steps. This allows the same recipe to be applied to multiple datasets.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">prepped_recipe <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">prep</span>(model_recipe_steps, <span class="at" style="color: #657422;">training =</span> muffin_cupcake_train)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">prepped_recipe</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Recipe ──────────────────────────────────────────────────────────────────────</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Inputs </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Number of variables by role</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>outcome:   1
predictor: 9</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Training information </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Training data contained 15 data points and 6 incomplete rows.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Operations </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• Mean imputation for: flour, milk, sugar, butter, egg, ... | Trained</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• Dummy variables from: additional_ingredients | Trained</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• Range scaling to [0,1] for: flour, milk, sugar, butter, egg, ... | Trained</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• Sparse, unbalanced variable filter removed: salt | Trained</code></pre>
</div>
</div>
</section>
<section id="bake-the-recipe" class="level3">
<h3 class="anchored" data-anchor-id="bake-the-recipe">Bake the recipe</h3>
<p>Next, you apply your recipe to your datasets.</p>
<p>So what did our recipe do?</p>
<ul>
<li><p><code>step_meanimpute(all_numeric())</code> imputed all of the missing values with the mean value for that variable</p></li>
<li><p><code>step_dummy(additional_ingredients)</code> converted the <code>additional_ingredients</code> into three dummy variables corresponding to three of the four levels of the original variable</p></li>
<li><p><code>step_range(all_numeric(), min = 0, max = 1, -vanilla, -salt, -baking_powder)</code> converted the range of all of the numeric variables except for those specified to lie between 0 and 1</p></li>
<li><p><code>step_nzv(all_predictors())</code> removed the <code>salt</code> variable since it was 0 across all rows (except where it was missing)</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">muffin_cupcake_train_preprocessed <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">bake</span>(prepped_recipe, muffin_cupcake_train) </span>
<span id="cb46-2">muffin_cupcake_train_preprocessed</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 15 × 11
    flour  milk sugar butter   egg baking_powder vanilla type   
    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt;  
 1 0.381  0.667 0.957 0.426    0.1          1      0     Cupcake
 2 0.762  0.630 0.609 0.154    0.2          1      0     Muffin 
 3 0.190  0.556 0.870 0.426    0.4          0      1     Cupcake
 4 0.238  0.481 0.609 1        0.6          1      1     Cupcake
 5 0.619  0.963 0.304 0.308    0            1.23   0.538 Muffin 
 6 1      1     0     0.0769   0.1          2      1     Muffin 
 7 0.381  0.778 0.565 0.308    0.4          3      0     Cupcake
 8 0.762  0.661 0.609 0.385    0            1      0     Muffin 
 9 0.619  0.852 0.652 0        0            1      0     Muffin 
10 0      0.630 0.870 0.385    0.9          0      1     Cupcake
11 0.238  0     1     1        1            1      1     Cupcake
12 0.0952 0.519 0.783 0.615    0.7          2      1     Cupcake
13 0.439  0.661 0.609 0.846    0.4          1.23   0     Muffin 
14 0.762  0.926 0.391 0        0.1          2      1     Muffin 
15 0.0952 0.593 0.913 0.462    0.5          1      0.538 Cupcake
   additional_ingredients_icing additional_ingredients_none
                          &lt;dbl&gt;                       &lt;dbl&gt;
 1                            1                           0
 2                            0                           1
 3                            0                           0
 4                            0                           1
 5                            0                           1
 6                            0                           0
 7                            1                           0
 8                            0                           0
 9                            0                           1
10                            1                           0
11                            1                           0
12                            0                           1
13                            0                           0
14                            0                           0
15                            1                           0
   additional_ingredients_nuts
                         &lt;dbl&gt;
 1                           0
 2                           0
 3                           0
 4                           0
 5                           0
 6                           0
 7                           0
 8                           1
 9                           0
10                           0
11                           0
12                           0
13                           1
14                           0
15                           0</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">muffin_cupcake_test_preprocessed <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">bake</span>(prepped_recipe, muffin_cupcake_test)</span>
<span id="cb48-2">muffin_cupcake_test_preprocessed</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 11
  flour  milk sugar butter   egg baking_powder vanilla type   
  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt;  
1 1     1     0     0.0769   0.1             2   0     Muffin 
2 0.619 0.889 0.391 0        0.5             1   0.538 Muffin 
3 0.952 1     0.174 0        0.1             2   0     Muffin 
4 0.439 0.630 0.739 1        0.1             2   1     Cupcake
5 0.190 0.556 1     0.154    0.2             1   1     Cupcake
  additional_ingredients_icing additional_ingredients_none
                         &lt;dbl&gt;                       &lt;dbl&gt;
1                            0                           0
2                            0                           0
3                            0                           0
4                            0                           0
5                            0                           0
  additional_ingredients_nuts
                        &lt;dbl&gt;
1                           0
2                           0
3                           1
4                           0
5                           0</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>R</category>
  <category>workflow</category>
  <category>machine learning</category>
  <guid>https://www.rebeccabarter.com/blog/2019-06-06_pre_processing.html</guid>
  <pubDate>Thu, 06 Jun 2019 06:00:00 GMT</pubDate>
</item>
<item>
  <title>A quick guide to developing a reproducible and consistent data science workflow</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2019-03-07_reproducible_pipeline.html</link>
  <description><![CDATA[ 




<p>When you’re learning to code and perform data analysis, it can be overwhelming to figure out how to structure your projects. To help data scientists develop a reproducible and consistent workflow, I’ve put together a short GitHub-based document with some guiding advice: <a href="https://github.com/rlbarter/reproducibility-workflow">https://github.com/rlbarter/reproducibility-workflow</a></p>
<p>If you’re interested in contributing or improving this document, please get in touch, or even better, submit a pull request <a href="https://github.com/rlbarter/reproducibility-workflow">https://github.com/rlbarter/reproducibility-workflow</a>!</p>
<p>The document as of writing is shown below.</p>
<section id="reproducbility-workflow" class="level2">
<h2 class="anchored" data-anchor-id="reproducbility-workflow">Reproducbility workflow</h2>
<p>Every project should consist of a single well structured directory with meaningful subdirectories. Every project should be its own git repository that is hosted on GitHub.</p>
<p>Data cleaning and analyses should be carefully documented in a Jupyter Notebook or R markdown file and should be created with reproducibility in mind. Everyone on the team (and future you) should be able to re-create what you have performed.</p>
<p>The overall purpose is to have an organized project structure in place so that the project is easily approachable to many different individuals.</p>
<blockquote class="blockquote">
<p>Someone unfamiliar with your project should be able to look at your computer files and understand in detail what you did and why - Bill Noble</p>
</blockquote>
<p>An example of a reproducible project that follows this workflow lives in the <a href="https://github.com/rlbarter/reproducibility-workflow/tree/master/project_example">project_example/</a> folder.</p>
<section id="project-structure" class="level3">
<h3 class="anchored" data-anchor-id="project-structure">Project Structure</h3>
<p>The project will typically consist of the following subdirectories:</p>
<section id="data" class="level4">
<h4 class="anchored" data-anchor-id="data">Data</h4>
<p>Original raw data files data should be backed up on something like Google Drive, Dropbox or Box. The raw data itself should never be touched manually. Instead, you should have scripts or notebooks that load the raw data into an R or Python environment for in-environment data manipulation (this will not modify the raw data files themselves).</p>
<p>Any data that is produced by code should be saved in the <code>data/processed_data/</code> subdirectory.</p>
</section>
<section id="documents" class="level4">
<h4 class="anchored" data-anchor-id="documents">Documents</h4>
<p>This is a good place to keep meeting notes, data dictionaries, and any other associated materials.</p>
</section>
<section id="code" class="level4">
<h4 class="anchored" data-anchor-id="code">Code</h4>
<p>There are three types of code documents:</p>
<ol type="1">
<li><p><strong>Function scripts</strong> (.R, .py): scripts that contain reusable functions that will be called in the action scripts below (and possibly in the exploration notebooks). By convention, function scripts are given the name <code>xx_funs_yy.R</code>, where <code>xx</code> is a number and <code>yy</code> describes what the functions are for (e.g.&nbsp;<code>01_funs_clean_data.R</code>).</p></li>
<li><p><strong>Action scripts</strong> (.R, .py): scripts that perform activities such as a detailed data cleaning pipeline, or running many models. Often these scripts will load in data, do something to it (e.g.&nbsp;clean it or fit a model to it) and will then save a new object (such as a cleaned dataset or model results). By convention, action scripts are given the name <code>xx_do_yy.R</code>, where <code>xx</code> is a number and <code>yy</code> describes what action is undertaken by running the script (e.g.&nbsp;<code>01_do_clean_data.R</code>).</p></li>
<li><p><strong>Exploration notebooks</strong> (.Rmd, .ipynb): R Markdown or Jupyter notebook files that are used to produce figures and explanatory files that contain figures and explanations of data cleaning steps and results of analyses. These are the files that an external viewer would find useful to understand your data and analysis.</p></li>
</ol>
<p>Scripts that are run sequentially are numbered accordingly. An example of a project structure is shown below. Note that in the example below the functions folder is nested as a subdirectory of the scripts folder which contains the actionable scripts. This makes sense when the functions are only called in the actionable scripts (but not in the exploration notebooks).</p>
<pre><code>project
│   README.md
└───data/
│       └───raw_data/
│           │   data_orig.csv
│       └───processed_data/
│           │   data_clean.csv
│       └───results/
│           │   model_results.csv
└───documents/
│       meeting_notes.md
│       data_dictionary.md
└───code/
│       └───exploration/
│           │   01_data_exploration.Rmd
│           │   02_model_results.Rmd
│       └───scripts/
│           │   01_do_clean_data.R
│           │   02_do_model_data.R
│           └───functions/
│               │   01_funs_clean_data.R
│               │   02_funs_model_data.R
</code></pre>
</section>
</section>
<section id="syntax-and-conventions" class="level3">
<h3 class="anchored" data-anchor-id="syntax-and-conventions">Syntax and conventions</h3>
<p>All filenames are always lowercase and use underscores to separate words.</p>
<p>Code should follow an appropriate style guide:</p>
<ul>
<li>R: <a href="https://style.tidyverse.org/">Tidyverse Style Guide</a> (based on the R Google Style Guide)</li>
<li>Python: <a href="https://google.github.io/styleguide/pyguide.html">Google Style Guide</a></li>
</ul>
</section>
<section id="resources" class="level3">
<h3 class="anchored" data-anchor-id="resources">Resources</h3>
<ul>
<li><p>I wrote a much more detailed blog post on my workflow a few years ago that can be found here: <a href="http://www.rebeccabarter.com/blog/2017-08-16-data-science-workflow/">http://www.rebeccabarter.com/blog/2017-08-16-data-science-workflow/</a>. My workflow has changed a bit since then, but the underlying ideas are all more or less the same.</p></li>
<li><p>William Noble’s article on organizing computational biology projects: <a href="https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1000424">https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1000424</a></p></li>
<li><p>Marwick, Boettiger and Mullen’s article on packaging data analytical work reproducibly: <a href="https://ro.uow.edu.au/cgi/viewcontent.cgi?article=6445&amp;context=smhpapers">https://ro.uow.edu.au/cgi/viewcontent.cgi?article=6445&amp;context=smhpapers</a></p></li>
</ul>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>Thanks very much to Ciera Martinez for sharing her <a href="https://github.com/DiscoveryDNA/team_neural_network/blob/master/data_managment.md">project workflow</a>.</p>
<p>I’d also like to acknowledge the <em>Meta Research and Best Practices</em> working group (formerly the <em>Reproducility working group</em>) at the Berkeley Institute for Data Science (BIDS) for insightful discussions that have helped me form my own workflow over the years.</p>


</section>
</section>

 ]]></description>
  <category>data science</category>
  <category>workflow</category>
  <category>reproducibility</category>
  <guid>https://www.rebeccabarter.com/blog/2019-03-07_reproducible_pipeline.html</guid>
  <pubDate>Sat, 23 Mar 2019 06:00:00 GMT</pubDate>
</item>
<item>
  <title>mutate_all(), select_if(), summarise_at()… what’s the deal with scoped verbs?!</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2019-01-23_scoped-verbs.html</link>
  <description><![CDATA[ 




<p>Note: Scoped verbs have now essentially been superseded by <code>accross()</code> (soon to be available in dplyr 1.0.0). See <a href="http://www.rebeccabarter.com/blog/2020-07-09-across/">http://www.rebeccabarter.com/blog/2020-07-09-across/</a> for details.</p>
<p>I often find myself wishing that I could apply the same <code>mutate</code> function to several columns in a data frame at once, such as convert all factors to characters, or do something to all columns that have missing values, or select all variables whose names end with <code>_important</code>. When I first googled these problems around a year ago, I started to see solutions that use weird extensions of the basic <code>mutate()</code>, <code>select()</code>, <code>rename()</code>, and <code>summarise()</code> dplyr functions that look like <code>summarise_all()</code>, <code>filter_at()</code>, <code>mutate_if()</code>, and so on. I have since learned that these functions are called <strong>“scoped verbs”</strong> (where “scoped” means that they operate only on a selection of variables).</p>
<p>Unfortunately, despite my extensive googling, I never really found a satisfactory description of <em>how</em> to use these functions in general, I think primarily because the documentation for these functions is not particularly useful (try <code>?mutate_at()</code>).</p>
<p>Fortunately, I recently attended a series of lightening talks hosted by the RLadies SF chapter where Sara Altman pointed us towards a <a href="https://dcl-2017-04.github.io/curriculum/manip-scoped.html">summary document</a> that Hadley Wickham wrote for the Data Science class he helped create at Stanford in 2017 (this class is now taught by Sara Altman herself).</p>
<p>To summarise what I will demonstrate below, there are three scoped variants of the standard <code>mutate</code>, <code>summarise</code>, <code>rename</code> and <code>select</code> (and <code>transmute</code>) dplyr functions that can be specified by the following suffixes:</p>
<ul>
<li><p><code>_if</code>: allows you to pick variables that satisfy some logical criteria such as <code>is.numeric()</code> or <code>is.character()</code> (e.g.&nbsp;summarising only the numeric columns)</p></li>
<li><p><code>_at</code>: allows you to perform an operation only on variables specified by name (e.g.&nbsp;mutating only the columns whose name ends with “_date”)</p></li>
<li><p><code>_all</code>: allows you to perform an operation on all variables at once (e.g.&nbsp;calculating the number of missing values in every column)</p></li>
</ul>
<p>To explain how these functions all work, I will use the dataset from a survey of 800 Pittsburgh residents on whether or not they approve of self-driving car companies testing their autonomous vehicles on the streets of Pittsburgh (there have several articles on this issue in recent times in case you missed them: <a href="https://www.wired.com/story/uber-returns-self-driving-after-deadly-crash/">1</a>, <a href="https://www.nytimes.com/2018/12/05/technology/uber-self-driving-cars.html">2</a>). The data can usually be downloaded from data.gov (but is currently unavailable due to the current Government Shutdown - I will update this with an actual link to the data one day). For now you can download the data from <a href="../data/bikepghpublic.csv">here</a>.</p>
<p>A random sample of 10 rows of this dataset is shown below. To make it easy to see what’s going on, I’ll restrict my analysis below to these 10 rows</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># load in the only library you ever really need</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(lubridate)</span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># load in survey data</span></span>
<span id="cb1-5">av_survey <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"data/bikepghpublic.csv"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">45679</span>)</span>
<span id="cb2-2">av_survey_sample <span class="ot" style="color: #003B4F;">&lt;-</span> av_survey <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-3">  <span class="co" style="color: #5E5E5E;"># select jsut a few columns and give some more intuitive column names</span></span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;">select</span>(<span class="at" style="color: #657422;">id =</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">Response ID</span><span class="st" style="color: #20794D;">`</span>,</span>
<span id="cb2-5">         <span class="at" style="color: #657422;">start_date =</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">Start Date</span><span class="st" style="color: #20794D;">`</span>, </span>
<span id="cb2-6">         <span class="at" style="color: #657422;">end_date =</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">End Date</span><span class="st" style="color: #20794D;">`</span>,</span>
<span id="cb2-7">         <span class="at" style="color: #657422;">interacted_with_av_as_pedestrian =</span> InteractPedestrian,</span>
<span id="cb2-8">         <span class="at" style="color: #657422;">interacted_with_av_as_cyclist =</span> InteractBicycle,</span>
<span id="cb2-9">         <span class="at" style="color: #657422;">circumstanses_of_interaction =</span> CircumstancesCoded, <span class="co" style="color: #5E5E5E;"># lol @ typo in data</span></span>
<span id="cb2-10">         <span class="at" style="color: #657422;">approve_av_testing_pgh =</span> FeelingsProvingGround) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-11">  <span class="co" style="color: #5E5E5E;"># take a random sample of 10 rows</span></span>
<span id="cb2-12">  <span class="fu" style="color: #4758AB;">sample_n</span>(<span class="dv" style="color: #AD0000;">10</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-13">  <span class="co" style="color: #5E5E5E;"># make data frame so that we view the whole thing</span></span>
<span id="cb2-14">  <span class="fu" style="color: #4758AB;">as.data.frame</span>()</span>
<span id="cb2-15">av_survey_sample</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          id                 start_date                   end_date
1  260381029  02/24/2017 3:14:19 AM PST  02/24/2017 3:18:05 AM PST
2  260822947  03/03/2017 7:08:33 AM PST  03/03/2017 7:19:15 AM PST
3  260907069  03/06/2017 5:57:07 PM PST  03/06/2017 5:59:08 PM PST
4  261099035  03/08/2017 3:05:41 PM PST  03/09/2017 7:17:53 AM PST
5  260332379  02/23/2017 9:09:11 AM PST  02/23/2017 9:11:07 AM PST
6  260355021 02/23/2017 10:11:52 PM PST 02/23/2017 10:20:02 PM PST
7  260350676  02/23/2017 6:10:42 PM PST  02/23/2017 6:13:59 PM PST
8  261092370 03/08/2017 11:22:43 AM PST 03/08/2017 11:25:22 AM PST
9  260332519  02/23/2017 9:16:14 AM PST  02/23/2017 9:21:40 AM PST
10 260351560  02/23/2017 6:40:54 PM PST  02/23/2017 6:42:02 PM PST
   interacted_with_av_as_pedestrian interacted_with_av_as_cyclist
1                               Yes                           Yes
2                                No                           Yes
3                               Yes                           Yes
4                                No                           Yes
5                                No                           Yes
6                               Yes                           Yes
7                                No                            No
8                          Not sure                      Not sure
9                               Yes                            No
10                               No                            No
   circumstanses_of_interaction approve_av_testing_pgh
1                             2                Approve
2                             4             Disapprove
3                            NA                Approve
4                             3       Somewhat Approve
5                            NA       Somewhat Approve
6                             1                Approve
7                            NA                Approve
8                            NA    Somewhat Disapprove
9                             2                Approve
10                           NA    Somewhat Disapprove</code></pre>
</div>
</div>
<section id="a-quick-useful-aside-using-shorthand-for-functions" class="level1">
<h1>A quick useful aside: Using shorthand for functions</h1>
<p>For many of the examples below, I will be using the <code>~fun(.x)</code> shorthand for writing temporary functions. If you’ve never seen this shorthand before it’s incredibly useful. As an example, here are three ways of counting the number of missing values in each column of a data frame.</p>
<p>The first approach uses the traditional <code>sapply()</code> function and temporary function syntax.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># using apply and the normal temporary function syntax</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">sapply</span>(av_survey_sample, <span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                              id                       start_date 
                               0                                0 
                        end_date interacted_with_av_as_pedestrian 
                               0                                0 
   interacted_with_av_as_cyclist     circumstanses_of_interaction 
                               0                                5 
          approve_av_testing_pgh 
                               0 </code></pre>
</div>
</div>
<p>The second still uses the temporary function syntax, but is using the <code>map_dbl()</code> function from the <code>purrr</code> package instead of the old-school <code>sapply()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># using purrr::map_dbl and the normal temporary function syntax</span></span>
<span id="cb6-2">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">map_dbl</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">is.na</span>(x)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                              id                       start_date 
                               0                                0 
                        end_date interacted_with_av_as_pedestrian 
                               0                                0 
   interacted_with_av_as_cyclist     circumstanses_of_interaction 
                               0                                5 
          approve_av_testing_pgh 
                               0 </code></pre>
</div>
</div>
<p>The third uses the <code>map_dbl()</code> function with the <code>~fun(.x)</code> syntax.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># using purrr::map_dbl and the `~fun(.x)` temporary function syntax</span></span>
<span id="cb8-2">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">map_dbl</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">is.na</span>(.x)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                              id                       start_date 
                               0                                0 
                        end_date interacted_with_av_as_pedestrian 
                               0                                0 
   interacted_with_av_as_cyclist     circumstanses_of_interaction 
                               0                                5 
          approve_av_testing_pgh 
                               0 </code></pre>
</div>
</div>
</section>
<section id="the-_if-scoped-variant-perform-an-operation-on-variables-that-satisfy-a-logical-criteria" class="level1">
<h1>The _if() scoped variant: perform an operation on variables that satisfy a logical criteria</h1>
<p><code>_if</code> allows you to perform an operation on variables that satisfy some logical criteria such as <code>is.numeric()</code> or <code>is.character()</code>.</p>
<section id="select_if" class="level2">
<h2 class="anchored" data-anchor-id="select_if">select_if()</h2>
<p>For instance, we can use <code>select_if()</code> to extract the numeric columns of the tibble only.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select_if</span>(is.numeric)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          id circumstanses_of_interaction
1  260381029                            2
2  260822947                            4
3  260907069                           NA
4  261099035                            3
5  260332379                           NA
6  260355021                            1
7  260350676                           NA
8  261092370                           NA
9  260332519                            2
10 260351560                           NA</code></pre>
</div>
</div>
<p>We could also apply use more complex logical statements, for example by selecting columns that have at least one missing value.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-2">  <span class="co" style="color: #5E5E5E;"># select columns with at least one NA</span></span>
<span id="cb12-3">  <span class="co" style="color: #5E5E5E;"># the expression evaluates to TRUE if there is one or more missing values</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;">select_if</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">is.na</span>(.x)) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   circumstanses_of_interaction
1                             2
2                             4
3                            NA
4                             3
5                            NA
6                             1
7                            NA
8                            NA
9                             2
10                           NA</code></pre>
</div>
</div>
</section>
<section id="rename_if" class="level2">
<h2 class="anchored" data-anchor-id="rename_if">rename_if()</h2>
<p>We could rename columns that satisfy a logical expression using <code>rename_if()</code>. For instance, we can add a <code>num_</code> prefix to all numeric column names.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb14-2">  <span class="co" style="color: #5E5E5E;"># only rename numeric columns by adding a "num_" prefix</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">rename_if</span>(is.numeric, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"num_"</span>, .x))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      num_id                 start_date                   end_date
1  260381029  02/24/2017 3:14:19 AM PST  02/24/2017 3:18:05 AM PST
2  260822947  03/03/2017 7:08:33 AM PST  03/03/2017 7:19:15 AM PST
3  260907069  03/06/2017 5:57:07 PM PST  03/06/2017 5:59:08 PM PST
4  261099035  03/08/2017 3:05:41 PM PST  03/09/2017 7:17:53 AM PST
5  260332379  02/23/2017 9:09:11 AM PST  02/23/2017 9:11:07 AM PST
6  260355021 02/23/2017 10:11:52 PM PST 02/23/2017 10:20:02 PM PST
7  260350676  02/23/2017 6:10:42 PM PST  02/23/2017 6:13:59 PM PST
8  261092370 03/08/2017 11:22:43 AM PST 03/08/2017 11:25:22 AM PST
9  260332519  02/23/2017 9:16:14 AM PST  02/23/2017 9:21:40 AM PST
10 260351560  02/23/2017 6:40:54 PM PST  02/23/2017 6:42:02 PM PST
   interacted_with_av_as_pedestrian interacted_with_av_as_cyclist
1                               Yes                           Yes
2                                No                           Yes
3                               Yes                           Yes
4                                No                           Yes
5                                No                           Yes
6                               Yes                           Yes
7                                No                            No
8                          Not sure                      Not sure
9                               Yes                            No
10                               No                            No
   num_circumstanses_of_interaction approve_av_testing_pgh
1                                 2                Approve
2                                 4             Disapprove
3                                NA                Approve
4                                 3       Somewhat Approve
5                                NA       Somewhat Approve
6                                 1                Approve
7                                NA                Approve
8                                NA    Somewhat Disapprove
9                                 2                Approve
10                               NA    Somewhat Disapprove</code></pre>
</div>
</div>
</section>
<section id="mutate_if" class="level2">
<h2 class="anchored" data-anchor-id="mutate_if">mutate_if()</h2>
<p>We could similarly use <code>mutate_if()</code> to mutate columns that satisfy specified logical conditions. In the example below, we mutate all columns that have at least one missing value by replacing <code>NA</code> with <code>"missing"</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-2">  <span class="co" style="color: #5E5E5E;"># only mutate columns with at least one NA</span></span>
<span id="cb16-3">  <span class="co" style="color: #5E5E5E;"># replace each NA value with the character "missing"</span></span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">is.na</span>(.x)) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb16-5">            <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">is.na</span>(.x), <span class="st" style="color: #20794D;">"missing"</span>, <span class="fu" style="color: #4758AB;">as.character</span>(.x)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          id                 start_date                   end_date
1  260381029  02/24/2017 3:14:19 AM PST  02/24/2017 3:18:05 AM PST
2  260822947  03/03/2017 7:08:33 AM PST  03/03/2017 7:19:15 AM PST
3  260907069  03/06/2017 5:57:07 PM PST  03/06/2017 5:59:08 PM PST
4  261099035  03/08/2017 3:05:41 PM PST  03/09/2017 7:17:53 AM PST
5  260332379  02/23/2017 9:09:11 AM PST  02/23/2017 9:11:07 AM PST
6  260355021 02/23/2017 10:11:52 PM PST 02/23/2017 10:20:02 PM PST
7  260350676  02/23/2017 6:10:42 PM PST  02/23/2017 6:13:59 PM PST
8  261092370 03/08/2017 11:22:43 AM PST 03/08/2017 11:25:22 AM PST
9  260332519  02/23/2017 9:16:14 AM PST  02/23/2017 9:21:40 AM PST
10 260351560  02/23/2017 6:40:54 PM PST  02/23/2017 6:42:02 PM PST
   interacted_with_av_as_pedestrian interacted_with_av_as_cyclist
1                               Yes                           Yes
2                                No                           Yes
3                               Yes                           Yes
4                                No                           Yes
5                                No                           Yes
6                               Yes                           Yes
7                                No                            No
8                          Not sure                      Not sure
9                               Yes                            No
10                               No                            No
   circumstanses_of_interaction approve_av_testing_pgh
1                             2                Approve
2                             4             Disapprove
3                       missing                Approve
4                             3       Somewhat Approve
5                       missing       Somewhat Approve
6                             1                Approve
7                       missing                Approve
8                       missing    Somewhat Disapprove
9                             2                Approve
10                      missing    Somewhat Disapprove</code></pre>
</div>
</div>
</section>
<section id="summarise_if" class="level2">
<h2 class="anchored" data-anchor-id="summarise_if">summarise_if()</h2>
<p>Similarly, <code>summarise_if()</code> will summarise columns that satisfy the specified logical conditions. Below, we summarise each character column by reporting the most common value (but for some reason there is no <code>mode()</code> function in R, so we need to write our own).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># function to calculate the mode (most common) observation</span></span>
<span id="cb18-2">mode <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;">names</span>(<span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">table</span>(x)))[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb18-4">}</span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;"># summarise character</span></span>
<span id="cb18-6">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-7">  <span class="fu" style="color: #4758AB;">summarise_if</span>(is.character, mode)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                  start_date                   end_date
1 02/23/2017 10:11:52 PM PST 02/23/2017 10:20:02 PM PST
  interacted_with_av_as_pedestrian interacted_with_av_as_cyclist
1                         Not sure                      Not sure
  approve_av_testing_pgh
1             Disapprove</code></pre>
</div>
</div>
</section>
</section>
<section id="the-_at-scoped-variant-perform-an-operation-only-on-variables-specified-by-name" class="level1">
<h1>The _at() scoped variant: perform an operation only on variables specified by name</h1>
<p><code>_at</code> allows you to perform an operation only on variables specified by name.</p>
<p>To specify which variables you want to operate on, you need to include the variable names inside the <code>vars()</code> function as the first argument. I think of as like <code>vars()</code> like <code>c()</code> to provide multiple values (in this case variable names) as a single argument. For example <code>av_survey_sample %&gt;% mutate_at(vars(start_date, end_date), mdy_hms)</code> will only mutate the <code>start_date</code> and <code>end_date</code> variables by converting them to lubridate format using the <code>mdy_hms</code> function.</p>
<p>These variables can be specified explicitly by name within the <code>vars()</code> function, or using the <strong>select_helpers</strong> within the <code>vars()</code> function.</p>
<section id="select-helpers" class="level2">
<h2 class="anchored" data-anchor-id="select-helpers">Select helpers</h2>
<p>Select helpers are functions that you can use within <code>select()</code> to help specify which variables you want to select. The options are</p>
<ul>
<li><p><code>starts_with()</code>: select all variables that start with a specified character string</p></li>
<li><p><code>ends_with()</code>: select all variables that end with a specified character string</p></li>
<li><p><code>contains()</code>: select all variables that contain a specified character string</p></li>
<li><p><code>matches()</code>: select variables that match a specified character string</p></li>
<li><p><code>one_of()</code>: selects variables that match any entries in the specified character vector</p></li>
<li><p><code>num_range()</code>: selects variables that are numbered (e.g.&nbsp;columns named <code>V1</code>, <code>V2</code>, <code>V3</code> would be selected by <code>select(num_range("V", 1:3))</code>)</p></li>
</ul>
<p>There are many ways that we could select the <code>date</code> variables using the <code>ends_with()</code> and <code>contains()</code> select helpers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># selecting the date columns by providing their names</span></span>
<span id="cb20-2">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(start_date, end_date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                   start_date                   end_date
1   02/24/2017 3:14:19 AM PST  02/24/2017 3:18:05 AM PST
2   03/03/2017 7:08:33 AM PST  03/03/2017 7:19:15 AM PST
3   03/06/2017 5:57:07 PM PST  03/06/2017 5:59:08 PM PST
4   03/08/2017 3:05:41 PM PST  03/09/2017 7:17:53 AM PST
5   02/23/2017 9:09:11 AM PST  02/23/2017 9:11:07 AM PST
6  02/23/2017 10:11:52 PM PST 02/23/2017 10:20:02 PM PST
7   02/23/2017 6:10:42 PM PST  02/23/2017 6:13:59 PM PST
8  03/08/2017 11:22:43 AM PST 03/08/2017 11:25:22 AM PST
9   02/23/2017 9:16:14 AM PST  02/23/2017 9:21:40 AM PST
10  02/23/2017 6:40:54 PM PST  02/23/2017 6:42:02 PM PST</code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># selecting the columns that end with "_date"</span></span>
<span id="cb22-2">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(<span class="fu" style="color: #4758AB;">ends_with</span>(<span class="st" style="color: #20794D;">"_date"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                   start_date                   end_date
1   02/24/2017 3:14:19 AM PST  02/24/2017 3:18:05 AM PST
2   03/03/2017 7:08:33 AM PST  03/03/2017 7:19:15 AM PST
3   03/06/2017 5:57:07 PM PST  03/06/2017 5:59:08 PM PST
4   03/08/2017 3:05:41 PM PST  03/09/2017 7:17:53 AM PST
5   02/23/2017 9:09:11 AM PST  02/23/2017 9:11:07 AM PST
6  02/23/2017 10:11:52 PM PST 02/23/2017 10:20:02 PM PST
7   02/23/2017 6:10:42 PM PST  02/23/2017 6:13:59 PM PST
8  03/08/2017 11:22:43 AM PST 03/08/2017 11:25:22 AM PST
9   02/23/2017 9:16:14 AM PST  02/23/2017 9:21:40 AM PST
10  02/23/2017 6:40:54 PM PST  02/23/2017 6:42:02 PM PST</code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># selecting the columns that contain "date"</span></span>
<span id="cb24-2">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(<span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">"date"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                   start_date                   end_date
1   02/24/2017 3:14:19 AM PST  02/24/2017 3:18:05 AM PST
2   03/03/2017 7:08:33 AM PST  03/03/2017 7:19:15 AM PST
3   03/06/2017 5:57:07 PM PST  03/06/2017 5:59:08 PM PST
4   03/08/2017 3:05:41 PM PST  03/09/2017 7:17:53 AM PST
5   02/23/2017 9:09:11 AM PST  02/23/2017 9:11:07 AM PST
6  02/23/2017 10:11:52 PM PST 02/23/2017 10:20:02 PM PST
7   02/23/2017 6:10:42 PM PST  02/23/2017 6:13:59 PM PST
8  03/08/2017 11:22:43 AM PST 03/08/2017 11:25:22 AM PST
9   02/23/2017 9:16:14 AM PST  02/23/2017 9:21:40 AM PST
10  02/23/2017 6:40:54 PM PST  02/23/2017 6:42:02 PM PST</code></pre>
</div>
</div>
<p>If you ever find yourself wanting to provide variable names as characters, the <code>matches()</code> and <code>one_of()</code> select helpers can help you do that.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># provide matches with a single character variables</span></span>
<span id="cb26-2">variable <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"start_date"</span></span>
<span id="cb26-3">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(<span class="fu" style="color: #4758AB;">matches</span>(variable))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                   start_date
1   02/24/2017 3:14:19 AM PST
2   03/03/2017 7:08:33 AM PST
3   03/06/2017 5:57:07 PM PST
4   03/08/2017 3:05:41 PM PST
5   02/23/2017 9:09:11 AM PST
6  02/23/2017 10:11:52 PM PST
7   02/23/2017 6:10:42 PM PST
8  03/08/2017 11:22:43 AM PST
9   02/23/2017 9:16:14 AM PST
10  02/23/2017 6:40:54 PM PST</code></pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># provide one_of with a vector of character variables</span></span>
<span id="cb28-2">variables <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"start_date"</span>, <span class="st" style="color: #20794D;">"end_date"</span>)</span>
<span id="cb28-3">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(<span class="fu" style="color: #4758AB;">one_of</span>(variables))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                   start_date                   end_date
1   02/24/2017 3:14:19 AM PST  02/24/2017 3:18:05 AM PST
2   03/03/2017 7:08:33 AM PST  03/03/2017 7:19:15 AM PST
3   03/06/2017 5:57:07 PM PST  03/06/2017 5:59:08 PM PST
4   03/08/2017 3:05:41 PM PST  03/09/2017 7:17:53 AM PST
5   02/23/2017 9:09:11 AM PST  02/23/2017 9:11:07 AM PST
6  02/23/2017 10:11:52 PM PST 02/23/2017 10:20:02 PM PST
7   02/23/2017 6:10:42 PM PST  02/23/2017 6:13:59 PM PST
8  03/08/2017 11:22:43 AM PST 03/08/2017 11:25:22 AM PST
9   02/23/2017 9:16:14 AM PST  02/23/2017 9:21:40 AM PST
10  02/23/2017 6:40:54 PM PST  02/23/2017 6:42:02 PM PST</code></pre>
</div>
</div>
<p>Note that technically there does exist a <code>select_at()</code> function that requires a <code>vars()</code> input, but I can’t really think of a good use of this function…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;"># this is the same as av_survey_sample %&gt;% select(start_date, end_date)</span></span>
<span id="cb30-2">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-3">  <span class="fu" style="color: #4758AB;">select_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(start_date, end_date))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                   start_date                   end_date
1   02/24/2017 3:14:19 AM PST  02/24/2017 3:18:05 AM PST
2   03/03/2017 7:08:33 AM PST  03/03/2017 7:19:15 AM PST
3   03/06/2017 5:57:07 PM PST  03/06/2017 5:59:08 PM PST
4   03/08/2017 3:05:41 PM PST  03/09/2017 7:17:53 AM PST
5   02/23/2017 9:09:11 AM PST  02/23/2017 9:11:07 AM PST
6  02/23/2017 10:11:52 PM PST 02/23/2017 10:20:02 PM PST
7   02/23/2017 6:10:42 PM PST  02/23/2017 6:13:59 PM PST
8  03/08/2017 11:22:43 AM PST 03/08/2017 11:25:22 AM PST
9   02/23/2017 9:16:14 AM PST  02/23/2017 9:21:40 AM PST
10  02/23/2017 6:40:54 PM PST  02/23/2017 6:42:02 PM PST</code></pre>
</div>
</div>
<p>The syntax of this <code>select_at()</code> example though can be useful for understanding how the <code>vars()</code> function can be used in the other <code>_at()</code> functions).</p>
</section>
<section id="rename_at" class="level2">
<h2 class="anchored" data-anchor-id="rename_at">rename_at()</h2>
<p>You can rename specified variables using the <code>rename_at()</code> function. For instance, we could replace all column names that contain the character string “av” with the same column name but an uppercase “AV” instead of the original lowercase “av”.</p>
<p>To do this, we use the select helper <code>contains()</code> within the <code>vars()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;"># use a select helper to only apply to columns whose name contains "av"</span></span>
<span id="cb32-2"><span class="co" style="color: #5E5E5E;"># then rename these columns with "AV" in place of "av"</span></span>
<span id="cb32-3">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb32-4">  <span class="fu" style="color: #4758AB;">rename_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(<span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">"av"</span>)), </span>
<span id="cb32-5">            <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"av"</span>, <span class="st" style="color: #20794D;">"AV"</span>, .x))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          id                 start_date                   end_date
1  260381029  02/24/2017 3:14:19 AM PST  02/24/2017 3:18:05 AM PST
2  260822947  03/03/2017 7:08:33 AM PST  03/03/2017 7:19:15 AM PST
3  260907069  03/06/2017 5:57:07 PM PST  03/06/2017 5:59:08 PM PST
4  261099035  03/08/2017 3:05:41 PM PST  03/09/2017 7:17:53 AM PST
5  260332379  02/23/2017 9:09:11 AM PST  02/23/2017 9:11:07 AM PST
6  260355021 02/23/2017 10:11:52 PM PST 02/23/2017 10:20:02 PM PST
7  260350676  02/23/2017 6:10:42 PM PST  02/23/2017 6:13:59 PM PST
8  261092370 03/08/2017 11:22:43 AM PST 03/08/2017 11:25:22 AM PST
9  260332519  02/23/2017 9:16:14 AM PST  02/23/2017 9:21:40 AM PST
10 260351560  02/23/2017 6:40:54 PM PST  02/23/2017 6:42:02 PM PST
   interacted_with_AV_as_pedestrian interacted_with_AV_as_cyclist
1                               Yes                           Yes
2                                No                           Yes
3                               Yes                           Yes
4                                No                           Yes
5                                No                           Yes
6                               Yes                           Yes
7                                No                            No
8                          Not sure                      Not sure
9                               Yes                            No
10                               No                            No
   circumstanses_of_interaction approve_AV_testing_pgh
1                             2                Approve
2                             4             Disapprove
3                            NA                Approve
4                             3       Somewhat Approve
5                            NA       Somewhat Approve
6                             1                Approve
7                            NA                Approve
8                            NA    Somewhat Disapprove
9                             2                Approve
10                           NA    Somewhat Disapprove</code></pre>
</div>
</div>
</section>
<section id="mutate_at" class="level2">
<h2 class="anchored" data-anchor-id="mutate_at">mutate_at()</h2>
<p>To mutate only the date variables, normally we would do the <code>mdy_hms()</code> transformation to each variable separately as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="co" style="color: #5E5E5E;"># use the standard (unscoped) approach</span></span>
<span id="cb34-2">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb34-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">start_date =</span> <span class="fu" style="color: #4758AB;">mdy_hms</span>(start_date),</span>
<span id="cb34-4">         <span class="at" style="color: #657422;">end_date =</span> <span class="fu" style="color: #4758AB;">mdy_hms</span>(end_date))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          id          start_date            end_date
1  260381029 2017-02-24 03:14:19 2017-02-24 03:18:05
2  260822947 2017-03-03 07:08:33 2017-03-03 07:19:15
3  260907069 2017-03-06 17:57:07 2017-03-06 17:59:08
4  261099035 2017-03-08 15:05:41 2017-03-09 07:17:53
5  260332379 2017-02-23 09:09:11 2017-02-23 09:11:07
6  260355021 2017-02-23 22:11:52 2017-02-23 22:20:02
7  260350676 2017-02-23 18:10:42 2017-02-23 18:13:59
8  261092370 2017-03-08 11:22:43 2017-03-08 11:25:22
9  260332519 2017-02-23 09:16:14 2017-02-23 09:21:40
10 260351560 2017-02-23 18:40:54 2017-02-23 18:42:02
   interacted_with_av_as_pedestrian interacted_with_av_as_cyclist
1                               Yes                           Yes
2                                No                           Yes
3                               Yes                           Yes
4                                No                           Yes
5                                No                           Yes
6                               Yes                           Yes
7                                No                            No
8                          Not sure                      Not sure
9                               Yes                            No
10                               No                            No
   circumstanses_of_interaction approve_av_testing_pgh
1                             2                Approve
2                             4             Disapprove
3                            NA                Approve
4                             3       Somewhat Approve
5                            NA       Somewhat Approve
6                             1                Approve
7                            NA                Approve
8                            NA    Somewhat Disapprove
9                             2                Approve
10                           NA    Somewhat Disapprove</code></pre>
</div>
</div>
<p>However, using <code>mutate_at()</code> and supplying these column names as arguments to the <code>vars()</code> function, we could specify the function only once.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;"># specifying specific variables to apply the same function to</span></span>
<span id="cb36-2">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb36-3">  <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(start_date, end_date), mdy_hms)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          id          start_date            end_date
1  260381029 2017-02-24 03:14:19 2017-02-24 03:18:05
2  260822947 2017-03-03 07:08:33 2017-03-03 07:19:15
3  260907069 2017-03-06 17:57:07 2017-03-06 17:59:08
4  261099035 2017-03-08 15:05:41 2017-03-09 07:17:53
5  260332379 2017-02-23 09:09:11 2017-02-23 09:11:07
6  260355021 2017-02-23 22:11:52 2017-02-23 22:20:02
7  260350676 2017-02-23 18:10:42 2017-02-23 18:13:59
8  261092370 2017-03-08 11:22:43 2017-03-08 11:25:22
9  260332519 2017-02-23 09:16:14 2017-02-23 09:21:40
10 260351560 2017-02-23 18:40:54 2017-02-23 18:42:02
   interacted_with_av_as_pedestrian interacted_with_av_as_cyclist
1                               Yes                           Yes
2                                No                           Yes
3                               Yes                           Yes
4                                No                           Yes
5                                No                           Yes
6                               Yes                           Yes
7                                No                            No
8                          Not sure                      Not sure
9                               Yes                            No
10                               No                            No
   circumstanses_of_interaction approve_av_testing_pgh
1                             2                Approve
2                             4             Disapprove
3                            NA                Approve
4                             3       Somewhat Approve
5                            NA       Somewhat Approve
6                             1                Approve
7                            NA                Approve
8                            NA    Somewhat Disapprove
9                             2                Approve
10                           NA    Somewhat Disapprove</code></pre>
</div>
</div>
<p>Moreover, we can use the select helpers to specify which columns we want to mutate, without having to write out the entire column names.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="co" style="color: #5E5E5E;"># use a "select helper" to specify the variables that end with "_date"</span></span>
<span id="cb38-2">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb38-3">  <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(<span class="fu" style="color: #4758AB;">ends_with</span>(<span class="st" style="color: #20794D;">"_date"</span>)), mdy_hms)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          id          start_date            end_date
1  260381029 2017-02-24 03:14:19 2017-02-24 03:18:05
2  260822947 2017-03-03 07:08:33 2017-03-03 07:19:15
3  260907069 2017-03-06 17:57:07 2017-03-06 17:59:08
4  261099035 2017-03-08 15:05:41 2017-03-09 07:17:53
5  260332379 2017-02-23 09:09:11 2017-02-23 09:11:07
6  260355021 2017-02-23 22:11:52 2017-02-23 22:20:02
7  260350676 2017-02-23 18:10:42 2017-02-23 18:13:59
8  261092370 2017-03-08 11:22:43 2017-03-08 11:25:22
9  260332519 2017-02-23 09:16:14 2017-02-23 09:21:40
10 260351560 2017-02-23 18:40:54 2017-02-23 18:42:02
   interacted_with_av_as_pedestrian interacted_with_av_as_cyclist
1                               Yes                           Yes
2                                No                           Yes
3                               Yes                           Yes
4                                No                           Yes
5                                No                           Yes
6                               Yes                           Yes
7                                No                            No
8                          Not sure                      Not sure
9                               Yes                            No
10                               No                            No
   circumstanses_of_interaction approve_av_testing_pgh
1                             2                Approve
2                             4             Disapprove
3                            NA                Approve
4                             3       Somewhat Approve
5                            NA       Somewhat Approve
6                             1                Approve
7                            NA                Approve
8                            NA    Somewhat Disapprove
9                             2                Approve
10                           NA    Somewhat Disapprove</code></pre>
</div>
</div>
</section>
<section id="summarise_at" class="level2">
<h2 class="anchored" data-anchor-id="summarise_at">summarise_at()</h2>
<p>The <code>summarise_at()</code> scoped verb behaves very similarly to the <code>mutate_at()</code> scoped verb, in that we can easily specify <em>which</em> variables we want to apply the same summary function to.</p>
<p>For instance, the following example summarises all variables that contain the word “interacted” by counting the number of “Yes” entries.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;">summarise_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(<span class="fu" style="color: #4758AB;">contains</span>(<span class="st" style="color: #20794D;">"interacted"</span>)), <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">sum</span>(.x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Yes"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  interacted_with_av_as_pedestrian interacted_with_av_as_cyclist
1                                4                             6</code></pre>
</div>
</div>
</section>
</section>
<section id="the-_all-scoped-variant-perform-an-operation-on-all-variables-at-once" class="level1">
<h1>The _all() scoped variant: perform an operation on all variables at once</h1>
<p><code>_all</code> allows you to perform an operation on all variables at once (e.g.&nbsp;calculating the number of missing values in every column).</p>
<section id="rename_all" class="level2">
<h2 class="anchored" data-anchor-id="rename_all">rename_all()</h2>
<p>The <code>select_all()</code> would is quite redundant (it would simply return all columns). Its friend <code>rename_all()</code>, however can be very useful.</p>
<p>For instance, we could rename all variables by replacing underscores <code>_</code> with dots <code>.</code> (although I would advise against this: underscores are way better than dots!).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;">rename_all</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"_"</span>, <span class="st" style="color: #20794D;">"."</span>, .x))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          id                 start.date                   end.date
1  260381029  02/24/2017 3:14:19 AM PST  02/24/2017 3:18:05 AM PST
2  260822947  03/03/2017 7:08:33 AM PST  03/03/2017 7:19:15 AM PST
3  260907069  03/06/2017 5:57:07 PM PST  03/06/2017 5:59:08 PM PST
4  261099035  03/08/2017 3:05:41 PM PST  03/09/2017 7:17:53 AM PST
5  260332379  02/23/2017 9:09:11 AM PST  02/23/2017 9:11:07 AM PST
6  260355021 02/23/2017 10:11:52 PM PST 02/23/2017 10:20:02 PM PST
7  260350676  02/23/2017 6:10:42 PM PST  02/23/2017 6:13:59 PM PST
8  261092370 03/08/2017 11:22:43 AM PST 03/08/2017 11:25:22 AM PST
9  260332519  02/23/2017 9:16:14 AM PST  02/23/2017 9:21:40 AM PST
10 260351560  02/23/2017 6:40:54 PM PST  02/23/2017 6:42:02 PM PST
   interacted.with.av.as.pedestrian interacted.with.av.as.cyclist
1                               Yes                           Yes
2                                No                           Yes
3                               Yes                           Yes
4                                No                           Yes
5                                No                           Yes
6                               Yes                           Yes
7                                No                            No
8                          Not sure                      Not sure
9                               Yes                            No
10                               No                            No
   circumstanses.of.interaction approve.av.testing.pgh
1                             2                Approve
2                             4             Disapprove
3                            NA                Approve
4                             3       Somewhat Approve
5                            NA       Somewhat Approve
6                             1                Approve
7                            NA                Approve
8                            NA    Somewhat Disapprove
9                             2                Approve
10                           NA    Somewhat Disapprove</code></pre>
</div>
</div>
</section>
<section id="mutate_all" class="level2">
<h2 class="anchored" data-anchor-id="mutate_all">mutate_all()</h2>
<p>We could apply the same mutate function to every column at once using <code>mutate_all()</code>. For instance, the code below converts every column to a numeric (although this results in mostly missing values for the character variables)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;">mutate_all</span>(as.numeric)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          id start_date end_date interacted_with_av_as_pedestrian
1  260381029         NA       NA                               NA
2  260822947         NA       NA                               NA
3  260907069         NA       NA                               NA
4  261099035         NA       NA                               NA
5  260332379         NA       NA                               NA
6  260355021         NA       NA                               NA
7  260350676         NA       NA                               NA
8  261092370         NA       NA                               NA
9  260332519         NA       NA                               NA
10 260351560         NA       NA                               NA
   interacted_with_av_as_cyclist circumstanses_of_interaction
1                             NA                            2
2                             NA                            4
3                             NA                           NA
4                             NA                            3
5                             NA                           NA
6                             NA                            1
7                             NA                           NA
8                             NA                           NA
9                             NA                            2
10                            NA                           NA
   approve_av_testing_pgh
1                      NA
2                      NA
3                      NA
4                      NA
5                      NA
6                      NA
7                      NA
8                      NA
9                      NA
10                     NA</code></pre>
</div>
</div>
</section>
<section id="summarise_all" class="level2">
<h2 class="anchored" data-anchor-id="summarise_all">summarise_all()</h2>
<p>We could also apply the same summary function to every column at once using <code>summarise_all()</code>. For instance, the example below calculates the number of distinct entries in each column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">av_survey_sample <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;">summarise_all</span>(n_distinct)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id start_date end_date interacted_with_av_as_pedestrian
1 10         10       10                                3
  interacted_with_av_as_cyclist circumstanses_of_interaction
1                             3                            5
  approve_av_testing_pgh
1                      4</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Hopefully this summary is useful to you in your data manipulation adventures!</p>


</section>

 ]]></description>
  <category>dplyr</category>
  <category>R</category>
  <category>tidyverse</category>
  <guid>https://www.rebeccabarter.com/blog/2019-01-23_scoped-verbs.html</guid>
  <pubDate>Wed, 23 Jan 2019 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Which hypothesis test should I use? A flowchart</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2018-12-04_hypothesis_testing.html</link>
  <description><![CDATA[ 




<p>Many years ago I taught a stats class for which one of the topics was hypothesis testing. Many of the students had a hard time remembering what situation each test was designed for, so I made a flowchart to help piece together the wild world of hypothesis tests.</p>
<p>While the flowchart isn’t pretty (if I made it today, it would be much more attractive), I feel like it might be useful for others, so here it is:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/img/hypothesis_testing/Hypothesis_testing_flow_mean.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>(if you all like it - I’ll make a pretty version!)</p>



 ]]></description>
  <category>statistics</category>
  <category>hypothesis testing</category>
  <guid>https://www.rebeccabarter.com/blog/2018-12-04_hypothesis_testing.html</guid>
  <pubDate>Tue, 04 Dec 2018 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Alternatives to grouped bar charts</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2018-05-29_alternatives_dodged_bars.html</link>
  <description><![CDATA[ 




<p>At some point in your life you have probably found yourself standing face-to-face with a beast known as a grouped bar chart. Perhaps it was in a research paper where the authors were trying to compare the results of several models across different datasets, or it was in a talk given by a colleague who was trying to compare the popularity of different products among distinct groups of consumers.</p>
<p>The first time you encountered a grouped bar chart you might have thought “what a neat way to put so much information in a single plot!”. However, the moment you started trying to see whether the orange bar always does better than the green bar but worse than the blue bar.</p>
<p>In the example below (made with ggplot2), I show a simple grouped bar chart comparing research funding success rates across a variety of disciplines with the data split into two categories for each discipline: males and females. This data came from Rafael Irizarry’s excellent R package, <code>dslabs</code>, containing datasets for teaching data science.</p>
<div class="cell">

</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2018-05-29_alternatives_dodged_bars_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>Even in this simple example, I find it really difficult to compare male and female funding success rates across genders. Are the males having more success than the females overall? It’s genuinely hard to tell unless I examine each discipline closely and see that men are doing better in the first two groups, but not the two after that, and then I think they are doing a bit better in the categories after that, but now I’m having a hard time and I really want to stop looking at this plot now…</p>
<p>Fortunately, people such as Ann K. Emery (in <a href="http://annkemery.com/clustered-bar-chart/">her post on grouped bar charts</a>) have thought about how to represent this information in a better way. Below I will show 2 alternative approaches (slope charts and horizontal dot plots).</p>
<p>While these are not necessarily “standard” plot types (as in there is no specific <code>geom_</code> for them), true freedom in visualization comes with the realization that most plots are just arrangements of circles and lines in space. When you truly embrace this idea, you can make any type of figure you want! By means of demonstration, in my <a href="../2018-05-29_getting_fancy_ggplot2/index.html">next post I show the ggplot2 R code for making each plot</a>.</p>
<section id="slope-plots" class="level1">
<h1>Slope plots</h1>
<p>The first alternative is similar to parallel coordinates plots for multi-variate data visualization. The slope plot contains two axes (or three or four, depending on how many groups you have), one for each group (male and female). The disciplines are each represented by a line connecting the male success rates to the female success rates in as coded by their y-position. This plot makes it very clear for which disciplines women have greater funding success than men (the upward sloping, darker colored lines) and it also makes it very clear which disciplines have higher funding success rates overall (Physics and Chemical sciences).</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2018-05-29_alternatives_dodged_bars_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>What we see much more clearly is that the number of disciplines in which men are more successful is similar to the number of disciplines in which women are more successful. The discipline with the most similar success rates between men and women is the Chemical sciences. All of this information was very difficult to obtain from the grouped bar chart!</p>
</section>
<section id="horizontal-dot-plots" class="level1">
<h1>Horizontal dot plots</h1>
<p>Another alternative is the horizontal dot plot: In this case each discipline is again represented by a line, but instead of coding the success rates as the y-position at the end of the discipline slope, the success rate is coded as the x-position along the discipline-specific horizontal line. I have ordered the disciplines by the women’s funding success rate.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2018-05-29_alternatives_dodged_bars_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>For me, the horizontal dot plot highlights that in the disciplines with lower funding rates overall (the bottom few rows), men have higher success rates.</p>
<p>Regardless of your preference, it is fairly clear that both the slope plot and the horizontal dot plots are easier to digest than the grouped bar plot!</p>
</section>
<section id="code" class="level1">
<h1>Code</h1>
<p>My <a href="../2018-05-29_getting_fancy_ggplot2/index.html">next post</a> shows the ggplot2 code that I wrote to produce the three plots in this post.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ul>
<li><p>The research funding data comes from Rafael Irizarry’s <code>dslabs</code> R package</p></li>
<li><p>The slope and dot plot ideas for this post come from <a href="http://annkemery.com/clustered-bar-chart/">Ann K. Emery’s post</a> on the same topic.</p></li>
</ul>


</section>

 ]]></description>
  <category>R</category>
  <category>visualization</category>
  <guid>https://www.rebeccabarter.com/blog/2018-05-29_alternatives_dodged_bars.html</guid>
  <pubDate>Tue, 29 May 2018 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Getting fancy with ggplot2: code for alternatives to grouped bar charts</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2018-05-29_getting_fancy_ggplot2.html</link>
  <description><![CDATA[ 




<p>Here I provide the code I used to create the figures from my <a href="../2018-05-29_alternatives_dodged_bars/index.html">previous post on alternatives to grouped bar charts</a>. You are encouraged to play with them yourself!</p>
<p>The key to creating unique and creative visualizations using libraries such as ggplot (or even just straight SVG) is (1) to move away from thinking of data visualization only as the default plot types (bar plots, boxplots, scatterplots, etc), and (2) to realise that most visualizations are essentially lines and circles that you can arrange however you desire in space. Drawing a picture on paper before beginning to code your data viz is a great way to create customized visualizations for each dataset.</p>
<section id="bars" class="level1">
<h1>Bars</h1>
<p>First, I load in the libraries (the data comes from the <code>dslabs</code> library), and convert the data to long-form for creating the grouped bar charts.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># load in libraries</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(dslabs)</span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># combine male and female success rates into single data frame</span></span>
<span id="cb1-5">success_rates <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbind</span>(</span>
<span id="cb1-6">  <span class="co" style="color: #5E5E5E;"># male success rates</span></span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;">transmute</span>(research_funding_rates, </span>
<span id="cb1-8">            discipline, </span>
<span id="cb1-9">            <span class="at" style="color: #657422;">success =</span> success_rates_men, </span>
<span id="cb1-10">            <span class="at" style="color: #657422;">gender =</span> <span class="st" style="color: #20794D;">"Male"</span>),</span>
<span id="cb1-11">  <span class="co" style="color: #5E5E5E;"># female success rates</span></span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;">transmute</span>(research_funding_rates, </span>
<span id="cb1-13">            discipline, </span>
<span id="cb1-14">            <span class="at" style="color: #657422;">success =</span> success_rates_women, </span>
<span id="cb1-15">            <span class="at" style="color: #657422;">gender =</span> <span class="st" style="color: #20794D;">"Female"</span>)) </span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># print the data</span></span>
<span id="cb2-2">success_rates</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            discipline success gender
1    Chemical sciences    26.5   Male
2    Physical sciences    19.3   Male
3              Physics    26.9   Male
4           Humanities    14.3   Male
5   Technical sciences    15.9   Male
6    Interdisciplinary    11.4   Male
7  Earth/life sciences    24.4   Male
8      Social sciences    15.3   Male
9     Medical sciences    18.8   Male
10   Chemical sciences    25.6 Female
11   Physical sciences    23.1 Female
12             Physics    22.2 Female
13          Humanities    19.3 Female
14  Technical sciences    21.0 Female
15   Interdisciplinary    21.8 Female
16 Earth/life sciences    14.3 Female
17     Social sciences    11.5 Female
18    Medical sciences    11.2 Female</code></pre>
</div>
</div>
<p>I used <code>geom_bar()</code> to create a grouped bar chart containing the data. I grouped by gender by setting <code>fill = gender</code> within the <code>aes()</code> function.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># make grouped bar plot</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">ggplot</span>(success_rates) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-3">  <span class="co" style="color: #5E5E5E;"># add bar for each discipline colored by gender</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> discipline, <span class="at" style="color: #657422;">y =</span> success, <span class="at" style="color: #657422;">fill =</span> gender),</span>
<span id="cb4-5">           <span class="at" style="color: #657422;">stat =</span> <span class="st" style="color: #20794D;">"identity"</span>, <span class="at" style="color: #657422;">position =</span> <span class="st" style="color: #20794D;">"dodge"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-6">  <span class="co" style="color: #5E5E5E;"># name axes and remove gap between bars and y-axis</span></span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="st" style="color: #20794D;">"Success Rate"</span>, <span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;">scale_x_discrete</span>(<span class="st" style="color: #20794D;">"Discipline"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;">scale_fill_manual</span>(<span class="at" style="color: #657422;">values =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#468189"</span>, <span class="st" style="color: #20794D;">"#9DBEBB"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-10">  <span class="co" style="color: #5E5E5E;"># remove grey theme</span></span>
<span id="cb4-11">  <span class="fu" style="color: #4758AB;">theme_classic</span>(<span class="at" style="color: #657422;">base_size =</span> <span class="dv" style="color: #AD0000;">18</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-12">  <span class="co" style="color: #5E5E5E;"># rotate x-axis and remove superfluous axis elements</span></span>
<span id="cb4-13">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">axis.text.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">angle =</span> <span class="dv" style="color: #AD0000;">90</span>, </span>
<span id="cb4-14">                                   <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>),</span>
<span id="cb4-15">        <span class="at" style="color: #657422;">axis.line =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb4-16">        <span class="at" style="color: #657422;">axis.ticks.x =</span> <span class="fu" style="color: #4758AB;">element_blank</span>()) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2018-05-29_getting_fancy_ggplot2_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="slope-plot" class="level1">
<h1>Slope plot</h1>
<p>To create the sloped chart, it ends up being easier to keep the data in its original wide form.</p>
<p>The first element I add is the slopes from men to women using <code>geom_segment()</code>. Each slope is colored based on whether men or women are more successful.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">gg_slope <span class="ot" style="color: #003B4F;">&lt;-</span> research_funding_rates <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-2">  <span class="co" style="color: #5E5E5E;"># add a variable for when men are more successful than women (for colours)</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">men_more_successful =</span> success_rates_men <span class="sc" style="color: #5E5E5E;">&gt;</span> success_rates_women) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-5">  <span class="co" style="color: #5E5E5E;"># add a line segment that goes from men to women for each discipline</span></span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;">geom_segment</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">xend =</span> <span class="dv" style="color: #AD0000;">2</span>, </span>
<span id="cb5-7">                   <span class="at" style="color: #657422;">y =</span> success_rates_men, </span>
<span id="cb5-8">                   <span class="at" style="color: #657422;">yend =</span> success_rates_women,</span>
<span id="cb5-9">                   <span class="at" style="color: #657422;">group =</span> discipline,</span>
<span id="cb5-10">                   <span class="at" style="color: #657422;">col =</span> men_more_successful), </span>
<span id="cb5-11">               <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">1.2</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-12">  <span class="co" style="color: #5E5E5E;"># set the colors</span></span>
<span id="cb5-13">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#468189"</span>, <span class="st" style="color: #20794D;">"#9DBEBB"</span>), <span class="at" style="color: #657422;">guide =</span> <span class="st" style="color: #20794D;">"none"</span>)  <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-14">  <span class="co" style="color: #5E5E5E;"># remove all axis stuff</span></span>
<span id="cb5-15">  <span class="fu" style="color: #4758AB;">theme_classic</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb5-16">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">axis.line =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb5-17">        <span class="at" style="color: #657422;">axis.text =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb5-18">        <span class="at" style="color: #657422;">axis.title =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb5-19">        <span class="at" style="color: #657422;">axis.ticks =</span> <span class="fu" style="color: #4758AB;">element_blank</span>()) </span>
<span id="cb5-20">gg_slope</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2018-05-29_getting_fancy_ggplot2_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Next, I add a left and right axis at the start and end of the slopes.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">gg_slope <span class="ot" style="color: #003B4F;">&lt;-</span> gg_slope <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-2">  <span class="co" style="color: #5E5E5E;"># add vertical lines that act as axis for men</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">geom_segment</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">xend =</span> <span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb6-4">               <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">min</span>(research_funding_rates<span class="sc" style="color: #5E5E5E;">$</span>success_rates_men) <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb6-5">               <span class="at" style="color: #657422;">yend =</span> <span class="fu" style="color: #4758AB;">max</span>(research_funding_rates<span class="sc" style="color: #5E5E5E;">$</span>success_rates_men) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb6-6">               <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"grey70"</span>, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-7">  <span class="co" style="color: #5E5E5E;"># add vertical lines that act as axis for women</span></span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;">geom_segment</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">xend =</span> <span class="dv" style="color: #AD0000;">2</span>, </span>
<span id="cb6-9">               <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">min</span>(research_funding_rates<span class="sc" style="color: #5E5E5E;">$</span>success_rates_men) <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb6-10">               <span class="at" style="color: #657422;">yend =</span> <span class="fu" style="color: #4758AB;">max</span>(research_funding_rates<span class="sc" style="color: #5E5E5E;">$</span>success_rates_men) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb6-11">               <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"grey70"</span>, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-12">  <span class="co" style="color: #5E5E5E;"># add the words "men" and "women" above their axes</span></span>
<span id="cb6-13">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x, <span class="at" style="color: #657422;">y =</span> y, <span class="at" style="color: #657422;">label =</span> label),</span>
<span id="cb6-14">            <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2</span>, </span>
<span id="cb6-15">                              <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">max</span>(research_funding_rates<span class="sc" style="color: #5E5E5E;">$</span>success_rates_men),</span>
<span id="cb6-16">                              <span class="at" style="color: #657422;">label =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"men"</span>, <span class="st" style="color: #20794D;">"women"</span>)),</span>
<span id="cb6-17">            <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"grey30"</span>,</span>
<span id="cb6-18">            <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">6</span>) </span>
<span id="cb6-19">gg_slope  </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2018-05-29_getting_fancy_ggplot2_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>I also need to add an identifier for each discipline’s slope. I do this by annotating the plot with text.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">gg_slope <span class="ot" style="color: #003B4F;">&lt;-</span> gg_slope <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-2">  <span class="co" style="color: #5E5E5E;"># add the label and success rate for each discipline next the men axis</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.03</span>, </span>
<span id="cb7-4">                <span class="at" style="color: #657422;">y =</span> success_rates_men, </span>
<span id="cb7-5">                <span class="at" style="color: #657422;">label =</span> <span class="fu" style="color: #4758AB;">paste0</span>(discipline, <span class="st" style="color: #20794D;">", "</span>, </span>
<span id="cb7-6">                               <span class="fu" style="color: #4758AB;">round</span>(success_rates_men, <span class="dv" style="color: #AD0000;">1</span>), <span class="st" style="color: #20794D;">"%"</span>)),</span>
<span id="cb7-7">             <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"grey30"</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="st" style="color: #20794D;">"right"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-8">  <span class="co" style="color: #5E5E5E;"># add the success rate next to each point on the women axis</span></span>
<span id="cb7-9">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.08</span>, </span>
<span id="cb7-10">                <span class="at" style="color: #657422;">y =</span> success_rates_women, </span>
<span id="cb7-11">                <span class="at" style="color: #657422;">label =</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="fu" style="color: #4758AB;">round</span>(success_rates_women, <span class="dv" style="color: #AD0000;">1</span>), <span class="st" style="color: #20794D;">"%"</span>)),</span>
<span id="cb7-12">            <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"grey30"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-13">  <span class="co" style="color: #5E5E5E;"># set the limits of the x-axis so that the labels are not cut off</span></span>
<span id="cb7-14">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(<span class="at" style="color: #657422;">limits =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">2.1</span>)) </span>
<span id="cb7-15">gg_slope</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2018-05-29_getting_fancy_ggplot2_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Finally, I decide to add points (for aesthetic purposes). Behind each circle, I add a slightly larger white circle to act as a border and to give a slight “gap” look.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">gg_slope <span class="ot" style="color: #003B4F;">&lt;-</span> gg_slope <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb8-2">  </span>
<span id="cb8-3">  <span class="co" style="color: #5E5E5E;"># add the white outline for the points at each rate for men</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb8-5">                 <span class="at" style="color: #657422;">y =</span> success_rates_men), <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">4.5</span>,</span>
<span id="cb8-6">             <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"white"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-7">  <span class="co" style="color: #5E5E5E;"># add the white outline for the points at each rate for women</span></span>
<span id="cb8-8">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">2</span>, </span>
<span id="cb8-9">                 <span class="at" style="color: #657422;">y =</span> success_rates_women), <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">4.5</span>,</span>
<span id="cb8-10">             <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"white"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-11">  </span>
<span id="cb8-12">  <span class="co" style="color: #5E5E5E;"># add the actual points at each rate for men</span></span>
<span id="cb8-13">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb8-14">                 <span class="at" style="color: #657422;">y =</span> success_rates_men), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">4</span>,</span>
<span id="cb8-15">             <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"grey60"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-16">  <span class="co" style="color: #5E5E5E;"># add the actual points at each rate for men</span></span>
<span id="cb8-17">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">2</span>, </span>
<span id="cb8-18">                 <span class="at" style="color: #657422;">y =</span> success_rates_women), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">4</span>,</span>
<span id="cb8-19">             <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"grey60"</span>) </span>
<span id="cb8-20">gg_slope</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2018-05-29_getting_fancy_ggplot2_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="horizontal-dots" class="level1">
<h1>Horizontal dots</h1>
<p>To create the horizontal dot plot, I again keep the data in its original wide-form but I arrange the disciplines in order of women’s success rate (this will make the plot easier to read).</p>
<p>The first things I do to create the dot plot is add the horizontal discipline lines and the points for the success rates of men and women.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">gg_dot <span class="ot" style="color: #003B4F;">&lt;-</span> research_funding_rates <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-2">  <span class="co" style="color: #5E5E5E;"># rearrange the factor levels for discipline by rates for women</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">arrange</span>(success_rates_women) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">discipline =</span> <span class="fu" style="color: #4758AB;">fct_inorder</span>(discipline)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-5">  </span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-7">  <span class="co" style="color: #5E5E5E;"># remove axes and superfluous grids</span></span>
<span id="cb9-8">  <span class="fu" style="color: #4758AB;">theme_classic</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">axis.title =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb9-10">        <span class="at" style="color: #657422;">axis.ticks.y =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb9-11">        <span class="at" style="color: #657422;">axis.line =</span> <span class="fu" style="color: #4758AB;">element_blank</span>()) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-12">  </span>
<span id="cb9-13">  </span>
<span id="cb9-14">  <span class="co" style="color: #5E5E5E;"># add a dummy point for scaling purposes</span></span>
<span id="cb9-15">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">12</span>, <span class="at" style="color: #657422;">y =</span> discipline), </span>
<span id="cb9-16">             <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"white"</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb9-17">  </span>
<span id="cb9-18">  <span class="co" style="color: #5E5E5E;"># add the horizontal discipline lines</span></span>
<span id="cb9-19">  <span class="fu" style="color: #4758AB;">geom_hline</span>(<span class="at" style="color: #657422;">yintercept =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">9</span>, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"grey80"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-20">  </span>
<span id="cb9-21">  <span class="co" style="color: #5E5E5E;"># add a point for each male success rate</span></span>
<span id="cb9-22">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> success_rates_men, <span class="at" style="color: #657422;">y =</span> discipline), </span>
<span id="cb9-23">             <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">11</span>, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"#9DBEBB"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-24">  <span class="co" style="color: #5E5E5E;"># add a point for each female success rate</span></span>
<span id="cb9-25">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> success_rates_women, <span class="at" style="color: #657422;">y =</span> discipline),</span>
<span id="cb9-26">             <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">11</span>, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"#468189"</span>) </span>
<span id="cb9-27">gg_dot</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2018-05-29_getting_fancy_ggplot2_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>Since I really like to annotate my figures with text so that the audience can work less hard, I add the success rate on top of each dot. I also prefer to annotate features my plot directly instead of using legends, so I also add a label for men and women.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">gg_dot <span class="ot" style="color: #003B4F;">&lt;-</span> gg_dot <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb10-2">  <span class="co" style="color: #5E5E5E;"># add the text (%) for each male success rate</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> success_rates_men, <span class="at" style="color: #657422;">y =</span> discipline, </span>
<span id="cb10-4">                <span class="at" style="color: #657422;">label =</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="fu" style="color: #4758AB;">round</span>(success_rates_men, <span class="dv" style="color: #AD0000;">1</span>))),</span>
<span id="cb10-5">            <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"black"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-6">  <span class="co" style="color: #5E5E5E;"># add the text (%) for each female success rate</span></span>
<span id="cb10-7">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> success_rates_women, <span class="at" style="color: #657422;">y =</span> discipline, </span>
<span id="cb10-8">                <span class="at" style="color: #657422;">label =</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="fu" style="color: #4758AB;">round</span>(success_rates_women, <span class="dv" style="color: #AD0000;">1</span>))),</span>
<span id="cb10-9">            <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"white"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-10">  <span class="co" style="color: #5E5E5E;"># add a label above the first two points</span></span>
<span id="cb10-11">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x, <span class="at" style="color: #657422;">y =</span> y, <span class="at" style="color: #657422;">label =</span> label, <span class="at" style="color: #657422;">col =</span> label),</span>
<span id="cb10-12">            <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">25.6</span> <span class="sc" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">1.1</span>, <span class="fl" style="color: #AD0000;">26.5</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.6</span>), <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">10</span>, </span>
<span id="cb10-13">                       <span class="at" style="color: #657422;">label =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"women"</span>, <span class="st" style="color: #20794D;">"men"</span>)), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">6</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-14">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#9DBEBB"</span>, <span class="st" style="color: #20794D;">"#468189"</span>), <span class="at" style="color: #657422;">guide =</span> <span class="st" style="color: #20794D;">"none"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-15">  </span>
<span id="cb10-16">  <span class="co" style="color: #5E5E5E;"># manually specify the x-axis</span></span>
<span id="cb10-17">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(<span class="at" style="color: #657422;">breaks =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">15</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">25</span>), </span>
<span id="cb10-18">                     <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"15%"</span>, <span class="st" style="color: #20794D;">"20%"</span>, <span class="st" style="color: #20794D;">"25%"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-19">  <span class="co" style="color: #5E5E5E;"># manually set the spacing above and below the plot</span></span>
<span id="cb10-20">  <span class="fu" style="color: #4758AB;">scale_y_discrete</span>(<span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.2</span>, <span class="dv" style="color: #AD0000;">0</span>)) </span>
<span id="cb10-21">gg_dot</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2018-05-29_getting_fancy_ggplot2_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ul>
<li><p>The research funding data comes from Rafael Irizarry’s <code>dslabs</code> R package</p></li>
<li><p>The slope and dot plot ideas for this post come from <a href="http://annkemery.com/clustered-bar-chart/">Ann K. Emery’s post</a> on the same topic.</p></li>
</ul>


</section>

 ]]></description>
  <category>R</category>
  <category>visualization</category>
  <guid>https://www.rebeccabarter.com/blog/2018-05-29_getting_fancy_ggplot2.html</guid>
  <pubDate>Tue, 29 May 2018 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Understanding Instrumental Variables</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2018-05-23-instrumental_variables.html</link>
  <description><![CDATA[ 




<p>Suppose, as many do, that we want to estimate the effect of an action (or treatment) on an outcome. As an example, we might be interested in estimating the effect of receiving a drug vs not receiving a drug on the incidence of heart disease. In an ideal futuristic world, we would take each individual in our population and split them into two identical humans: one who receives the treatment and the other who doesn’t. Since these two humans are 100% identical in every way other than the treatment received, any difference we subsequently observe in their outcome (i.e.&nbsp;development of heart disease) must be due to the effect of the treatment alone.</p>
<p>Unfortunately, since our humble 21st-century technology does not yet posses a human-duplication machine, the natural thing to do is to split our existing population of humans <em>randomly</em> into two groups: those who are to receive the drug (the treatment group) and those who won’t (the control group).</p>
<p>Since there was nothing special about how we determined who gets the drug and who doesn’t, <em>on average</em>, there should be no difference between the treatment group and control group other than in the treatment itself. Thus, comparing the incidence of heart disease in the treatment group and in the control group should give us a reasonable estimate of the average effect of the treatment in the population.</p>
<section id="unobserved-confounding-in-observational-studies" class="level1">
<h1>Unobserved confounding in observational studies</h1>
<p>While the randomized experiment is a perfectly reasonable thing to do in many situations, unfortunately there are many more scenarios where we can’t just randomly assign the treatment. For instance in the case of the effect of organ transplants on survival, it is probably not the best idea to randomly assign transplants to people. Instead, those who receive transplants first are those who need it the most. Such a study is necessarily observational: we simply observe who happened to receive a transplant based on the existing system.</p>
<p>It is highly likely that there will be fairly extreme differences between those who receive a transplant earlier and those who receive one later; namely that those who are transplanted earlier are much sicker than those who are transplanted later. Thus, differences in survival between those who receive a transplant within a month (our definition of the treatment group) and those who receive a transplant in more than one month (our definition of the control group) cannot be attributable solely to the time of the transplant itself, but also to the fact that the earlier transplantees were sicker at the start of the study. Thus sickness is a <em>confounder</em>: something that is different between the treatment and control groups other than the treatment itself that also affects the outcome.</p>
<p>If you’d like to quickly brush up on your causal inference, the fundamental issue associated with making causal inferences, and in particular, the troubles that arise in the presence of confounding, you might like to take a peak at my <a href="../2017-07-05-confounding/index.html">earlier post</a> on this topic.</p>
<p>If a confounder is observable, you can adapt your estimator using methods such as matching or regression adjustment to obtain an unbiased treatment effect estimate. The key issue that I will explore in this post is what to do when you have <em>unobserved confounding</em>. For example, what if we cannot quantitatively measure “sickness” (the variable that determines whether you will be transplanted soon or not) and so transplants between blood-type compatible donors and recipients are assigned primarily based on sickness <em>as measured by a doctor’s intuition</em> (a fundamentally unmeasurable quantity). Note that this isn’t actually how transplants are allocated, but it will serve nicely for instrumental variables explanation purposes.</p>
</section>
<section id="what-is-an-instrument-and-can-i-play-it" class="level1">
<h1>What is an instrument and can I play it?</h1>
<p>In most situations, if you have an unobservable confounder, there isn’t too much you can do to get around it since changes in the treatment will necessarily also change the confounder (in ways we cannot measure), <em>both</em> of which will in turn change the outcome. In this case, there is no way to measure the effect of the treatment alone (i.e.&nbsp;in isolation from the confounder) on the outcome.</p>
<p>In a few situations, however, you will have an instrument. An instrument, it turns out, is not a tuba, a piano, nor a flute, but rather <strong>an instrument is a magical measurable quantity that happens to be correlated with the treatment, and is only related to the outcome via the treatment</strong> (the instrument has no influence on the outcome except via the fact that it influences the treatment which inturn influences the outcome). The second part of this definition (that the instrument is only related to the outcome via the treatment) is called the <strong>exclusion restriction</strong>.</p>
<p>In our transplant setting, a particularly nice instrument is blood type. Patients with blood type AB can receive organs from donors with any blood type (and donors with blood type AB can only donate to recipients with blood type AB), whereas patients with blood type O can only receive organs from donors with blood type O (but donors with blood type O can donate to recipients of any blood type). The result is that patients with blood type O will, in general, need to wait longer for a transplant than patients of a similar sickness level with blood type AB.</p>
<p>Since this is a lot to explain in words, below you will find a picture that demonstrates how recipients with blood type AB have a larger pool of potential donors than do recipients with blood type O. An arrow from a donor blood type to a recipient blood type implies that donors with the specified blood type can donate organs to the corresponding recipient blood type. Since we will focus only on blood types AB and O (pretending that blood types A and B don’t exist for technical convenience), these two blood types have been enclosed in a snug little box within the diagram.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/img/iv/abo.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The idea behind instrumental variables is that the <em>changes in treatment</em> that are <em>caused by the instrument</em> are unconfounded (since changes in the instrument will change the treatment but not the outcome or confounders) and can thus be used to estimate the treatment effect (among those individuals who are influenced by the instrument). This idea will be explained in great detail in the next section, but for now I will try to convince you that blood type is indeed an instrument.</p>
<p>Clearly blood type will affect the treatment (whether or not the patient is transplanted within a month), but for blood type to be an instrument, we also need to make sure that blood type has no effect on the outcome (other than through it’s effect on the treatment). That is, we need to check the exclusion restriction. It turns out that, unfortunately, the exclusion restriction is <strong>uncheckable</strong> (similarly to how it is impossible to check that there are no unobserved confounders). The exclusion restriction will forever remain a critical assumption that will need to be backed up by domain knowledge.</p>
<p>In the blood type case, it is easy to find faults in the exclusion restriction assumption: it is well-known that blood type and race are correlated, and that race and life-expectancy are correlated (implying that blood type and survival might be related via race). However, to keep things simple, we will define our outcome to be a binary variable corresponding to whether or not death occurs <em>within 1 year</em>. It is highly unlikely that blood type will be related to such a short term survival outcome, even via correlation with race. Moreover, blood type is more-or-less randomly assigned (given your parent’s blood type). In this case, the exclusion restriction is fairly plausible, but in many IV setups, a lot of care will need to be taken to back up the exclusion restriction assumption.</p>
<p>Now that we (hopefully) understand <em>what</em> an instrument is, the next question is how to use it (don’t worry if you have no idea why instruments are useful yet, it’s not at all obvious!).</p>
</section>
<section id="how-do-instruments-work" class="level1">
<h1>How do instruments work?</h1>
<p>Our big question is whether there is an effect of being transplanted within one month (the treatment) on death within 1 year (the outcome). However, our standard approaches to estimating the treatment effect are foiled by the presence of unobserved confounding by sickness, a feature that we cannot accurately quantify. If we could accurately measure an individual’s level of sickness then we could adjust for it using regression adjustment or matching techniques. In our case, however, sickness is defined based on doctor intuition (an unmeasurable quantity), so these traditional approaches to dealing with confounding cannot help us.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/img/iv/dag2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Fortunately, we have an instrument (blood type) which modifies the treatment (time to transplantation) without modifying any confounders (the exclusion restriction says that the instrument has no effect on the outcome in any way except through the treatment - this would not be true if the instrument was correlated with a confounder). The exclusion restriction is embodied by the lack of an arrow between the instrument (blood type) and the outcome (death within 1 year) in the graph below.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/img/iv/dag3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Now, since the instrument affects the outcome solely through the treatment, any observed difference between the outcome (survival) between different levels of the instrument (blood types) must be due to the subsequent differences in the treatment (wait time).</p>
<p>It turns out that the effect of having blood type AB versus blood type O is that an individual is 7% less likely to die within 1 year. Since under the exclusion restriction there is no direct effect of blood type on death within 1 year (except via the treatment), this must be due to the difference in transplant wait time (the treatment) between the blood types.</p>
<p>Since patients with blood type AB are 23% more likely to be transplanted within 1 month than patients with blood type O, we can conclude that the effect of a 23% increase in the chance of being transplanted within 1 month is a 7% decrease in the chance of death within one year.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/img/iv/dag5.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Mathematically, to scale up the effect of “being 23% more likely to be transplanted within a month” to the effect of “being 100% more likely to be transplanted within a month” (i.e.&nbsp;of being transplanted within a month vs not being transplanted within a month) is equal to</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Ctextrm%7BEffect%20of%20AB%20vs%20O%20on%20death%20in%201%20year%7D%7D%7B%5Ctextrm%7BEffect%20of%20AB%20vs%20O%20on%20transplantation%20in%201%20month%7D%7D%20=%20%5Cfrac%7B-0.07%7D%7B0.23%7D%20=%20-0.3"></p>
<p>That is, being transplanted within 1 month decreases the chance of death within 1 year by 30%!</p>
<p>It is important to note that since we are estimating the effect of changes in the treatment that were caused by the instrument only (rather than the effects of arbitrary changes in the treatment), the instrumental variables treatment effect estimate is not for the entire population, but only for those who are influenced in some way by the instrument (the “compliers”). Thus this estimate is called the Local Average Treatment Effect (LATE).</p>
<p>The estimator above is often referred to as the <strong>Wald estimator</strong> and can be written as</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctextrm%7BWald%20estimator%7D%20=%20%5Cfrac%7B%5Ctextrm%7BCov(outcome,%20instrument)%7D%7D%7B%5Ctextrm%7BCov(treatment,%20instrument)%7D%7D"></p>
<p>In practice, IV is often implemented in a two-stage lease squares (2SLS) procedure that can be shown quite easily to be equivalent to the Wald estimator in simple cases (i.e.&nbsp;when not adjusting for other variables).</p>
</section>
<section id="resources" class="level1">
<h1>Resources</h1>
<ul>
<li><p>The resource that I found to be most useful was Chapter 10.5 of Andrew Gelman and Jennifer Hill’s book <a href="http://www.stat.columbia.edu/~gelman/arm/chap10.pdf">Data Analysis Using Regression and Multilevel/Hierarchical Models</a></p></li>
<li><p>The series of YouTube videos by Ben Lambert were also really helpful https://youtu.be/NLgB2WGGKUw</p></li>
</ul>
</section>
<section id="notes" class="level1">
<h1>Notes</h1>
<ul>
<li><p>It turns out that you can quantify sickness in the context of liver transplantation using something called the MELD score (model for end-stage liver disease score). But even if we know current MELD score, <em>future</em> MELD score will still be a confounder since if your MELD rapidly increases then you are getting sicker faster and will be transplanted sooner.</p></li>
<li><p>If there is anything that is unclear in this post, please feel free to ask questions in the comments section so that I can improve it.</p></li>
</ul>


</section>

 ]]></description>
  <category>causal inference</category>
  <category>statistics</category>
  <guid>https://www.rebeccabarter.com/blog/2018-05-23-instrumental_variables.html</guid>
  <pubDate>Wed, 23 May 2018 06:00:00 GMT</pubDate>
</item>
<item>
  <title>ggplot2: Mastering the basics</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial.html</link>
  <description><![CDATA[ 




<p>An interactive Jupyter Notebook version of this tutorial can be found at https://github.com/rlbarter/ggplot2-thw. Feel free to download it and use for your own learning or teaching adventures!</p>
<section id="useful-resources-for-learning-ggplot2" class="level2">
<h2 class="anchored" data-anchor-id="useful-resources-for-learning-ggplot2">Useful resources for learning ggplot2</h2>
<ul>
<li><strong>ggplot2</strong> book (https://www.amazon.com/dp/0387981403/ref=cm_sw_su_dp?tag=ggplot2-20) by Hadley Wickham</li>
<li><strong>The layered grammar of graphics</strong> (http://vita.had.co.nz/papers/layered-grammar.pdf) by Hadley Wickham</li>
</ul>
</section>
<section id="materials-outline" class="level2">
<h2 class="anchored" data-anchor-id="materials-outline">Materials outline</h2>
<p>I will begin by providing an overview of the layered grammar of graphics upon which ggplot2 is built. I will then teach ggplot2 by layering examples on top of one another. Finally, I will introduce some advanced topics such as faceting and themes</p>
<ol type="1">
<li><p>Layered grammar of graphics</p></li>
<li><p>Basic ggplot2 plot types</p></li>
<li><p>Scales, axes, legends and positioning</p></li>
<li><p>Faceting</p></li>
<li><p>Themes: deviating from the defaults to produce beautiful graphics</p></li>
</ol>
<p>By the end of this tutorial, you will be able to produce beautiful graphics such as this:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="the-layered-grammar-of-graphics" class="level2">
<h2 class="anchored" data-anchor-id="the-layered-grammar-of-graphics">The layered grammar of graphics</h2>
<p>Hadley Wickham built ggplot2 based on a set of principles outlines in his <em>layered grammar of graphics</em> (inspired by Wilkinson’s original <em>grammar of graphics</em>). The basic idea is that a statistical graphic is a mapping from data to aesthetic attributes (such as colour, shape, and size) of geometric objects (such as points, lines, and bars).</p>
<p>We will use some of this terminology as we progress and discover that each piece of terminology corresponds to a type of object in ggplot2.</p>
<ul>
<li><p><strong>data</strong>: a data frame containing the variables that you want to visualize</p></li>
<li><p><strong>geoms</strong>: geometric objects (circles, lines, text) that you will actually see</p></li>
<li><p><strong>aesthetics</strong>: the mapping from the data to the geographic objects (e.g.&nbsp;by describing position, size, colour, etc)</p></li>
</ul>
</section>
<section id="basic-ggplot2" class="level2">
<h2 class="anchored" data-anchor-id="basic-ggplot2">Basic ggplot2</h2>
<p>In this section, we are going to make our first plot. This plot will be based on the <code>gapminder</code> dataset that can be found <a href="https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder-FiveYearData.csv">here</a>. Below, we show the first 6 rows of the <code>gapminder</code> dataset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># to download the data directly:</span></span>
<span id="cb1-3">gapminder <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(<span class="st" style="color: #20794D;">"https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder-FiveYearData.csv"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">head</span>(gapminder)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      country year      pop continent lifeExp gdpPercap
1 Afghanistan 1952  8425333      Asia  28.801  779.4453
2 Afghanistan 1957  9240934      Asia  30.332  820.8530
3 Afghanistan 1962 10267083      Asia  31.997  853.1007
4 Afghanistan 1967 11537966      Asia  34.020  836.1971
5 Afghanistan 1972 13079460      Asia  36.088  739.9811
6 Afghanistan 1977 14880372      Asia  38.438  786.1134</code></pre>
</div>
</div>
<p>The first function we will use is <code>ggplot()</code>. This function allows us to define the data that we will be using to make the plot, as well as the aesthetic properties that will be mapped to the geometric objects. That is, we will tell ggplot which data (a data frame) we are interested in and how each of the variables in our dataset will be used (e.g.&nbsp;as an x or y coordinate, as a coloring variable or a size variable, etc).</p>
<p>Below, we define our first ggplot object using the <code>ggplot</code> function, with the gapminder dataset and the x and y aesthetics defined by the <code>gdpPercap</code> and <code>lifeExp</code> variables, respectively.</p>
<p>The output of this function is a grid with <code>gdpPercap</code> as the x-axis and <code>lifeExp</code> as the y-axis. However, we have not yet told ggplot what type of geometric object the data will be mapped to, so no data has been displayed.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<section id="aesthetic-mapping-to-layers" class="level3">
<h3 class="anchored" data-anchor-id="aesthetic-mapping-to-layers">Aesthetic mapping to layers</h3>
<p>Next, we will add a “geom” layer to our ggplot object. For example, we could add a points layer which would automatically adopt the aesthetic mapping described in the previous line of code.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># describe the base ggplot object and tell it what data we are interested in along with the aesthetic mapping</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-3">  <span class="co" style="color: #5E5E5E;"># add a points layer on top</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>What we have done is map each country (row) in the data to a point in the space defined by the GDP and life expectancy value. The end result is an ugly blob of points. Fortunately, there are many things that we can do to make this blob of points prettier.</p>
<p>For example, we can change the transparency of all points by setting the alpha argument to a low value, changing the color of the points to be blue instead of black, and making the points smaller.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"cornflowerblue"</span>, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Note that the above argument changed the alpha value and color for <em>all of the points at once</em>.</p>
<p>One of the truly powerful features of ggplot2 is the ability to change these aesthetics based on the data itself. For example, perhaps we want to color each point by its <code>continent</code>. Instead of separating the data into five different subsets (based on the possible values of continent), and adding the different colored points separately, we can simply add all the points once and add an colour aesthetic map for <code>continent</code>.</p>
<p>Note that whenever we are using a variable from the data to describe an aesthetic property of a geom, this aesthetic property needs to be included in the <code>aes()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">unique</span>(gapminder<span class="sc" style="color: #5E5E5E;">$</span>continent)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Asia"     "Europe"   "Africa"   "Americas" "Oceania" </code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp, <span class="at" style="color: #657422;">color =</span> continent)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>We could also add aesthetic mappings for other features such as shape, size, transparency (alpha), and more! For example, changing the size based on population:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp, <span class="at" style="color: #657422;">color =</span> continent, <span class="at" style="color: #657422;">size =</span> pop)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="types-of-layers" class="level3">
<h3 class="anchored" data-anchor-id="types-of-layers">Types of layers</h3>
<p>So far, we have only seen scatterplots (point geoms), however, there are many other geoms we could add, including:</p>
<ul>
<li><p>lines</p></li>
<li><p>histograms</p></li>
<li><p>boxplots and violin plots</p></li>
<li><p>barplots</p></li>
<li><p>smoothed curves</p></li>
</ul>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> year, <span class="at" style="color: #657422;">y =</span> lifeExp, <span class="at" style="color: #657422;">group =</span> country, <span class="at" style="color: #657422;">color =</span> continent)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> continent, <span class="at" style="color: #657422;">y =</span> lifeExp, <span class="at" style="color: #657422;">fill =</span> continent)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> lifeExp)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="at" style="color: #657422;">binwidth =</span> <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp, <span class="at" style="color: #657422;">size =</span> pop)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color =</span> continent), <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #657422;">se =</span> <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"loess"</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"grey30"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.
ℹ Please use `linewidth` instead.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>`geom_smooth()` using formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: The following aesthetics were dropped during statistical transformation: size
ℹ This can happen when ggplot fails to infer the correct grouping structure in
  the data.
ℹ Did you forget to specify a `group` aesthetic or to convert a numerical
  variable into a factor?</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="scales" class="level2">
<h2 class="anchored" data-anchor-id="scales">Scales</h2>
<p>We are going to return to our original scatterplot example to discuss scales, legend and positioning.</p>
<p>To remind you, this scatterplot showed GDP per capita against life expectancy for each country colored by continent and sized by population.</p>
<p>To keep things simple, let’s filter to a single year.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb18-2">gapminder_2007 <span class="ot" style="color: #003B4F;">&lt;-</span> gapminder <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2007</span>)</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder_2007, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp, <span class="at" style="color: #657422;">color =</span> continent, <span class="at" style="color: #657422;">size =</span> pop)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The scale of a plot describes the features of the space in which it is plotted. Arguably, it would be better to show <code>gdpPercap</code> on a logarithmic scale, rather than in its raw form. Fortunately, this is easy to do using a <code>scale</code> function, which can be considered another layer that transforms our plot.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder_2007, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp, <span class="at" style="color: #657422;">color =</span> continent, <span class="at" style="color: #657422;">size =</span> pop)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The default x- (and y-) axes scales are <code>scale_x_continuous</code> and <code>scale_y_continuous</code>, but other options include <code>scale_x_sqrt</code> and <code>scale_x_reverse</code>.</p>
<p>Each of these scale functions has many options including changing the limits, the breaks, etc. For example in the plot below, we manipulate the x-axis by providing arguments to our <code>scale</code> function of choice.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder_2007, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp, <span class="at" style="color: #657422;">color =</span> continent, <span class="at" style="color: #657422;">size =</span> pop)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-3">  <span class="co" style="color: #5E5E5E;"># clean the x-axis breaks</span></span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>(<span class="at" style="color: #657422;">breaks =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">1000</span>, <span class="dv" style="color: #AD0000;">10000</span>),</span>
<span id="cb21-5">                <span class="at" style="color: #657422;">limits =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">120000</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Notice that we changed the name of the x-axis in the plot using the <code>name</code> argument. This could also be done using the <code>labs</code> function. As an example, below we add a title and change the name of the y-axis and legends using the <code>labs</code> function.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder_2007, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp, <span class="at" style="color: #657422;">color =</span> continent, <span class="at" style="color: #657422;">size =</span> pop)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb22-2">  <span class="co" style="color: #5E5E5E;"># add scatter points</span></span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb22-4">  <span class="co" style="color: #5E5E5E;"># log-scale the x-axis</span></span>
<span id="cb22-5">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb22-6">  <span class="co" style="color: #5E5E5E;"># change labels</span></span>
<span id="cb22-7">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"GDP versus life expectancy in 2007"</span>,</span>
<span id="cb22-8">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"GDP per capita (log scale)"</span>,</span>
<span id="cb22-9">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Life expectancy"</span>,</span>
<span id="cb22-10">       <span class="at" style="color: #657422;">size =</span> <span class="st" style="color: #20794D;">"Popoulation"</span>,</span>
<span id="cb22-11">       <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"Continent"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>We could also manipulate the scale of the size variable. Below, we expand the range of sizes and clean up the variable name. Since the variable we provided for size is a continuous variable (<code>pop</code>) we use the <code>scale_size_continuous</code> argument.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder_2007, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp, <span class="at" style="color: #657422;">color =</span> continent, <span class="at" style="color: #657422;">size =</span> pop)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb23-2">  <span class="co" style="color: #5E5E5E;"># add scatter points</span></span>
<span id="cb23-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb23-4">  <span class="co" style="color: #5E5E5E;"># log-scale the x-axis</span></span>
<span id="cb23-5">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb23-6">  <span class="co" style="color: #5E5E5E;"># change labels</span></span>
<span id="cb23-7">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"GDP versus life expectancy in 2007"</span>,</span>
<span id="cb23-8">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"GDP per capita (log scale)"</span>,</span>
<span id="cb23-9">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Life expectancy"</span>,</span>
<span id="cb23-10">       <span class="at" style="color: #657422;">size =</span> <span class="st" style="color: #20794D;">"Popoulation (millions)"</span>,</span>
<span id="cb23-11">       <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"Continent"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb23-12">  <span class="co" style="color: #5E5E5E;"># change the size scale</span></span>
<span id="cb23-13">  <span class="fu" style="color: #4758AB;">scale_size</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.1</span>, <span class="dv" style="color: #AD0000;">10</span>),</span>
<span id="cb23-14">             <span class="at" style="color: #657422;">breaks =</span> <span class="dv" style="color: #AD0000;">1000000</span> <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">250</span>, <span class="dv" style="color: #AD0000;">500</span>, <span class="dv" style="color: #AD0000;">750</span>, <span class="dv" style="color: #AD0000;">1000</span>, <span class="dv" style="color: #AD0000;">1250</span>),</span>
<span id="cb23-15">             <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"250"</span>, <span class="st" style="color: #20794D;">"500"</span>, <span class="st" style="color: #20794D;">"750"</span>, <span class="st" style="color: #20794D;">"1000"</span>, <span class="st" style="color: #20794D;">"1250"</span>)) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Scales also exist for other aesthetic features such as <code>fill</code>, <code>color</code>, <code>alpha</code>, etc.</p>
</section>
<section id="faceting" class="level2">
<h2 class="anchored" data-anchor-id="faceting">Faceting</h2>
<p>Sometimes we want to be able to make multiple plots of the same thing across different categories. This can be achieved with minimal repetition using faceting.</p>
<p>In the example below, we will remake the plot above individually for each continent.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder_2007, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp, <span class="at" style="color: #657422;">color =</span> continent, <span class="at" style="color: #657422;">size =</span> pop)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb24-2">  <span class="co" style="color: #5E5E5E;"># add scatter points</span></span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb24-4">  <span class="co" style="color: #5E5E5E;"># log-scale the x-axis</span></span>
<span id="cb24-5">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb24-6">  <span class="co" style="color: #5E5E5E;"># change labels</span></span>
<span id="cb24-7">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"GDP versus life expectancy in 2007"</span>,</span>
<span id="cb24-8">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"GDP per capita (log scale)"</span>,</span>
<span id="cb24-9">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Life expectancy"</span>,</span>
<span id="cb24-10">       <span class="at" style="color: #657422;">size =</span> <span class="st" style="color: #20794D;">"Popoulation (millions)"</span>,</span>
<span id="cb24-11">       <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"Continent"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb24-12">  <span class="co" style="color: #5E5E5E;"># change the size scale</span></span>
<span id="cb24-13">  <span class="fu" style="color: #4758AB;">scale_size</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.1</span>, <span class="dv" style="color: #AD0000;">10</span>),</span>
<span id="cb24-14">             <span class="at" style="color: #657422;">breaks =</span> <span class="dv" style="color: #AD0000;">1000000</span> <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">250</span>, <span class="dv" style="color: #AD0000;">500</span>, <span class="dv" style="color: #AD0000;">750</span>, <span class="dv" style="color: #AD0000;">1000</span>, <span class="dv" style="color: #AD0000;">1250</span>),</span>
<span id="cb24-15">             <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"250"</span>, <span class="st" style="color: #20794D;">"500"</span>, <span class="st" style="color: #20794D;">"750"</span>, <span class="st" style="color: #20794D;">"1000"</span>, <span class="st" style="color: #20794D;">"1250"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb24-16">  <span class="co" style="color: #5E5E5E;"># add faceting</span></span>
<span id="cb24-17">  <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;">~</span>continent)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="themes-making-even-more-beautiful-figures-with-ggplot2" class="level2">
<h2 class="anchored" data-anchor-id="themes-making-even-more-beautiful-figures-with-ggplot2">Themes: making even more beautiful figures with ggplot2</h2>
<p>One of the first things I usually do when I make a ggplot is edit the default theme. I actually really don’t like the grey background, nor do I like having a grid unless it really helps with the plot interpretation.</p>
<p>One of the simplest themes is <code>theme_classic</code>, however there are several other themes to choose from. The <code>ggthemes</code> package offers many additional themes, but you could also make your own using the <code>theme()</code> function.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder_2007, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp, <span class="at" style="color: #657422;">color =</span> continent, <span class="at" style="color: #657422;">size =</span> pop)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-2">  <span class="co" style="color: #5E5E5E;"># add scatter points</span></span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-4">  <span class="co" style="color: #5E5E5E;"># clean the axes names and breaks</span></span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>(<span class="at" style="color: #657422;">breaks =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1000</span>, <span class="dv" style="color: #AD0000;">10000</span>),</span>
<span id="cb25-6">                <span class="at" style="color: #657422;">limits =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">200</span>, <span class="dv" style="color: #AD0000;">120000</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-7">  <span class="co" style="color: #5E5E5E;"># change labels</span></span>
<span id="cb25-8">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"GDP versus life expectancy in 2007"</span>,</span>
<span id="cb25-9">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"GDP per capita (log scale)"</span>,</span>
<span id="cb25-10">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Life expectancy"</span>,</span>
<span id="cb25-11">       <span class="at" style="color: #657422;">size =</span> <span class="st" style="color: #20794D;">"Popoulation (millions)"</span>,</span>
<span id="cb25-12">       <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"Continent"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-13">  <span class="co" style="color: #5E5E5E;"># change the size scale</span></span>
<span id="cb25-14">  <span class="fu" style="color: #4758AB;">scale_size</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.1</span>, <span class="dv" style="color: #AD0000;">10</span>),</span>
<span id="cb25-15">             <span class="at" style="color: #657422;">breaks =</span> <span class="dv" style="color: #AD0000;">1000000</span> <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">250</span>, <span class="dv" style="color: #AD0000;">500</span>, <span class="dv" style="color: #AD0000;">750</span>, <span class="dv" style="color: #AD0000;">1000</span>, <span class="dv" style="color: #AD0000;">1250</span>),</span>
<span id="cb25-16">             <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"250"</span>, <span class="st" style="color: #20794D;">"500"</span>, <span class="st" style="color: #20794D;">"750"</span>, <span class="st" style="color: #20794D;">"1000"</span>, <span class="st" style="color: #20794D;">"1250"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-17">  <span class="co" style="color: #5E5E5E;"># add a nicer theme</span></span>
<span id="cb25-18">  <span class="fu" style="color: #4758AB;">theme_classic</span>(<span class="at" style="color: #657422;">base_family =</span> <span class="st" style="color: #20794D;">"Avenir"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>As an example of further customization of the ggplot theme, below we do the following:</p>
<ul>
<li>move the legend to the top (set <code>legend.position = "top"</code> in <code>theme()</code>)</li>
<li>removing the population legend (set <code>guide = "none"</code> in <code>scale_size()</code>)</li>
<li>remove the axes lines (set <code>axis.line = element_blank()</code> in <code>theme()</code>)</li>
<li>add some text annotations (add <code>geom_text</code> layer)</li>
</ul>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;">ggplot</span>(gapminder_2007) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb26-2">  <span class="co" style="color: #5E5E5E;"># add scatter points</span></span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp, <span class="at" style="color: #657422;">color =</span> continent, <span class="at" style="color: #657422;">size =</span> pop),</span>
<span id="cb26-4">             <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb26-5">  <span class="co" style="color: #5E5E5E;"># add some text annotations for the very large countries</span></span>
<span id="cb26-6">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">label =</span> country),</span>
<span id="cb26-7">            <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"grey50"</span>,</span>
<span id="cb26-8">            <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">filter</span>(gapminder_2007, pop <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1000000000</span> <span class="sc" style="color: #5E5E5E;">|</span> country <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Nigeria"</span>, <span class="st" style="color: #20794D;">"United States"</span>))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb26-9">  <span class="co" style="color: #5E5E5E;"># clean the axes names and breaks</span></span>
<span id="cb26-10">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>(<span class="at" style="color: #657422;">limits =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">200</span>, <span class="dv" style="color: #AD0000;">60000</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb26-11">  <span class="co" style="color: #5E5E5E;"># change labels</span></span>
<span id="cb26-12">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"GDP versus life expectancy in 2007"</span>,</span>
<span id="cb26-13">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"GDP per capita (log scale)"</span>,</span>
<span id="cb26-14">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Life expectancy"</span>,</span>
<span id="cb26-15">       <span class="at" style="color: #657422;">size =</span> <span class="st" style="color: #20794D;">"Popoulation"</span>,</span>
<span id="cb26-16">       <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"Continent"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb26-17">  <span class="co" style="color: #5E5E5E;"># change the size scale</span></span>
<span id="cb26-18">  <span class="fu" style="color: #4758AB;">scale_size</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.1</span>, <span class="dv" style="color: #AD0000;">10</span>),</span>
<span id="cb26-19">             <span class="co" style="color: #5E5E5E;"># remove size legend</span></span>
<span id="cb26-20">             <span class="at" style="color: #657422;">guide =</span> <span class="st" style="color: #20794D;">"none"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb26-21">  <span class="co" style="color: #5E5E5E;"># add a nicer theme</span></span>
<span id="cb26-22">  <span class="fu" style="color: #4758AB;">theme_classic</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb26-23">  <span class="co" style="color: #5E5E5E;"># place legend at top and grey axis lines</span></span>
<span id="cb26-24">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"top"</span>,</span>
<span id="cb26-25">        <span class="at" style="color: #657422;">axis.line =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"grey85"</span>),</span>
<span id="cb26-26">        <span class="at" style="color: #657422;">axis.ticks =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"grey85"</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="saving-your-plots" class="level2">
<h2 class="anchored" data-anchor-id="saving-your-plots">Saving your plots</h2>
<p>You can save your plots using the <code>ggsave()</code> function.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(gapminder_2007) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb27-2">  <span class="co" style="color: #5E5E5E;"># add scatter points</span></span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp, <span class="at" style="color: #657422;">color =</span> continent, <span class="at" style="color: #657422;">size =</span> pop),</span>
<span id="cb27-4">             <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb27-5">  <span class="co" style="color: #5E5E5E;"># add some text annotations for the very large countries</span></span>
<span id="cb27-6">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> gdpPercap, <span class="at" style="color: #657422;">y =</span> lifeExp <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">label =</span> country),</span>
<span id="cb27-7">            <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"grey50"</span>,</span>
<span id="cb27-8">            <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">filter</span>(gapminder_2007, pop <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1000000000</span> <span class="sc" style="color: #5E5E5E;">|</span> country <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Nigeria"</span>, <span class="st" style="color: #20794D;">"United States"</span>))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb27-9">  <span class="co" style="color: #5E5E5E;"># clean the axes names and breaks</span></span>
<span id="cb27-10">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>(<span class="at" style="color: #657422;">limits =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">200</span>, <span class="dv" style="color: #AD0000;">60000</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb27-11">  <span class="co" style="color: #5E5E5E;"># change labels</span></span>
<span id="cb27-12">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"GDP versus life expectancy in 2007"</span>,</span>
<span id="cb27-13">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"GDP per capita (log scale)"</span>,</span>
<span id="cb27-14">       <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Life expectancy"</span>,</span>
<span id="cb27-15">       <span class="at" style="color: #657422;">size =</span> <span class="st" style="color: #20794D;">"Popoulation"</span>,</span>
<span id="cb27-16">       <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"Continent"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb27-17">  <span class="co" style="color: #5E5E5E;"># change the size scale</span></span>
<span id="cb27-18">  <span class="fu" style="color: #4758AB;">scale_size</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.1</span>, <span class="dv" style="color: #AD0000;">10</span>),</span>
<span id="cb27-19">             <span class="co" style="color: #5E5E5E;"># remove size legend</span></span>
<span id="cb27-20">             <span class="at" style="color: #657422;">guide =</span> <span class="st" style="color: #20794D;">"none"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb27-21">  <span class="co" style="color: #5E5E5E;"># add a nicer theme</span></span>
<span id="cb27-22">  <span class="fu" style="color: #4758AB;">theme_classic</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb27-23">  <span class="co" style="color: #5E5E5E;"># place legend at top and grey axis lines</span></span>
<span id="cb27-24">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"top"</span>,</span>
<span id="cb27-25">        <span class="at" style="color: #657422;">axis.line =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"grey85"</span>),</span>
<span id="cb27-26">        <span class="at" style="color: #657422;">axis.ticks =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"grey85"</span>))</span>
<span id="cb27-27"></span>
<span id="cb27-28"><span class="co" style="color: #5E5E5E;"># save the plot</span></span>
<span id="cb27-29"><span class="fu" style="color: #4758AB;">ggsave</span>(<span class="st" style="color: #20794D;">"beautiful_plot.png"</span>, p, <span class="at" style="color: #657422;">dpi =</span> <span class="dv" style="color: #AD0000;">300</span>, <span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">6</span>, <span class="at" style="color: #657422;">height =</span> <span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>R</category>
  <category>visualization</category>
  <guid>https://www.rebeccabarter.com/blog/2017-11-17-ggplot2_tutorial.html</guid>
  <pubDate>Fri, 17 Nov 2017 07:00:00 GMT</pubDate>
</item>
<item>
  <title>A basic tutorial of caret: the machine learning package in R</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2017-11-17-caret_tutorial.html</link>
  <description><![CDATA[ 




<p>Note: If you’re new to caret, I suggest learning tidymodels instead <a href="http://www.rebeccabarter.com/blog/2020-03-25_machine_learning/">http://www.rebeccabarter.com/blog/2020-03-25_machine_learning/</a>. Tidymodels is essentially caret’s successor. Don’t worry though, your caret code will still work!</p>
<p>Older note: This tutorial was based on an older version of the abalone data that had a binary <code>old</code> varibale rather than a numeric <code>age</code> variable. It has been modified lightly so that it uses a manual <code>old</code> variable (is the abalone older than 10 or not) and ignores the numeric <code>age</code> variable.</p>
<p>Materials prepared by Rebecca Barter. Package developed by Max Kuhn.</p>
<p>An interactive Jupyter Notebook version of this tutorial can be found at https://github.com/rlbarter/STAT-215A-Fall-2017/tree/master/week11. Feel free to download it and use for your own learning or teaching adventures!</p>
<p>R has a wide number of packages for machine learning (ML), which is great, but also quite frustrating since each package was designed independently and has very different syntax, inputs and outputs.</p>
<p>This means that if you want to do machine learning in R, you have to learn a large number of separate methods.</p>
<p>Recognizing this, Max Kuhn (at the time working in drug discovery at Pfizer, now at RStudio) put together a single package for performing any machine learning method you like. This package is called <code>caret</code>. Caret stands for <strong>C</strong>lassification <strong>A</strong>nd <strong>Re</strong>gression <strong>T</strong>raining. Apparently caret has little to do with our orange friend, the carrot.</p>
<!-- ```{r echo = FALSE} -->
<!-- knitr::include_graphics("img/caret/caret.png") -->
<!-- ``` -->
<p>Not only does caret allow you to run a plethora of ML methods, it also provides tools for auxiliary techniques such as:</p>
<ul>
<li><p>Data preparation (imputation, centering/scaling data, removing correlated predictors, reducing skewness)</p></li>
<li><p>Data splitting</p></li>
<li><p>Variable selection</p></li>
<li><p>Model evaluation</p></li>
</ul>
<p>An extensive vignette for caret can be found here: https://topepo.github.io/caret/index.html</p>
<section id="a-simple-view-of-caret-the-default-train-function" class="level2">
<h2 class="anchored" data-anchor-id="a-simple-view-of-caret-the-default-train-function">A simple view of caret: the default <code>train</code> function</h2>
<p>To implement your machine learning model of choice using caret you will use the <code>train</code> function. The types of modeling options available are many and are listed here: https://topepo.github.io/caret/available-models.html. In the example below, we will use the ranger implementation of random forest to predict whether abalone are “old” or not based on a bunch of physical properties of the abalone (sex, height, weight, diameter, etc). The abalone data came from the <a href="https://archive.ics.uci.edu/ml/datasets/abalone">UCI Machine Learning repository</a> (we split the data into a training and test set).</p>
<p>First we load the data into R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># load in packages</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(caret)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(ranger)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(e1071)</span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># load in abalone dataset</span></span>
<span id="cb1-7">abalone_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.table</span>(<span class="st" style="color: #20794D;">"data/abalone.data"</span>, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">","</span>)</span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># load in column names</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">colnames</span>(abalone_data) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"sex"</span>, <span class="st" style="color: #20794D;">"length"</span>, <span class="st" style="color: #20794D;">"diameter"</span>, <span class="st" style="color: #20794D;">"height"</span>, </span>
<span id="cb1-10">                            <span class="st" style="color: #20794D;">"whole.weight"</span>, <span class="st" style="color: #20794D;">"shucked.weight"</span>, </span>
<span id="cb1-11">                            <span class="st" style="color: #20794D;">"viscera.weight"</span>, <span class="st" style="color: #20794D;">"shell.weight"</span>, <span class="st" style="color: #20794D;">"age"</span>)</span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;"># add a logical variable for "old" (age &gt; 10)</span></span>
<span id="cb1-13">abalone_data <span class="ot" style="color: #003B4F;">&lt;-</span> abalone_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-14">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">old =</span> age <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-15">  <span class="co" style="color: #5E5E5E;"># remove the "age" variable</span></span>
<span id="cb1-16">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>age)</span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;"># split into training and testing</span></span>
<span id="cb1-18"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">23489</span>)</span>
<span id="cb1-19">train_index <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">nrow</span>(abalone_data), <span class="fl" style="color: #AD0000;">0.9</span> <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">nrow</span>(abalone_data))</span>
<span id="cb1-20">abalone_train <span class="ot" style="color: #003B4F;">&lt;-</span> abalone_data[train_index, ]</span>
<span id="cb1-21">abalone_test <span class="ot" style="color: #003B4F;">&lt;-</span> abalone_data[<span class="sc" style="color: #5E5E5E;">-</span>train_index, ]</span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;"># remove the original dataset</span></span>
<span id="cb1-23"><span class="fu" style="color: #4758AB;">rm</span>(abalone_data)</span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;"># view the first 6 rows of the training data</span></span>
<span id="cb1-25"><span class="fu" style="color: #4758AB;">head</span>(abalone_train)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     sex length diameter height whole.weight shucked.weight viscera.weight
232    M  0.565    0.440  0.175       0.9025         0.3100         0.1930
3906   M  0.380    0.270  0.095       0.2190         0.0835         0.0515
1179   F  0.650    0.500  0.190       1.4640         0.6415         0.3390
2296   F  0.520    0.415  0.145       0.8045         0.3325         0.1725
1513   F  0.650    0.500  0.160       1.3825         0.7020         0.3040
1023   F  0.640    0.500  0.170       1.5175         0.6930         0.3260
     shell.weight   old
232        0.3250  TRUE
3906       0.0700 FALSE
1179       0.4245 FALSE
2296       0.2850 FALSE
1513       0.3195 FALSE
1023       0.4090  TRUE</code></pre>
</div>
</div>
<p>It looks like we have 3,759 abalone:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">dim</span>(abalone_train)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3759    9</code></pre>
</div>
</div>
<p>Time to fit a random forest model using caret. Anytime we want to fit a model using <code>train</code> we tell it which model to fit by providing a formula for the first argument (<code>as.factor(old) ~ .</code> means that we want to model <code>old</code> as a function of all of the other variables). Then we need to provide a method (we specify <code>"ranger"</code> to implement randomForest).</p>
<div class="cell" data-hash="2017-11-17-caret_tutorial_cache/html/unnamed-chunk-3_6a88e047b4a7d98e0e4f25071f2e365b">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># fit a random forest model (using ranger)</span></span>
<span id="cb5-2">rf_fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">train</span>(<span class="fu" style="color: #4758AB;">as.factor</span>(old) <span class="sc" style="color: #5E5E5E;">~</span> ., </span>
<span id="cb5-3">                <span class="at" style="color: #657422;">data =</span> abalone_train, </span>
<span id="cb5-4">                <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"ranger"</span>)</span></code></pre></div>
</div>
<p>By default, the <code>train</code> function without any arguments re-runs the model over 25 bootstrap samples and across 3 options of the tuning parameter (the tuning parameter for <code>ranger</code> is <code>mtry</code>; the number of randomly selected predictors at each cut in the tree).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">rf_fit</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Random Forest 

3759 samples
   8 predictor
   2 classes: 'FALSE', 'TRUE' 

No pre-processing
Resampling: Bootstrapped (25 reps) 
Summary of sample sizes: 3759, 3759, 3759, 3759, 3759, 3759, ... 
Resampling results across tuning parameters:

  mtry  splitrule   Accuracy   Kappa    
  2     gini        0.7794339  0.4982012
  2     extratrees  0.7788261  0.4867672
  5     gini        0.7722038  0.4853445
  5     extratrees  0.7784925  0.4974177
  9     gini        0.7665692  0.4738511
  9     extratrees  0.7759596  0.4933252

Tuning parameter 'min.node.size' was held constant at a value of 1
Accuracy was used to select the optimal model using the largest value.
The final values used for the model were mtry = 2, splitrule = gini
 and min.node.size = 1.</code></pre>
</div>
</div>
<p>To test the data on an independent test set is equally as simple using the inbuilt <code>predict</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># predict the outcome on a test set</span></span>
<span id="cb8-2">abalone_rf_pred <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(rf_fit, abalone_test)</span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;"># compare predicted outcome and true outcome</span></span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;">confusionMatrix</span>(abalone_rf_pred, <span class="fu" style="color: #4758AB;">as.factor</span>(abalone_test<span class="sc" style="color: #5E5E5E;">$</span>old))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Confusion Matrix and Statistics

          Reference
Prediction FALSE TRUE
     FALSE   229   60
     TRUE     33   96
                                          
               Accuracy : 0.7775          
                 95% CI : (0.7346, 0.8165)
    No Information Rate : 0.6268          
    P-Value [Acc &gt; NIR] : 2.672e-11       
                                          
                  Kappa : 0.5072          
                                          
 Mcnemar's Test P-Value : 0.007016        
                                          
            Sensitivity : 0.8740          
            Specificity : 0.6154          
         Pos Pred Value : 0.7924          
         Neg Pred Value : 0.7442          
             Prevalence : 0.6268          
         Detection Rate : 0.5478          
   Detection Prevalence : 0.6914          
      Balanced Accuracy : 0.7447          
                                          
       'Positive' Class : FALSE           
                                          </code></pre>
</div>
</div>
</section>
<section id="getting-a-little-fancier-with-caret" class="level1">
<h1>Getting a little fancier with caret</h1>
<p>We have now seen how to fit a model along with the default resampling implementation (bootstrapping) and parameter selection. While this is great, there are many more things we could do with caret.</p>
<section id="pre-processing-preprocess" class="level2">
<h2 class="anchored" data-anchor-id="pre-processing-preprocess">Pre-processing (<code>preProcess</code>)</h2>
<p>There are a number of pre-processing steps that are easily implemented by caret. Several stand-alone functions from caret target specific issues that might arise when setting up the model. These include</p>
<ul>
<li><p><code>dummyVars</code>: creating dummy variables from categorical variables with multiple categories</p></li>
<li><p><code>nearZeroVar</code>: identifying zero- and near zero-variance predictors (these may cause issues when subsampling)</p></li>
<li><p><code>findCorrelation</code>: identifying correlated predictors</p></li>
<li><p><code>findLinearCombos</code>: identify linear dependencies between predictors</p></li>
</ul>
<p>In addition to these individual functions, there also exists the <strong><code>preProcess</code></strong> function which can be used to perform more common tasks such as centering and scaling, imputation and transformation. <code>preProcess</code> takes in a data frame to be processed and a method which can be any of “BoxCox”, “YeoJohnson”, “expoTrans”, “center”, “scale”, “range”, “knnImpute”, “bagImpute”, “medianImpute”, “pca”, “ica”, “spatialSign”, “corr”, “zv”, “nzv”, and “conditionalX”.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># center, scale and perform a YeoJohnson transformation</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;"># identify and remove variables with near zero variance</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;"># perform pca</span></span>
<span id="cb10-4">abalone_no_nzv_pca <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">preProcess</span>(<span class="fu" style="color: #4758AB;">select</span>(abalone_train, <span class="sc" style="color: #5E5E5E;">-</span> old), </span>
<span id="cb10-5">                        <span class="at" style="color: #657422;">method =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"center"</span>, <span class="st" style="color: #20794D;">"scale"</span>, <span class="st" style="color: #20794D;">"nzv"</span>, <span class="st" style="color: #20794D;">"pca"</span>))</span>
<span id="cb10-6">abalone_no_nzv_pca</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Created from 3759 samples and 8 variables

Pre-processing:
  - centered (7)
  - ignored (1)
  - principal component signal extraction (7)
  - scaled (7)

PCA needed 3 components to capture 95 percent of the variance</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># identify which variables were ignored, centered, scaled, etc</span></span>
<span id="cb12-2">abalone_no_nzv_pca<span class="sc" style="color: #5E5E5E;">$</span>method</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$center
[1] "length"         "diameter"       "height"         "whole.weight"  
[5] "shucked.weight" "viscera.weight" "shell.weight"  

$scale
[1] "length"         "diameter"       "height"         "whole.weight"  
[5] "shucked.weight" "viscera.weight" "shell.weight"  

$pca
[1] "length"         "diameter"       "height"         "whole.weight"  
[5] "shucked.weight" "viscera.weight" "shell.weight"  

$ignore
[1] "sex"</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># identify the principal components</span></span>
<span id="cb14-2">abalone_no_nzv_pca<span class="sc" style="color: #5E5E5E;">$</span>rotation</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                      PC1         PC2        PC3
length         -0.3835950  0.01308476 -0.5915192
diameter       -0.3838966  0.03978406 -0.5874657
height         -0.3458509  0.88289420  0.2793599
whole.weight   -0.3910710 -0.22191114  0.2394200
shucked.weight -0.3784382 -0.33048177  0.2601988
viscera.weight -0.3819522 -0.23798574  0.2841819
shell.weight   -0.3792439 -0.06036456  0.1454731</code></pre>
</div>
</div>
</section>
<section id="data-splitting-createdatapartition-and-groupkfold" class="level2">
<h2 class="anchored" data-anchor-id="data-splitting-createdatapartition-and-groupkfold">Data splitting (<code>createDataPartition</code> and <code>groupKFold</code>)</h2>
<p>Generating subsets of the data is easy with the <strong><code>createDataPartition</code></strong> function. While this function can be used to simply generate training and testing sets, it can also be used to subset the data while respecting important groupings that exist within the data.</p>
<p>First, we show an example of performing general sample splitting to generate 10 different 80% subsamples.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># identify the indices of 10 80% subsamples of the iris data</span></span>
<span id="cb16-2">train_index <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">createDataPartition</span>(iris<span class="sc" style="color: #5E5E5E;">$</span>Species,</span>
<span id="cb16-3">                                   <span class="at" style="color: #657422;">p =</span> <span class="fl" style="color: #AD0000;">0.8</span>,</span>
<span id="cb16-4">                                   <span class="at" style="color: #657422;">list =</span> <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span id="cb16-5">                                   <span class="at" style="color: #657422;">times =</span> <span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># look at the first 6 indices of each subsample</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;">head</span>(train_index)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Resample01 Resample02 Resample03 Resample04 Resample05 Resample06
[1,]          3          3          1          1          1          2
[2,]          4          4          2          2          2          3
[3,]          5          5          3          3          3          4
[4,]          6          6          5          4          4          5
[5,]          7          9          6          5          6          6
[6,]          8         10         10          6          7          7
     Resample07 Resample08 Resample09 Resample10
[1,]          2          2          1          2
[2,]          4          3          3          5
[3,]          5          4          4          6
[4,]          6          5          5          7
[5,]          8          6          8          9
[6,]          9          7          9         11</code></pre>
</div>
</div>
<p>While the above is incredibly useful, it is also very easy to do using a for loop. Not so exciting.</p>
<p>Something that IS more exciting is the ability to do K-fold cross validation which respects groupings in the data. The <strong><code>groupKFold</code></strong> function does just that!</p>
<p>As an example, let’s consider the following made-up abalone groups so that each sequential set of 5 abalone that appear in the dataset together are in the same group. For simplicity we will only consider the first 50 abalone.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># add a madeup grouping variable that groupes each subsequent 5 abalone together</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;"># filter to the first 50 abalone for simplicity</span></span>
<span id="cb19-3">abalone_grouped <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cbind</span>(abalone_train[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">50</span>, ], <span class="at" style="color: #657422;">group =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>, <span class="at" style="color: #657422;">each =</span> <span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb19-4"><span class="fu" style="color: #4758AB;">head</span>(abalone_grouped, <span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     sex length diameter height whole.weight shucked.weight viscera.weight
232    M  0.565    0.440  0.175       0.9025         0.3100         0.1930
3906   M  0.380    0.270  0.095       0.2190         0.0835         0.0515
1179   F  0.650    0.500  0.190       1.4640         0.6415         0.3390
2296   F  0.520    0.415  0.145       0.8045         0.3325         0.1725
1513   F  0.650    0.500  0.160       1.3825         0.7020         0.3040
1023   F  0.640    0.500  0.170       1.5175         0.6930         0.3260
2390   M  0.420    0.340  0.125       0.4495         0.1650         0.1125
856    F  0.575    0.465  0.140       0.9580         0.4420         0.1815
2462   F  0.500    0.385  0.130       0.7680         0.2625         0.0950
2756   F  0.525    0.415  0.150       0.7055         0.3290         0.1470
     shell.weight   old group
232        0.3250  TRUE     1
3906       0.0700 FALSE     1
1179       0.4245 FALSE     1
2296       0.2850 FALSE     1
1513       0.3195 FALSE     1
1023       0.4090  TRUE     2
2390       0.1440  TRUE     2
856        0.2705 FALSE     2
2462       0.2700  TRUE     2
2756       0.1990 FALSE     2</code></pre>
</div>
</div>
<p>The following code performs 10-fold cross-validation while respecting the groups in the abalone data. That is, each group of abalone must always appear in the same group together.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># perform grouped K means</span></span>
<span id="cb21-2">group_folds <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">groupKFold</span>(abalone_grouped<span class="sc" style="color: #5E5E5E;">$</span>group, <span class="at" style="color: #657422;">k =</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb21-3">group_folds</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Fold1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 21 22 23 24 25 26 27 28 29 30
[26] 31 32 33 34 35 41 42 43 44 45 46 47 48 49 50

$Fold2
 [1]  1  2  3  4  5  6  7  8  9 10 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
[26] 36 37 38 39 40 41 42 43 44 45

$Fold3
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 46 47 48 49 50

$Fold4
 [1]  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 26 27 28 29 30 31 32 33 34 35
[26] 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50

$Fold5
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50

$Fold6
 [1]  1  2  3  4  5 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
[26] 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50</code></pre>
</div>
</div>
</section>
<section id="resampling-options-traincontrol" class="level2">
<h2 class="anchored" data-anchor-id="resampling-options-traincontrol">Resampling options (<code>trainControl</code>)</h2>
<p>One of the most important part of training ML models is tuning parameters. You can use the <strong><code>trainControl</code></strong> function to specify a number of parameters (including sampling parameters) in your model. The object that is outputted from <code>trainControl</code> will be provided as an argument for <code>train</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">998</span>)</span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;"># create a testing and training set</span></span>
<span id="cb23-3">in_training <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">createDataPartition</span>(abalone_train<span class="sc" style="color: #5E5E5E;">$</span>old, <span class="at" style="color: #657422;">p =</span> .<span class="dv" style="color: #AD0000;">75</span>, <span class="at" style="color: #657422;">list =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb23-4">training <span class="ot" style="color: #003B4F;">&lt;-</span> abalone_train[ in_training,]</span>
<span id="cb23-5">testing  <span class="ot" style="color: #003B4F;">&lt;-</span> abalone_train[<span class="sc" style="color: #5E5E5E;">-</span>in_training,]</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># specify that the resampling method is </span></span>
<span id="cb24-2">fit_control <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">trainControl</span>(<span class="do" style="color: #5E5E5E;
font-style: italic;">## 10-fold CV</span></span>
<span id="cb24-3">                           <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"cv"</span>,</span>
<span id="cb24-4">                           <span class="at" style="color: #657422;">number =</span> <span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># run a random forest model</span></span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">825</span>)</span>
<span id="cb25-3">rf_fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">train</span>(<span class="fu" style="color: #4758AB;">as.factor</span>(old) <span class="sc" style="color: #5E5E5E;">~</span> ., </span>
<span id="cb25-4">                <span class="at" style="color: #657422;">data =</span> abalone_train, </span>
<span id="cb25-5">                <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"ranger"</span>,</span>
<span id="cb25-6">                <span class="at" style="color: #657422;">trControl =</span> fit_control)</span>
<span id="cb25-7">rf_fit</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Random Forest 

3759 samples
   8 predictor
   2 classes: 'FALSE', 'TRUE' 

No pre-processing
Resampling: Cross-Validated (10 fold) 
Summary of sample sizes: 3384, 3383, 3383, 3382, 3383, 3383, ... 
Resampling results across tuning parameters:

  mtry  splitrule   Accuracy   Kappa    
  2     gini        0.7826656  0.5054371
  2     extratrees  0.7853266  0.5032091
  5     gini        0.7765528  0.4953944
  5     extratrees  0.7850614  0.5120121
  9     gini        0.7683032  0.4787823
  9     extratrees  0.7810713  0.5057059

Tuning parameter 'min.node.size' was held constant at a value of 1
Accuracy was used to select the optimal model using the largest value.
The final values used for the model were mtry = 2, splitrule = extratrees
 and min.node.size = 1.</code></pre>
</div>
</div>
<p>We could instead use our <strong>grouped folds</strong> (rather than random CV folds) by assigning the <code>index</code> argument of <code>trainControl</code> to be <code>grouped_folds</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># specify that the resampling method is </span></span>
<span id="cb27-2">group_fit_control <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">trainControl</span>(<span class="do" style="color: #5E5E5E;
font-style: italic;">## use grouped CV folds</span></span>
<span id="cb27-3">                                  <span class="at" style="color: #657422;">index =</span> group_folds,</span>
<span id="cb27-4">                                  <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"cv"</span>)</span>
<span id="cb27-5"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">825</span>)</span>
<span id="cb27-6">rf_fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">train</span>(<span class="fu" style="color: #4758AB;">as.factor</span>(old) <span class="sc" style="color: #5E5E5E;">~</span> ., </span>
<span id="cb27-7">                <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">select</span>(abalone_grouped, <span class="sc" style="color: #5E5E5E;">-</span> group), </span>
<span id="cb27-8">                <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"ranger"</span>,</span>
<span id="cb27-9">                <span class="at" style="color: #657422;">trControl =</span> group_fit_control)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">rf_fit</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Random Forest 

50 samples
 8 predictor
 2 classes: 'FALSE', 'TRUE' 

No pre-processing
Resampling: Cross-Validated (10 fold) 
Summary of sample sizes: 40, 35, 45, 40, 45, 45, ... 
Resampling results across tuning parameters:

  mtry  splitrule   Accuracy   Kappa     
  2     gini        0.5222222  0.03968254
  2     extratrees  0.5111111  0.03784970
  5     gini        0.5444444  0.01758658
  5     extratrees  0.5333333  0.08743687
  9     gini        0.5777778  0.08071789
  9     extratrees  0.5555556  0.13952020

Tuning parameter 'min.node.size' was held constant at a value of 1
Accuracy was used to select the optimal model using the largest value.
The final values used for the model were mtry = 9, splitrule = gini
 and min.node.size = 1.</code></pre>
</div>
</div>
<p>You can also pass functions to <code>trainControl</code> that would have otherwise been passed to <code>preProcess</code>.</p>
</section>
<section id="model-parameter-tuning-options-tunegrid" class="level2">
<h2 class="anchored" data-anchor-id="model-parameter-tuning-options-tunegrid">Model parameter tuning options (<code>tuneGrid =</code>)</h2>
<p>You could specify your own tuning grid for model parameters using the <code>tuneGrid</code> argument of the <code>train</code> function. For example, you can define a grid of parameter combinations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;"># define a grid of parameter options to try</span></span>
<span id="cb30-2">rf_grid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">expand.grid</span>(<span class="at" style="color: #657422;">mtry =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb30-3">                      <span class="at" style="color: #657422;">splitrule =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"gini"</span>, <span class="st" style="color: #20794D;">"extratrees"</span>),</span>
<span id="cb30-4">                      <span class="at" style="color: #657422;">min.node.size =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb30-5">rf_grid</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   mtry  splitrule min.node.size
1     2       gini             1
2     3       gini             1
3     4       gini             1
4     5       gini             1
5     2 extratrees             1
6     3 extratrees             1
7     4 extratrees             1
8     5 extratrees             1
9     2       gini             3
10    3       gini             3
11    4       gini             3
12    5       gini             3
13    2 extratrees             3
14    3 extratrees             3
15    4 extratrees             3
16    5 extratrees             3
17    2       gini             5
18    3       gini             5
19    4       gini             5
20    5       gini             5
21    2 extratrees             5
22    3 extratrees             5
23    4 extratrees             5
24    5 extratrees             5</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;"># re-fit the model with the parameter grid</span></span>
<span id="cb32-2">rf_fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">train</span>(<span class="fu" style="color: #4758AB;">as.factor</span>(old) <span class="sc" style="color: #5E5E5E;">~</span> ., </span>
<span id="cb32-3">                <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">select</span>(abalone_grouped, <span class="sc" style="color: #5E5E5E;">-</span>group), </span>
<span id="cb32-4">                <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">"ranger"</span>,</span>
<span id="cb32-5">                <span class="at" style="color: #657422;">trControl =</span> group_fit_control,</span>
<span id="cb32-6">                <span class="co" style="color: #5E5E5E;"># provide a grid of parameters</span></span>
<span id="cb32-7">                <span class="at" style="color: #657422;">tuneGrid =</span> rf_grid)</span>
<span id="cb32-8">rf_fit</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Random Forest 

50 samples
 8 predictor
 2 classes: 'FALSE', 'TRUE' 

No pre-processing
Resampling: Cross-Validated (10 fold) 
Summary of sample sizes: 40, 35, 45, 40, 45, 45, ... 
Resampling results across tuning parameters:

  mtry  splitrule   min.node.size  Accuracy   Kappa       
  2     gini        1              0.5722222   0.083698830
  2     gini        3              0.4944444  -0.009825701
  2     gini        5              0.5388889   0.012270259
  2     extratrees  1              0.5111111   0.037849695
  2     extratrees  3              0.5277778   0.085035842
  2     extratrees  5              0.5277778   0.085035842
  3     gini        1              0.5555556   0.111111111
  3     gini        3              0.5888889   0.111111111
  3     gini        5              0.5722222   0.066856453
  3     extratrees  1              0.5444444   0.112636020
  3     extratrees  3              0.5555556   0.139520202
  3     extratrees  5              0.5277778   0.085035842
  4     gini        1              0.5277778  -0.009825701
  4     gini        3              0.5444444   0.080717893
  4     gini        5              0.5111111   0.017586580
  4     extratrees  1              0.5444444   0.109278267
  4     extratrees  3              0.5444444   0.109278267
  4     extratrees  5              0.5111111   0.037849695
  5     gini        1              0.5777778   0.089015152
  5     gini        3              0.5777778   0.080717893
  5     gini        5              0.6111111   0.152146465
  5     extratrees  1              0.5444444   0.109278267
  5     extratrees  3              0.5444444   0.109278267
  5     extratrees  5              0.5277778   0.085035842

Accuracy was used to select the optimal model using the largest value.
The final values used for the model were mtry = 5, splitrule = gini
 and min.node.size = 5.</code></pre>
</div>
</div>
</section>
</section>
<section id="advanced-topics" class="level1">
<h1>Advanced topics</h1>
<p>This tutorial has only scratched the surface of all of the options in the caret package. To find out more, see the extensive vignette https://topepo.github.io/caret/index.html.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>machine learning</category>
  <guid>https://www.rebeccabarter.com/blog/2017-11-17-caret_tutorial.html</guid>
  <pubDate>Fri, 17 Nov 2017 07:00:00 GMT</pubDate>
</item>
<item>
  <title>A Basic Data Science Workflow</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2017-08-16-data-science-workflow.html</link>
  <description><![CDATA[ 




<p>Developing a seamless, clean workflow for data analysis is harder than it sounds, especially because this is something that is almost never explicitly taught. Apparently we are all just supposed to “figure it out for ourselves”. For most of us, when we start our first few analysis projects, we basically have no idea how we are going to structure all of our files, or even what files we will need to make. As we try more and more things in our analysis (perhaps generating a large number of unnecessary files called <code>analysis2.R</code>, <code>next-analysis.R</code>, <code>analysis-writeup.Rmd</code>, <code>data_clean.csv</code>, <code>regression_results.csv</code> and <code>data_all.csv</code> along the way), we find that our project folder gets jumbled and confusing. The frustration when we come back to the project 6 months later and can’t remember which file contained the code that lead to the final conclusions is all too real.</p>
<p>This is why I have decided to describe in (possibly too much) detail the data cleaning workflow that I have somehow ended up with. I find this workflow to be particularly useful when dealing with messy (and possibly large) datasets that need several cleaning steps. Note that I did not develop this workflow in conjunction with any resources, I simply figured out what worked best for me via trial-and-error (a process which took 5 years and is definitely still ongoing). There will be several other resources out there on the internet describing “optimal workflows”, and these are definitely worth a read too (although a quick google found surprisingly few with the level of detail needed for a beginner). The key is figuring out a workflow that works best for <em>you</em>. That may be similar to mine, or it may not be.</p>
<p>If you decide to keep reading (perhaps because you too suffer from messy-project-syndrome and want some relief), by the end of this post you will know far too much about me and how I spend my time. As you will discover, I am particularly thorough when I clean data, and can spend hours simply making sure that I know what is in the data and moulding it so that it exactly adheres precisely to the format that I consider “clean”.</p>
<p>In this post I will describe my thought process as I download, clean and prepare for analysis the data from the 2016 <strong>American Time Use Survey (ATUS)</strong>. I have written my process in sufficient detail such that you can follow along if you’d like to.</p>
<p>The <a href="https://www.bls.gov/tus/">American Time Use Survey</a> is a yearly survey administered by the U.S. Census Bureau and sponsored by the Bureau of Labor Statistics. As with all surveys, it is probably good practice to first get an idea of what kind of population its respondents are supposed to represent. According to their website, the survey is sent to a randomly selected individual from each household in a set of eligible households chosen so as to represent a range of demographic characteristics. The set of eligible households consist of those who have completed their final month of the <a href="https://www.bls.gov/cps/home.htm">Current Population Survey</a> (a monthly survey of households conducted by the Bureau of Census for the Bureau of Labor Statistics).</p>
<p>This survey data has been featured heavily on Nathan Yau’s blog, <a href="https://flowingdata.com/tag/time-use/">Flowing Data</a>, which is where I became aware of it (thanks Nathan!).</p>
<section id="obtaining-the-data-from-the-website" class="level1">
<h1>Obtaining the data from the website</h1>
<p>The ATUS data can be downloaded from the <a href="https://www.atusdata.org/atus/">American Time Use Survey Extract Builder</a> which is maintained by the Minnesota Population Center at the University of Minnesota.</p>
<p>To actually obtain the data, you need to click on “Build an Extract” in the left-hand “Data” menu item (or click on “Get Data” inside the “Create an Extract” box). While I was initially confused about what to do once I got to the page with the drop-down menus asking me to “Select Variables”, I decided to just go crazy and start clicking. I soon discovered that an “extract” refers to the subset of the data corresponding to whichever variables I like. Once inside each of these drop-down menu entries I needed to click on the yellow plus symbols under “cart” to add the variables to my extract.</p>
<p>After selecting the variables I wanted, I clicked on “Select Samples” and selected only the year 2016. I then went to my cart and clicked on “Create Data Extract” and I was taken to a page where I had to choose my data format. I <strong>changed the data format to .csv</strong> and submitted my extract by clicking on “Submit Extract”. Note that you need to create an account to download your selected data, but this only takes a second. Once your data has been created (they will email you when it is ready; this should only take about a minute), you can refresh the page and download the CSV data file!</p>
<p>It is also a good idea to download the basic codebook by right clicking on the link and selecting “Save Link As” (which will tell us what each of the variables mean). I saved the file as a .txt file rather than whatever .cbk (the default) is.</p>
<p>In case you’re interested, the variables I selected are listed at the end of this post.</p>
</section>
<section id="setting-up-the-project-directory" class="level1">
<h1>Setting up the project directory</h1>
<p>Now that I have successfully downloaded the data (a file called <code>atus_00002.csv.gz</code>), I am ready to set up my project directory. This involved a few quick steps.</p>
<ol type="1">
<li><p>I made a directory called <code>ATUS/</code>. This is where my project is going to live.</p></li>
<li><p>Within <code>ATUS/</code>, I made two empty sub-directories <code>R/</code> and <code>data/</code></p></li>
<li><p>In the <code>R/</code> sub-directory I make two empty .R files called <code>load.R</code> and <code>clean.R</code>.</p></li>
<li><p>I then move the downloaded data and codebook files into <code>data/</code></p></li>
</ol>
<p>If you’re following along, my working directory now looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">data<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb1-2">  atus_00002.csv.gz</span>
<span id="cb1-3">  atus_00002.txt</span>
<span id="cb1-4">R<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb1-5">  clean.R</span>
<span id="cb1-6">  load.R</span></code></pre></div>
</div>
<p>It should be pretty obvious what <code>load.R</code> and <code>clean.R</code> are going to be for: they will be for loading the data and then cleaning the data (shocking, I know!).</p>
<p>While I will later start conducting my analysis in an <code>eda.Rmd</code> file, I usually don’t want to do the initial data cleaning in this file as it can be long and annoying to have to scroll past. Instead, I prefer to have separate scripts containing functions for loading and cleaning the data which I will later call in my <code>eda.Rmd</code> file.</p>
</section>
<section id="loading-the-data-load.r" class="level1">
<h1>Loading the data: <code>load.R</code></h1>
<p>Time to start work in the <code>load.R</code> file! The first thing I want to do is attempt to load in the data. Sometimes this is painless and easy, and sometimes this is a nightmare (prompting a session of frantic googling on how to load obscure data types into R).</p>
<p>The first lines of code I write in <code>load.R</code> is as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># open zipped file for reading</span></span>
<span id="cb2-2">unz <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gzfile</span>(<span class="st" style="color: #20794D;">"data/atus_00002.csv.gz"</span>)</span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># load in the data</span></span>
<span id="cb2-4">time_use_orig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(unz)</span></code></pre></div>
</div>
<p>when I run it in the console, I am pleasantly surprised to find that it works without any issue.</p>
<p>I then take my first look at the data in the console using the <code>dim()</code> command to identify the dimension of the data and the <code>head()</code> command to view the first 6 rows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">dim</span>(time_use_orig)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 10493    64</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">head</span>(time_use_orig)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       CASEID YEAR NUMCONTACTS_CPS8  HRHHID_CPS8 HRHHID2_CPS8 STATEFIP HH_SIZE
1 2.01601e+13 2016                1 3.509403e+14         3011       13       3
2 2.01601e+13 2016                1 2.025055e+14         3011       51       2
3 2.01601e+13 2016                2 1.243705e+14         3111       11       4
4 2.01601e+13 2016                1 2.041305e+14         3011       26       4
5 2.01601e+13 2016                1 2.203965e+13         3011       29       2
6 2.01601e+13 2016                0 1.021017e+13         3011       12       5
  FAMINCOME HH_NUMKIDS HH_NUMADULTS PERNUM LINENO     WT06 AGE SEX RACE HISPAN
1         3          0            3      1      1 24588650  62   2  100    100
2         6          0            2      1      1  5445941  69   1  110    100
3         4          2            2      1      1  8782622  24   2  110    100
4         8          3            1      1      1  3035910  31   2  100    100
5        13          0            2      1      1  6978586  59   2  100    100
6         5          4            1      1      1  5191610  16   2  120    244
  ASIAN MARST AGE_CPS8 SEX_CPS8 EDUC EDUCYRS SCHLCOLL SCHLCOLL_CPS8 EMPSTAT
1   999     1       62        2   21     112       99            98       5
2   999     1       69        1   16     111       99            98       5
3   999     6       24        2   20     102        1             1       5
4   999     4       31        2   30     214        1             4       1
5   999     1       59        2   21     112       99            98       1
6   999     6       16        2   15     110        3             1       5
  OCC2   OCC IND2   IND FULLPART UHRSWORKT UHRSWORK1 UHRSWORK2 EARNWEEK
1 9999 99999 9999 99999       99      9999       999       999 99999.99
2 9999 99999 9999 99999       99      9999       999       999 99999.99
3 9999 99999 9999 99999       99      9999       999       999 99999.99
4  130  3600  251  8180        2        32        32       999   469.44
5  125  2540  240  7860        2        12         6         6   302.50
6 9999 99999 9999 99999       99      9999       999       999 99999.99
  PAIDHOUR EARNRPT HOURWAGE HRSATRATE OTUSUAL    OTPAY UHRSWORKT_CPS8
1       99      99   999.99       999      99 99999.99           9999
2       99      99   999.99       999      99 99999.99           9999
3       99      99   999.99       999      99 99999.99           9999
4        1       1    14.67        32       0 99999.99             40
5        1       3    17.00       999       0 99999.99             55
6       99      99   999.99       999      99 99999.99           9999
  UHRSWORK1_CPS8 UHRSWORK2_CPS8 HRSWORKT_CPS8 ACT_CAREHH ACT_CARENHH ACT_EDUC
1            999            999          9999          0           0        0
2            999            999          9999          0           0        0
3            999            999          9999          0           0        0
4             40            999            40         60           0        0
5             30             25            55          0           0        0
6            999            999          9999          0           0        0
  ACT_FOOD ACT_GOVSERV ACT_HHACT ACT_HHSERV ACT_PCARE ACT_PHONE ACT_PROFSERV
1       40           0       190          0       715         0            0
2       30           0       230          0       620         0            0
3       75           0       105          0      1060         0            0
4      165           0       395          0       655        45            0
5       30           0       250          0       580       120            0
6      120           0       100          0       620         0            0
  ACT_PURCH ACT_RELIG ACT_SOCIAL ACT_SPORTS ACT_TRAVEL ACT_VOL ACT_WORK
1         0         0        465          0         30       0        0
2         0         0        560          0          0       0        0
3        60         0         20          0         60       0        0
4         0         0        120          0          0       0        0
5        18        60        177          0         75     130        0
6         0         0        355         50         35       0        0
  ERS_ASSOC ERS_PRIM
1         0       40
2         0       30
3         0       75
4         0      165
5        15       30
6         0      120</code></pre>
</div>
</div>
<p>It is pretty clear that everything is coded numerically and the variable names are fairly meaningless to a human. Fortunately, the codebook explains all. I spend some time browsing it.</p>
<section id="the-loaddata-function" class="level2">
<h2 class="anchored" data-anchor-id="the-loaddata-function">The <code>loadData()</code> function</h2>
<p>To make things simple in the long-run, I turn the above commands into a reusable function called <code>loadData()</code>. This function will have only one argument that specifies the path of the data in the local directory (relative to the <code>load.R</code> file). I usually set the default path to be the actual path for my setup.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># a function to load in the data</span></span>
<span id="cb7-2">loadData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(<span class="at" style="color: #657422;">path_to_data =</span> <span class="st" style="color: #20794D;">"data/atus_00002.csv.gz"</span>) {</span>
<span id="cb7-3">  <span class="co" style="color: #5E5E5E;"># open zipped file for reading</span></span>
<span id="cb7-4">  unz <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gzfile</span>(path_to_data)</span>
<span id="cb7-5">  <span class="co" style="color: #5E5E5E;"># load in the data</span></span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;">read.csv</span>(unz)</span>
<span id="cb7-7">}</span></code></pre></div>
</div>
<p>To test my function, I simply run in my console by typing</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">time_use_orig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">loadData</span>()</span></code></pre></div>
</div>
<p>and look at the output of <code>head(time_use_orig)</code>.</p>
<p>Obviously such a function is a bit redundant in this setting: it is just as easy to write <code>read.csv(gzfile("data/atus_00002.csv.gz"))</code> in my eventual <code>eda.Rmd</code> file as it is to write <code>loadData("data/atus_00002.csv.gz")</code>. The reason I keep the <code>load.R</code> file in this case is because this is just my default workflow. I always load in my data using a function called <code>loadData</code>. In some situations, there are many, many things that need to be done in order to load the data, meaning that my <code>loadData</code> function can be fairly complicated. For example, sometimes column names need to be read in separately and then attached to the data, and sometimes I need to play with the format of the data to get R to play nice.</p>
</section>
</section>
<section id="cleaning-the-data-clean.r" class="level1">
<h1>Cleaning the data: <code>clean.R</code></h1>
<p>Next, I need to make some decisions about whether to keep the data in its raw, ugly form, or to spend some time making my life easier in the long-run by converting the column names to human-readable versions and converting the numeric codes for each variable to text descriptive characters or factors.</p>
<p>I also need to ensure that missing values are coded as <code>NA</code>s and that the class of each variable is what I would expect. For example, when I looked at the <code>head()</code> of the data above, I noticed that the <code>CASEID</code> variable is printed as a numeric in scientific notation, which is not ideal. IDs should probably be factors or characters (I go back and forth a lot on which I prefer)!</p>
<p>In <code>clean.R</code> I start work on a function called <code>cleanData()</code>. Like <code>loadData()</code>, the function <code>cleanData()</code> is always a part of my workflow.</p>
<p>When I eventually start the <code>eda.Rmd</code> file, I will load and clean the data like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># define the loadData() function</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;">source</span>(<span class="st" style="color: #20794D;">"load.R"</span>)</span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;"># define the cleanData() function</span></span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;">source</span>(<span class="st" style="color: #20794D;">"clean.R"</span>)</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;"># load the raw data</span></span>
<span id="cb9-7">time_use_orig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">loadData</span>(<span class="st" style="color: #20794D;">"data/atus_00002.csv.gz"</span>)</span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;"># clean the data</span></span>
<span id="cb9-9">time_use <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cleanData</span>(time_use_orig)</span></code></pre></div>
</div>
<section id="the-cleandata-function" class="level2">
<h2 class="anchored" data-anchor-id="the-cleandata-function">The <code>cleanData()</code> function</h2>
<p>The <code>cleanData()</code> function will actually call three separate functions, each performing a single task. These functions are</p>
<ul>
<li><p><code>renameColumns()</code>: an optional part of my workflow that changes the column names of each of my columns so that I can actually understand what they mean.</p></li>
<li><p><code>convertMissing()</code>: a function which converts missing values to <code>NA</code></p></li>
<li><p><code>convertClass</code>: a function which sets factor variables to factors, sets character variables to characters, etc</p></li>
</ul>
<section id="making-columns-human-readable-renamecolumns" class="level3">
<h3 class="anchored" data-anchor-id="making-columns-human-readable-renamecolumns">Making columns human-readable: <code>renameColumns()</code></h3>
<p>I hate reading column names that are all-caps, use ridiculous abbreviations and generally don’t adhere to my definition of “aesthetically pleasing”. Thus, whenever possible, I tend to convert my column names to human-readable versions. This is fairly tedious whenever the data has more than around 10 variables or so, but the process itself of renaming the variables is a very effective way of ensuring that you have a good idea of which variables are even in the data.</p>
<p>A word of caution: it is extremely important to check that you have correctly renamed the variables, since it is very easy to assign the wrong name to a variable, resulting in misleading conclusions.</p>
<p>Obviously this step is not practical if you have more than 100 or so variables (although I once did it with a dataset that had around 300 variables!). In addition, if I will at some point need to present the data to people who are very familiar with the original variable names, I won’t do any renaming either.</p>
<p>In this case, however, I have no particular allegiance to the original variable names and I want to make it as clear as possible (to myself, at least) what they mean.</p>
<p>To change the variable names, the <code>renameColumns()</code> function will leverage the <code>dplyr</code> function, <code>select()</code>. Note that I also drop a few variables at this stage that I decided weren’t interesting.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb10-2">renameColumns <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(data) {</span>
<span id="cb10-3">  data <span class="ot" style="color: #003B4F;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(<span class="at" style="color: #657422;">id =</span> CASEID,</span>
<span id="cb10-4">                          <span class="at" style="color: #657422;">year =</span> YEAR,</span>
<span id="cb10-5">                          <span class="co" style="color: #5E5E5E;"># number of attempted contacts</span></span>
<span id="cb10-6">                          <span class="at" style="color: #657422;">num_contacts =</span> NUMCONTACTS_CPS8,</span>
<span id="cb10-7">                          <span class="at" style="color: #657422;">state =</span> STATEFIP,</span>
<span id="cb10-8">                          <span class="at" style="color: #657422;">household_size =</span> HH_SIZE,</span>
<span id="cb10-9">                          <span class="at" style="color: #657422;">family_income =</span> FAMINCOME,</span>
<span id="cb10-10">                          <span class="at" style="color: #657422;">num_children =</span> HH_NUMKIDS,</span>
<span id="cb10-11">                          <span class="at" style="color: #657422;">num_adults =</span> HH_NUMADULTS,</span>
<span id="cb10-12">                          <span class="at" style="color: #657422;">age =</span> AGE,</span>
<span id="cb10-13">                          <span class="at" style="color: #657422;">sex =</span> SEX,</span>
<span id="cb10-14">                          <span class="at" style="color: #657422;">race =</span> RACE,</span>
<span id="cb10-15">                          <span class="at" style="color: #657422;">marital_status =</span> MARST,</span>
<span id="cb10-16">                          <span class="at" style="color: #657422;">education_level =</span> EDUC,</span>
<span id="cb10-17">                          <span class="at" style="color: #657422;">education_years =</span> EDUCYRS,</span>
<span id="cb10-18">                          <span class="at" style="color: #657422;">employment_status =</span> EMPSTAT,</span>
<span id="cb10-19">                          <span class="at" style="color: #657422;">occupation_category =</span> OCC2,</span>
<span id="cb10-20">                          <span class="at" style="color: #657422;">occupation_industry =</span> IND2,</span>
<span id="cb10-21">                          <span class="at" style="color: #657422;">employed_full_time =</span> FULLPART,</span>
<span id="cb10-22">                          <span class="at" style="color: #657422;">hours_usually_worked =</span> UHRSWORKT,</span>
<span id="cb10-23">                          <span class="at" style="color: #657422;">weekly_earning =</span> EARNWEEK,</span>
<span id="cb10-24">                          <span class="at" style="color: #657422;">paid_hourly =</span> PAIDHOUR,</span>
<span id="cb10-25">                          <span class="at" style="color: #657422;">hourly_wage =</span> HOURWAGE,</span>
<span id="cb10-26">                          <span class="at" style="color: #657422;">hours_worked_hourly_rate =</span> HRSATRATE,</span>
<span id="cb10-27">                          <span class="at" style="color: #657422;">time_spent_caring_household =</span> ACT_CAREHH,</span>
<span id="cb10-28">                          <span class="at" style="color: #657422;">time_spent_caring_non_household =</span> ACT_CARENHH,</span>
<span id="cb10-29">                          <span class="at" style="color: #657422;">time_spent_education =</span> ACT_EDUC,</span>
<span id="cb10-30">                          <span class="at" style="color: #657422;">time_spent_eating =</span> ACT_FOOD,</span>
<span id="cb10-31">                          <span class="at" style="color: #657422;">time_spent_gov =</span> ACT_GOVSERV,</span>
<span id="cb10-32">                          <span class="at" style="color: #657422;">time_spent_household_activities =</span> ACT_HHACT,</span>
<span id="cb10-33">                          <span class="at" style="color: #657422;">time_spent_household_services =</span> ACT_HHSERV,</span>
<span id="cb10-34">                          <span class="at" style="color: #657422;">time_spent_personal_care =</span> ACT_PCARE,</span>
<span id="cb10-35">                          <span class="at" style="color: #657422;">time_spent_phone =</span> ACT_PHONE,</span>
<span id="cb10-36">                          <span class="at" style="color: #657422;">time_spent_personal_care_services =</span> ACT_PROFSERV,</span>
<span id="cb10-37">                          <span class="at" style="color: #657422;">time_spent_shopping =</span> ACT_PURCH,</span>
<span id="cb10-38">                          <span class="at" style="color: #657422;">time_spent_religion =</span> ACT_RELIG,</span>
<span id="cb10-39">                          <span class="at" style="color: #657422;">time_spent_leisure =</span> ACT_SOCIAL,</span>
<span id="cb10-40">                          <span class="at" style="color: #657422;">time_spent_sports =</span> ACT_SPORTS,</span>
<span id="cb10-41">                          <span class="at" style="color: #657422;">time_spent_travelling =</span> ACT_TRAVEL,</span>
<span id="cb10-42">                          <span class="at" style="color: #657422;">time_spent_volunteer =</span> ACT_VOL,</span>
<span id="cb10-43">                          <span class="at" style="color: #657422;">time_spent_working =</span> ACT_WORK)</span>
<span id="cb10-44">  <span class="fu" style="color: #4758AB;">return</span>(data)</span>
<span id="cb10-45">}</span></code></pre></div>
</div>
<p>I then test the function out by writing</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">time_use <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renameColumns</span>(time_use_orig)</span></code></pre></div>
</div>
<p>in the console, and looking at the output of <code>head(time_use)</code>.</p>
<p>Now, I am fully aware that this function I have just written is not generalizable to alternate subsets of the data variables. This will be one of only two places where I will need to change things if I want to re-run the analysis on a different subset of variables (the second place will be when I explicitly convert numeric variables to their character counterparts). I’m facing a trade-off between generalizability of my pipeline and having human-readable data. If I were intending to repeat this analysis on different variables, I would either remove the part of the workflow where I rename the variables (as well as the part where I convert numeric variables to meaningful factors later on), or I would set the variable names as an argument in the <code>renameColumns()</code> function (but sadly, <code>select()</code> doesn’t play very nicely with variables read in as character strings, so I try to avoid this).</p>
</section>
<section id="recoding-missing-values-as-na-convertmissing" class="level3">
<h3 class="anchored" data-anchor-id="recoding-missing-values-as-na-convertmissing">Recoding missing values as <code>NA</code>: <code>convertMissing()</code></h3>
<p>If you took a look at the codebook, you will have noticed that there are many different ways to say that data is missing. This can be very problematic.</p>
<p>The most common way to code missingness in this data is to code it as <code>99</code> <code>999</code>, <code>9999</code>, etc (depending on whether the entries for the variable are two, three, four or more digit numbers, respectively). These entries are referred to in the codebook as <code>NIU (Not in universe)</code>. Other types of missing values are recorded such as <code>996</code> corresponding to <code>Refused</code>, <code>997</code> corresponding to <code>Don't know</code> and <code>998</code> corresponding to <code>Blank</code>.</p>
<p>I now need to decide what to convert to <code>NA</code>, keeping in mind that I need to be particularly careful for the variables with many different types of missingness (such as people who refused to answer, didn’t know or simply left the entry blank). I decide to take a look to see how widespread these types of missingness are by running the following code in the console:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># identify how many times informative missingness occurs for each variable</span></span>
<span id="cb12-2">informative_missing <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sapply</span>(time_use, </span>
<span id="cb12-3">                              <span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">sum</span>(x <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">996</span>, <span class="dv" style="color: #AD0000;">997</span>, <span class="dv" style="color: #AD0000;">998</span>)))</span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;"># print out only the non-zero values</span></span>
<span id="cb12-5">informative_missing[informative_missing <span class="sc" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          weekly_earning hours_worked_hourly_rate time_spent_personal_care 
                       1                       12                        1 
      time_spent_leisure       time_spent_working 
                       1                        1 </code></pre>
</div>
</div>
<p>Since these types of missingness are extremely rare, I decide to simply lump them in with all of the other <code>NA</code> values.</p>
<p>Next, I want to identify which variables have missing values coded as a varying number of 9s. Since the missing values are always supposed to correspond to the maximum, I printed out the maximum of each variable.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># print out the maximum of each column</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;">sapply</span>(time_use, max)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                               id                              year 
                     2.016121e+13                      2.016000e+03 
                     num_contacts                             state 
                     8.000000e+00                      5.600000e+01 
                   household_size                     family_income 
                     1.300000e+01                      1.600000e+01 
                     num_children                        num_adults 
                     9.000000e+00                      8.000000e+00 
                              age                               sex 
                     8.500000e+01                      2.000000e+00 
                             race                    marital_status 
                     4.000000e+02                      6.000000e+00 
                  education_level                   education_years 
                     4.300000e+01                      3.210000e+02 
                employment_status               occupation_category 
                     5.000000e+00                      9.999000e+03 
              occupation_industry                employed_full_time 
                     9.999000e+03                      9.900000e+01 
             hours_usually_worked                    weekly_earning 
                     9.999000e+03                      9.999999e+04 
                      paid_hourly                       hourly_wage 
                     9.900000e+01                      9.999900e+02 
         hours_worked_hourly_rate       time_spent_caring_household 
                     9.990000e+02                      8.800000e+02 
  time_spent_caring_non_household              time_spent_education 
                     9.100000e+02                      1.000000e+03 
                time_spent_eating                    time_spent_gov 
                     6.350000e+02                      4.700000e+02 
  time_spent_household_activities     time_spent_household_services 
                     1.184000e+03                      4.500000e+02 
         time_spent_personal_care                  time_spent_phone 
                     1.434000e+03                      4.200000e+02 
time_spent_personal_care_services               time_spent_shopping 
                     5.250000e+02                      6.000000e+02 
              time_spent_religion                time_spent_leisure 
                     7.130000e+02                      1.392000e+03 
                time_spent_sports             time_spent_travelling 
                     1.260000e+03                      1.265000e+03 
             time_spent_volunteer                time_spent_working 
                     9.200000e+02                      1.350000e+03 </code></pre>
</div>
</div>
<p>I notice here that there are several variables with missing values as their maxima such as <code>occupation_industry</code> with a maximum of <code>9999</code>, and <code>hourly_wage</code> with a maximum of <code>999.99</code>. Since I don’t really want to manually convert these missing values to <code>NA</code>, I decide to automate it using the <code>mutate_if()</code> function from the <code>dplyr</code> package. First I write a few helper functions in the <code>clean.R</code> file for calculating the maximum of a vector and for identifying specific values in a vector.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Helper function for identifying missing values equal to 99, 999, etc</span></span>
<span id="cb16-2">equalFun <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, value) {</span>
<span id="cb16-3">  x <span class="sc" style="color: #5E5E5E;">==</span> value</span>
<span id="cb16-4">}</span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;"># Helper function for identifying if the max of a variable is equal to 99, ...</span></span>
<span id="cb16-7">maxFun <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, value) {</span>
<span id="cb16-8">  <span class="fu" style="color: #4758AB;">max</span>(x, <span class="at" style="color: #657422;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;">==</span> value</span>
<span id="cb16-9">}</span></code></pre></div>
</div>
<p>The first argument of <code>mutate_if()</code> is a function which returns a Boolean value specifying which columns to select. The second argument is wrapped in <code>funs()</code> and itself is a function which specifies what to do to each column. <code>if_else(equalFun(., 99), NA_integer_, .)</code> can be read aloud as “If the value is equal to 99, convert it to a <code>NA</code> of integer type, otherwise do nothing” (the <code>.</code> serves as a placeholder for the data, like <code>x</code> in <code>function(x)</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">convertMissing <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(data) {</span>
<span id="cb17-2">  <span class="co" style="color: #5E5E5E;"># convert missing values to NA</span></span>
<span id="cb17-3">  data <span class="ot" style="color: #003B4F;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-4">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 99 to NA</span></span>
<span id="cb17-5">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="dv" style="color: #AD0000;">99</span>), </span>
<span id="cb17-6">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="dv" style="color: #AD0000;">99</span>), <span class="cn" style="color: #8f5902;">NA_integer_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-7">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 999 to NA</span></span>
<span id="cb17-8">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="dv" style="color: #AD0000;">999</span>), </span>
<span id="cb17-9">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="dv" style="color: #AD0000;">999</span>), <span class="cn" style="color: #8f5902;">NA_integer_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-10">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 9999 to NA</span></span>
<span id="cb17-11">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="dv" style="color: #AD0000;">9999</span>), </span>
<span id="cb17-12">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="dv" style="color: #AD0000;">9999</span>), <span class="cn" style="color: #8f5902;">NA_integer_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-13">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 999.99 to NA</span></span>
<span id="cb17-14">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="fl" style="color: #AD0000;">999.99</span>), </span>
<span id="cb17-15">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="fl" style="color: #AD0000;">999.99</span>), <span class="cn" style="color: #8f5902;">NA_real_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-16">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 99999.99 to NA</span></span>
<span id="cb17-17">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="fl" style="color: #AD0000;">99999.99</span>), </span>
<span id="cb17-18">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="fl" style="color: #AD0000;">99999.99</span>), <span class="cn" style="color: #8f5902;">NA_real_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-19">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 998 to NA</span></span>
<span id="cb17-20">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="dv" style="color: #AD0000;">998</span>), </span>
<span id="cb17-21">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="dv" style="color: #AD0000;">998</span>), <span class="cn" style="color: #8f5902;">NA_integer_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-22">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 997 to NA</span></span>
<span id="cb17-23">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="dv" style="color: #AD0000;">997</span>), </span>
<span id="cb17-24">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="dv" style="color: #AD0000;">997</span>), <span class="cn" style="color: #8f5902;">NA_integer_</span>, .)))</span>
<span id="cb17-25">  <span class="fu" style="color: #4758AB;">return</span>(data)    </span>
<span id="cb17-26">}</span></code></pre></div>
</div>
<p>It took some playing around with running the body of the function in the console (with <code>data</code> defined as <code>time_use</code>) to get it to run without errors (I was getting errors to do with <code>NA</code> values and realized that I needed to add <code>na.rm = T</code> in the <code>maxFun()</code> function).</p>
<p>Once the body runs in the console, I then check to make sure that the complete function worked as expected by running it in the console and checking out the summary of the output.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># convert the missing values to NAs</span></span>
<span id="cb18-2">time_use <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">convertMissing</span>(time_use)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `funs()` was deprecated in dplyr 0.8.0.
ℹ Please use a list of either functions or lambdas:

# Simple named list: list(mean = mean, median = median)

# Auto named with `tibble::lst()`: tibble::lst(mean, median)

# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `funs()` was deprecated in dplyr 0.8.0.
ℹ Please use a list of either functions or lambdas:

# Simple named list: list(mean = mean, median = median)

# Auto named with `tibble::lst()`: tibble::lst(mean, median)

# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `funs()` was deprecated in dplyr 0.8.0.
ℹ Please use a list of either functions or lambdas:

# Simple named list: list(mean = mean, median = median)

# Auto named with `tibble::lst()`: tibble::lst(mean, median)

# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `funs()` was deprecated in dplyr 0.8.0.
ℹ Please use a list of either functions or lambdas:

# Simple named list: list(mean = mean, median = median)

# Auto named with `tibble::lst()`: tibble::lst(mean, median)

# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `funs()` was deprecated in dplyr 0.8.0.
ℹ Please use a list of either functions or lambdas:

# Simple named list: list(mean = mean, median = median)

# Auto named with `tibble::lst()`: tibble::lst(mean, median)

# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `funs()` was deprecated in dplyr 0.8.0.
ℹ Please use a list of either functions or lambdas:

# Simple named list: list(mean = mean, median = median)

# Auto named with `tibble::lst()`: tibble::lst(mean, median)

# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `funs()` was deprecated in dplyr 0.8.0.
ℹ Please use a list of either functions or lambdas:

# Simple named list: list(mean = mean, median = median)

# Auto named with `tibble::lst()`: tibble::lst(mean, median)

# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># check out the summary</span></span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;">summary</span>(time_use)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       id                 year       num_contacts        state      
 Min.   :2.016e+13   Min.   :2016   Min.   :0.0000   Min.   : 1.00  
 1st Qu.:2.016e+13   1st Qu.:2016   1st Qu.:0.0000   1st Qu.:13.00  
 Median :2.016e+13   Median :2016   Median :0.0000   Median :27.00  
 Mean   :2.016e+13   Mean   :2016   Mean   :0.2574   Mean   :27.96  
 3rd Qu.:2.016e+13   3rd Qu.:2016   3rd Qu.:0.0000   3rd Qu.:42.00  
 Max.   :2.016e+13   Max.   :2016   Max.   :8.0000   Max.   :56.00  
                                                                    
 household_size   family_income    num_children      num_adults   
 Min.   : 1.000   Min.   : 1.00   Min.   :0.0000   Min.   :1.000  
 1st Qu.: 1.000   1st Qu.: 8.00   1st Qu.:0.0000   1st Qu.:1.000  
 Median : 2.000   Median :12.00   Median :0.0000   Median :2.000  
 Mean   : 2.657   Mean   :10.85   Mean   :0.7706   Mean   :1.868  
 3rd Qu.: 4.000   3rd Qu.:14.00   3rd Qu.:1.0000   3rd Qu.:2.000  
 Max.   :13.000   Max.   :16.00   Max.   :9.0000   Max.   :8.000  
                                                                  
      age             sex             race       marital_status 
 Min.   :15.00   Min.   :1.000   Min.   :100.0   Min.   :1.000  
 1st Qu.:35.00   1st Qu.:1.000   1st Qu.:100.0   1st Qu.:1.000  
 Median :49.00   Median :2.000   Median :100.0   Median :3.000  
 Mean   :49.42   Mean   :1.555   Mean   :104.5   Mean   :3.022  
 3rd Qu.:64.00   3rd Qu.:2.000   3rd Qu.:100.0   3rd Qu.:6.000  
 Max.   :85.00   Max.   :2.000   Max.   :400.0   Max.   :6.000  
                                                                
 education_level education_years employment_status occupation_category
 Min.   :10.00   Min.   :101.0   Min.   :1.000     Min.   :110.0      
 1st Qu.:21.00   1st Qu.:112.0   1st Qu.:1.000     1st Qu.:122.0      
 Median :30.00   Median :214.0   Median :1.000     Median :131.0      
 Mean   :29.74   Mean   :187.8   Mean   :2.559     Mean   :138.1      
 3rd Qu.:40.00   3rd Qu.:217.0   3rd Qu.:5.000     3rd Qu.:150.0      
 Max.   :43.00   Max.   :321.0   Max.   :5.000     Max.   :200.0      
                                                   NA's   :4119       
 occupation_industry employed_full_time hours_usually_worked weekly_earning  
 Min.   :100.0       Min.   :1.000      Min.   :   0.0       Min.   :   0.0  
 1st Qu.:160.0       1st Qu.:1.000      1st Qu.:  38.0       1st Qu.: 458.8  
 Median :220.0       Median :1.000      Median :  40.0       Median : 800.0  
 Mean   :210.4       Mean   :1.219      Mean   : 672.6       Mean   : 994.0  
 3rd Qu.:251.0       3rd Qu.:1.000      3rd Qu.:  50.0       3rd Qu.:1346.2  
 Max.   :300.0       Max.   :2.000      Max.   :9995.0       Max.   :2884.6  
 NA's   :4119        NA's   :4119       NA's   :4119         NA's   :4833    
  paid_hourly     hourly_wage    hours_worked_hourly_rate
 Min.   :1.000   Min.   : 0.00   Min.   : 1.00           
 1st Qu.:1.000   1st Qu.:10.50   1st Qu.:28.00           
 Median :1.000   Median :15.00   Median :40.00           
 Mean   :1.444   Mean   :18.34   Mean   :33.86           
 3rd Qu.:2.000   3rd Qu.:22.00   3rd Qu.:40.00           
 Max.   :2.000   Max.   :99.99   Max.   :90.00           
 NA's   :4833    NA's   :7348    NA's   :8438            
 time_spent_caring_household time_spent_caring_non_household
 Min.   :  0.00              Min.   :  0.000                
 1st Qu.:  0.00              1st Qu.:  0.000                
 Median :  0.00              Median :  0.000                
 Mean   : 31.85              Mean   :  8.603                
 3rd Qu.: 11.00              3rd Qu.:  0.000                
 Max.   :880.00              Max.   :910.000                
                                                            
 time_spent_education time_spent_eating time_spent_gov    
 Min.   :   0.00      Min.   :  0.00    Min.   :  0.0000  
 1st Qu.:   0.00      1st Qu.: 30.00    1st Qu.:  0.0000  
 Median :   0.00      Median : 60.00    Median :  0.0000  
 Mean   :  15.39      Mean   : 64.99    Mean   :  0.3647  
 3rd Qu.:   0.00      3rd Qu.: 90.00    3rd Qu.:  0.0000  
 Max.   :1000.00      Max.   :635.00    Max.   :470.0000  
                                                          
 time_spent_household_activities time_spent_household_services
 Min.   :   0.0                  Min.   :  0.0000             
 1st Qu.:  15.0                  1st Qu.:  0.0000             
 Median :  75.0                  Median :  0.0000             
 Mean   : 121.1                  Mean   :  0.9868             
 3rd Qu.: 180.0                  3rd Qu.:  0.0000             
 Max.   :1184.0                  Max.   :450.0000             
                                                              
 time_spent_personal_care time_spent_phone  time_spent_personal_care_services
 Min.   :   0.0           Min.   :  0.000   Min.   :  0.000                  
 1st Qu.: 495.0           1st Qu.:  0.000   1st Qu.:  0.000                  
 Median : 570.0           Median :  0.000   Median :  0.000                  
 Mean   : 580.3           Mean   :  6.774   Mean   :  4.747                  
 3rd Qu.: 660.0           3rd Qu.:  0.000   3rd Qu.:  0.000                  
 Max.   :1434.0           Max.   :420.000   Max.   :525.000                  
                                                                             
 time_spent_shopping time_spent_religion time_spent_leisure time_spent_sports
 Min.   :  0.00      Min.   :  0.0       Min.   :   0.0     Min.   :   0.00  
 1st Qu.:  0.00      1st Qu.:  0.0       1st Qu.: 130.0     1st Qu.:   0.00  
 Median :  0.00      Median :  0.0       Median : 260.0     Median :   0.00  
 Mean   : 24.15      Mean   : 13.4       Mean   : 298.4     Mean   :  20.22  
 3rd Qu.: 30.00      3rd Qu.:  0.0       3rd Qu.: 432.0     3rd Qu.:   0.00  
 Max.   :600.00      Max.   :713.0       Max.   :1392.0     Max.   :1260.00  
                                                                             
 time_spent_travelling time_spent_volunteer time_spent_working
 Min.   :   0.0        Min.   :  0.000      Min.   :   0.0    
 1st Qu.:  20.0        1st Qu.:  0.000      1st Qu.:   0.0    
 Median :  55.0        Median :  0.000      Median :   0.0    
 Mean   :  71.5        Mean   :  8.469      Mean   : 157.7    
 3rd Qu.:  95.0        3rd Qu.:  0.000      3rd Qu.: 375.0    
 Max.   :1265.0        Max.   :920.000      Max.   :1350.0    
                                                              </code></pre>
</div>
</div>
<p>Scrolling through the summary, I notice a few peculiarities. In particular, there are several variables that have stupidly large values. For example the maximum value for <code>hours_usually_worked</code> is <code>9995</code> (this didn’t appear in the codebook!). I decided to look at a histogram of this variable to see how typical this value is. I ran the following code in the console:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb28-2"><span class="fu" style="color: #4758AB;">ggplot</span>(time_use) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> hours_usually_worked))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Removed 4119 rows containing non-finite values (`stat_bin()`).</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-08-16-data-science-workflow_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>From the histogram, it is fairly clear that there is an additional type of missing value (405 samples have a value of <code>9995</code>) that was not mentioned in the documentation. I then go back and update my <code>convertMissing()</code> function to include this extra missing value.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">convertMissing <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(data) {</span>
<span id="cb31-2">  <span class="co" style="color: #5E5E5E;"># convert missing values to NA</span></span>
<span id="cb31-3">  data <span class="ot" style="color: #003B4F;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb31-4">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 99 to NA</span></span>
<span id="cb31-5">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="dv" style="color: #AD0000;">99</span>), </span>
<span id="cb31-6">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="dv" style="color: #AD0000;">99</span>), <span class="cn" style="color: #8f5902;">NA_integer_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb31-7">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 999 to NA</span></span>
<span id="cb31-8">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="dv" style="color: #AD0000;">999</span>), </span>
<span id="cb31-9">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="dv" style="color: #AD0000;">999</span>), <span class="cn" style="color: #8f5902;">NA_integer_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb31-10">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 9999 to NA</span></span>
<span id="cb31-11">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="dv" style="color: #AD0000;">9999</span>), </span>
<span id="cb31-12">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="dv" style="color: #AD0000;">9999</span>), <span class="cn" style="color: #8f5902;">NA_integer_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb31-13">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 999.99 to NA</span></span>
<span id="cb31-14">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="fl" style="color: #AD0000;">999.99</span>), </span>
<span id="cb31-15">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="fl" style="color: #AD0000;">999.99</span>), <span class="cn" style="color: #8f5902;">NA_real_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb31-16">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 99999.99 to NA</span></span>
<span id="cb31-17">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="fl" style="color: #AD0000;">99999.99</span>), </span>
<span id="cb31-18">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="fl" style="color: #AD0000;">99999.99</span>), <span class="cn" style="color: #8f5902;">NA_real_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb31-19">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 998 to NA</span></span>
<span id="cb31-20">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="dv" style="color: #AD0000;">998</span>), </span>
<span id="cb31-21">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="dv" style="color: #AD0000;">998</span>), <span class="cn" style="color: #8f5902;">NA_integer_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb31-22">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 997 to NA</span></span>
<span id="cb31-23">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="dv" style="color: #AD0000;">997</span>), </span>
<span id="cb31-24">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="dv" style="color: #AD0000;">997</span>), <span class="cn" style="color: #8f5902;">NA_integer_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb31-25">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 9995 to NA</span></span>
<span id="cb31-26">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="dv" style="color: #AD0000;">9995</span>), </span>
<span id="cb31-27">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="dv" style="color: #AD0000;">9995</span>), <span class="cn" style="color: #8f5902;">NA_integer_</span>, .))) </span>
<span id="cb31-28">  <span class="fu" style="color: #4758AB;">return</span>(data)    </span>
<span id="cb31-29">}</span></code></pre></div>
</div>
<p>Next, I ran the <code>convertMissing()</code> function again the data and re-made the histogram to make sure that everything was going smoothly.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;"># re-run the renameColumns() function</span></span>
<span id="cb32-2">time_use <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renameColumns</span>(time_use_orig)</span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;"># convert missing values to NA</span></span>
<span id="cb32-4">time_use <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">convertMissing</span>(time_use)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `funs()` was deprecated in dplyr 0.8.0.
ℹ Please use a list of either functions or lambdas:

# Simple named list: list(mean = mean, median = median)

# Auto named with `tibble::lst()`: tibble::lst(mean, median)

# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `funs()` was deprecated in dplyr 0.8.0.
ℹ Please use a list of either functions or lambdas:

# Simple named list: list(mean = mean, median = median)

# Auto named with `tibble::lst()`: tibble::lst(mean, median)

# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `funs()` was deprecated in dplyr 0.8.0.
ℹ Please use a list of either functions or lambdas:

# Simple named list: list(mean = mean, median = median)

# Auto named with `tibble::lst()`: tibble::lst(mean, median)

# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `funs()` was deprecated in dplyr 0.8.0.
ℹ Please use a list of either functions or lambdas:

# Simple named list: list(mean = mean, median = median)

# Auto named with `tibble::lst()`: tibble::lst(mean, median)

# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `funs()` was deprecated in dplyr 0.8.0.
ℹ Please use a list of either functions or lambdas:

# Simple named list: list(mean = mean, median = median)

# Auto named with `tibble::lst()`: tibble::lst(mean, median)

# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `funs()` was deprecated in dplyr 0.8.0.
ℹ Please use a list of either functions or lambdas:

# Simple named list: list(mean = mean, median = median)

# Auto named with `tibble::lst()`: tibble::lst(mean, median)

# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `funs()` was deprecated in dplyr 0.8.0.
ℹ Please use a list of either functions or lambdas:

# Simple named list: list(mean = mean, median = median)

# Auto named with `tibble::lst()`: tibble::lst(mean, median)

# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: `funs()` was deprecated in dplyr 0.8.0.
ℹ Please use a list of either functions or lambdas:

# Simple named list: list(mean = mean, median = median)

# Auto named with `tibble::lst()`: tibble::lst(mean, median)

# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))</code></pre>
</div>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="co" style="color: #5E5E5E;"># re-make the histogram</span></span>
<span id="cb41-2"><span class="fu" style="color: #4758AB;">ggplot</span>(time_use) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> hours_usually_worked))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Removed 4524 rows containing non-finite values (`stat_bin()`).</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-08-16-data-science-workflow_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>Now that that was sorted out, it occurred to me that I wasn’t sure what kind of scale the <code>time_spent</code> variables were on (is it hours spent in the last week? In the last month? The last year? Perhaps it is minutes spent over the last day? It probably should have occurred to me to ask this earlier, but it didn’t. Whatever… I’m asking it now! After spending some time perusing the internet for a while, I found <a href="https://www.bls.gov/news.release/atus.t01.htm">this table</a> which summarised the average hours spend <em>per day</em> on a range of activities. For example, it said that on average, people spend 9.58 hours per day on “personal care activities”. The histogram below shows the distribution of values for the <code>time_spent_personal_care</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;">ggplot</span>(time_use) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> time_spent_personal_care))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/2017-08-16-data-science-workflow_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>The mean value in the data is 580, which when divided by 60 gives 9.6. From this “evidence” I conclude that what the data contains is the <strong>number of minutes spent per day</strong>. Whether this is averaged over a week, or is based on one particular day, I honestly don’t know. But for my purposes, I’ll just take each value as the number of minutes spent on the activity on a “typical” day.</p>
</section>
<section id="ensuring-each-variable-has-the-correct-class-convertclass" class="level3">
<h3 class="anchored" data-anchor-id="ensuring-each-variable-has-the-correct-class-convertclass">Ensuring each variable has the correct class: <code>convertClass()</code></h3>
<p>The final cleaning task involves converting categorical values to have a categorical variable class (such as a factor), and other things along these lines involving variable classes.</p>
<p>Recall that the person ID variable, <code>CASEID</code>, is currently coded as a numeric (which is printed in scientific notation). In general, it is good practice to code IDs as factors (or characters).</p>
<p>There are also many other variables that should be coded as factors: state, sex, race, marital_status, education_level, family_income, employment_status, occupation_category, and occupation_industry.</p>
<p>Now begins the part of my cleaning process that often takes the longest: I am going to convert each of these numeric variables not only to factors, but to <em>meaningful</em> factors. I don’t want to make plots for genders 1 and 2, or for states 42 and 28; I want to make plots for males and females and for states Pennsylvania and Mississippi.</p>
<p>First, for each variable I need to define a data frame that stores the conversion from number to meaningful category. Fortunately, this information was found in the codebook, and I can copy and paste these code conversions into separate .txt files and save them in the <code>data/</code> folder: <code>states.txt</code>, <code>occupation_industry.txt</code>, <code>occupation_category.txt</code>, etc. I can then read them into R as tab-delimited text files.</p>
<p>In case you’re interested, after copying the subsets of the codebook, my project directory now looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">data<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb46-2">  atus_00002.csv.gz</span>
<span id="cb46-3">  atus_00002.txt</span>
<span id="cb46-4">  education_level.txt</span>
<span id="cb46-5">  employment_status.txt</span>
<span id="cb46-6">  family_income.txt</span>
<span id="cb46-7">  marital_status.txt</span>
<span id="cb46-8">  occupation_category.txt</span>
<span id="cb46-9">  occupation_industry.txt</span>
<span id="cb46-10">  race.txt</span>
<span id="cb46-11">  sex.txt</span>
<span id="cb46-12">  state.txt</span>
<span id="cb46-13">R<span class="sc" style="color: #5E5E5E;">/</span></span>
<span id="cb46-14">  clean.R</span>
<span id="cb46-15">  load.R</span></code></pre></div>
</div>
<p>I now start work on a <code>convertClass()</code> function which will be the third component of my <code>cleanData()</code> function. The first thing I do in <code>convertClass()</code> is convert the <code>id</code> variable to a factor. I then loop through each of the other factor variables to read in the code conversions from the .txt files, join the meaningful factors onto the original data frame using <code>left_join()</code> and remove the numeric version of the variable. The function that I wrote is presented below. I spent a while playing around in the console with various versions of the function below (always running code from the .R file rather than typing directly in the console itself).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">convertClass <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(data, <span class="at" style="color: #657422;">path_to_codes =</span> <span class="st" style="color: #20794D;">"data/"</span>) {</span>
<span id="cb47-2">  <span class="co" style="color: #5E5E5E;"># convert id to a factor</span></span>
<span id="cb47-3">  data <span class="ot" style="color: #003B4F;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">as.factor</span>(id))</span>
<span id="cb47-4">  <span class="co" style="color: #5E5E5E;"># loop through each of the factor variables and convert to meaningful</span></span>
<span id="cb47-5">  <span class="co" style="color: #5E5E5E;"># factor then add to data frame</span></span>
<span id="cb47-6">  <span class="cf" style="color: #003B4F;">for</span> (variable <span class="cf" style="color: #003B4F;">in</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"state"</span>, <span class="st" style="color: #20794D;">"occupation_industry"</span>, <span class="st" style="color: #20794D;">"occupation_category"</span>,</span>
<span id="cb47-7">                       <span class="st" style="color: #20794D;">"education_level"</span>, <span class="st" style="color: #20794D;">"race"</span>, <span class="st" style="color: #20794D;">"marital_status"</span>, <span class="st" style="color: #20794D;">"sex"</span>,</span>
<span id="cb47-8">                       <span class="st" style="color: #20794D;">"employment_status"</span>, <span class="st" style="color: #20794D;">"family_income"</span>)) {</span>
<span id="cb47-9">    <span class="co" style="color: #5E5E5E;"># identify the path to the code file</span></span>
<span id="cb47-10">    path <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(path_to_codes, variable, <span class="st" style="color: #20794D;">".txt"</span>)</span>
<span id="cb47-11">    <span class="co" style="color: #5E5E5E;"># read in the code file</span></span>
<span id="cb47-12">    codes <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.table</span>(path, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\t</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb47-13">    <span class="co" style="color: #5E5E5E;"># remove the second column (the entries are separated by two \t's)</span></span>
<span id="cb47-14">    codes <span class="ot" style="color: #003B4F;">&lt;-</span> codes[, <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb47-15">    <span class="co" style="color: #5E5E5E;"># convert the column names</span></span>
<span id="cb47-16">    <span class="fu" style="color: #4758AB;">colnames</span>(codes) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(variable, <span class="fu" style="color: #4758AB;">paste0</span>(variable, <span class="st" style="color: #20794D;">"_name"</span>))</span>
<span id="cb47-17">    <span class="co" style="color: #5E5E5E;"># add the code to the original data frame</span></span>
<span id="cb47-18">    data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">left_join</span>(data, codes, <span class="at" style="color: #657422;">by =</span> variable)</span>
<span id="cb47-19">    <span class="co" style="color: #5E5E5E;"># remove old variable and replace with new variable</span></span>
<span id="cb47-20">    data[, variable] <span class="ot" style="color: #003B4F;">&lt;-</span> data[, <span class="fu" style="color: #4758AB;">paste0</span>(variable, <span class="st" style="color: #20794D;">"_name"</span>)]</span>
<span id="cb47-21">    data <span class="ot" style="color: #003B4F;">&lt;-</span> data[, <span class="sc" style="color: #5E5E5E;">!</span>(<span class="fu" style="color: #4758AB;">colnames</span>(data) <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">paste0</span>(variable, <span class="st" style="color: #20794D;">"_name"</span>))]</span>
<span id="cb47-22">  }</span>
<span id="cb47-23">  <span class="fu" style="color: #4758AB;">return</span>(data)</span>
<span id="cb47-24">}</span></code></pre></div>
</div>
<p>After I was done, I tested out that the <code>convertClass()</code> did what I hoped by running the following code in the console:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="co" style="color: #5E5E5E;"># run the convertClass() function</span></span>
<span id="cb48-2">time_use <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">convertClass</span>(time_use)</span>
<span id="cb48-3"><span class="co" style="color: #5E5E5E;"># compare the original variables with the meaningful versions</span></span>
<span id="cb48-4"><span class="fu" style="color: #4758AB;">head</span>(time_use)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              id year num_contacts                state household_size
1 20160101160045 2016            1              Georgia              3
2 20160101160066 2016            1             Virginia              2
3 20160101160069 2016            2 District of Columbia              4
4 20160101160083 2016            1             Michigan              4
5 20160101160084 2016            1             Missouri              2
6 20160101160094 2016            0              Florida              5
       family_income num_children num_adults age    sex
1   $7,500 to $9,999            0          3  62 Female
2 $15,000 to $19,999            0          2  69   Male
3 $10,000 to $12,499            2          2  24 Female
4 $25,000 to $29,999            3          1  31 Female
5 $60,000 to $74,999            0          2  59 Female
6 $12,500 to $14,999            4          1  16 Female
                             race           marital_status
1                      White only Married - spouse present
2                      Black only Married - spouse present
3                      Black only            Never married
4                      White only                 Divorced
5                      White only Married - spouse present
6 American Indian, Alaskan Native            Never married
                 education_level education_years employment_status
1 High school graduate (diploma)             112              &lt;NA&gt;
2                     11th grade             111              &lt;NA&gt;
3     High school graduate (GED)             102              &lt;NA&gt;
4     Some college but no degree             214         Full time
5 High school graduate (diploma)             112         Full time
6                     10th grade             110              &lt;NA&gt;
                           occupation_category
1                                         &lt;NA&gt;
2                                         &lt;NA&gt;
3                                         &lt;NA&gt;
4               Healthcare support occupations
5 Education, training, and library occupations
6                                         &lt;NA&gt;
                     occupation_industry employed_full_time
1                                   &lt;NA&gt;                 NA
2                                   &lt;NA&gt;                 NA
3                                   &lt;NA&gt;                 NA
4 Health care services, except hospitals                  2
5                   Educational services                  2
6                                   &lt;NA&gt;                 NA
  hours_usually_worked weekly_earning paid_hourly hourly_wage
1                   NA             NA          NA          NA
2                   NA             NA          NA          NA
3                   NA             NA          NA          NA
4                   32         469.44           1       14.67
5                   12         302.50           1       17.00
6                   NA             NA          NA          NA
  hours_worked_hourly_rate time_spent_caring_household
1                       NA                           0
2                       NA                           0
3                       NA                           0
4                       32                          60
5                       NA                           0
6                       NA                           0
  time_spent_caring_non_household time_spent_education time_spent_eating
1                               0                    0                40
2                               0                    0                30
3                               0                    0                75
4                               0                    0               165
5                               0                    0                30
6                               0                    0               120
  time_spent_gov time_spent_household_activities time_spent_household_services
1              0                             190                             0
2              0                             230                             0
3              0                             105                             0
4              0                             395                             0
5              0                             250                             0
6              0                             100                             0
  time_spent_personal_care time_spent_phone time_spent_personal_care_services
1                      715                0                                 0
2                      620                0                                 0
3                     1060                0                                 0
4                      655               45                                 0
5                      580              120                                 0
6                      620                0                                 0
  time_spent_shopping time_spent_religion time_spent_leisure time_spent_sports
1                   0                   0                465                 0
2                   0                   0                560                 0
3                  60                   0                 20                 0
4                   0                   0                120                 0
5                  18                  60                177                 0
6                   0                   0                355                50
  time_spent_travelling time_spent_volunteer time_spent_working
1                    30                    0                  0
2                     0                    0                  0
3                    60                    0                  0
4                     0                    0                  0
5                    75                  130                  0
6                    35                    0                  0</code></pre>
</div>
</div>
<p>Everything looks good! I add <code>renameColumns()</code>, <code>convertMissing()</code> and <code>convertClass()</code> to the <code>cleanData()</code> function. I’m finally done with the cleaning component of my workflow. I may have to come back and add additional steps as I make unpleasant discoveries in my analysis, but for now, I can move on.</p>
<p>Below I print my final <code>clean.R</code> file</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="co" style="color: #5E5E5E;"># filename: clean.R</span></span>
<span id="cb50-2"></span>
<span id="cb50-3"><span class="co" style="color: #5E5E5E;"># Main function for data cleaning stage</span></span>
<span id="cb50-4">cleanData <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(data) {</span>
<span id="cb50-5">  <span class="co" style="color: #5E5E5E;"># rename each of the columns to be human-readable</span></span>
<span id="cb50-6">  <span class="co" style="color: #5E5E5E;"># ignore some of the useless columns (such as alternative ID columns)</span></span>
<span id="cb50-7">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renameColumns</span>(data)</span>
<span id="cb50-8">  <span class="co" style="color: #5E5E5E;"># convert missing data to NA</span></span>
<span id="cb50-9">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">convertMissing</span>(data)</span>
<span id="cb50-10">  <span class="co" style="color: #5E5E5E;"># convert integers to meaningful factors</span></span>
<span id="cb50-11">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">convertClass</span>(data)</span>
<span id="cb50-12">  <span class="fu" style="color: #4758AB;">return</span>(data)</span>
<span id="cb50-13">}</span>
<span id="cb50-14"></span>
<span id="cb50-15"><span class="co" style="color: #5E5E5E;"># rename each of the columns to be human-readable</span></span>
<span id="cb50-16">renameColumns <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(data) {</span>
<span id="cb50-17">  data <span class="ot" style="color: #003B4F;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(<span class="at" style="color: #657422;">id =</span> CASEID,</span>
<span id="cb50-18">                          <span class="at" style="color: #657422;">year =</span> YEAR,</span>
<span id="cb50-19">                          <span class="co" style="color: #5E5E5E;"># number of attempted contacts</span></span>
<span id="cb50-20">                          <span class="at" style="color: #657422;">num_contacts =</span> NUMCONTACTS_CPS8,</span>
<span id="cb50-21">                          <span class="at" style="color: #657422;">state =</span> STATEFIP,</span>
<span id="cb50-22">                          <span class="at" style="color: #657422;">household_size =</span> HH_SIZE,</span>
<span id="cb50-23">                          <span class="at" style="color: #657422;">family_income =</span> FAMINCOME,</span>
<span id="cb50-24">                          <span class="at" style="color: #657422;">num_children =</span> HH_NUMKIDS,</span>
<span id="cb50-25">                          <span class="at" style="color: #657422;">num_adults =</span> HH_NUMADULTS,</span>
<span id="cb50-26">                          <span class="at" style="color: #657422;">age =</span> AGE,</span>
<span id="cb50-27">                          <span class="at" style="color: #657422;">sex =</span> SEX,</span>
<span id="cb50-28">                          <span class="at" style="color: #657422;">race =</span> RACE,</span>
<span id="cb50-29">                          <span class="at" style="color: #657422;">marital_status =</span> MARST,</span>
<span id="cb50-30">                          <span class="at" style="color: #657422;">education_level =</span> EDUC,</span>
<span id="cb50-31">                          <span class="at" style="color: #657422;">employment_status =</span> EMPSTAT,</span>
<span id="cb50-32">                          <span class="at" style="color: #657422;">occupation_category =</span> OCC2,</span>
<span id="cb50-33">                          <span class="at" style="color: #657422;">occupation_industry =</span> IND2,</span>
<span id="cb50-34">                          <span class="at" style="color: #657422;">employed_full_time =</span> FULLPART,</span>
<span id="cb50-35">                          <span class="at" style="color: #657422;">hours_usually_worked =</span> UHRSWORKT,</span>
<span id="cb50-36">                          <span class="at" style="color: #657422;">weekly_earning =</span> EARNWEEK,</span>
<span id="cb50-37">                          <span class="at" style="color: #657422;">paid_hourly =</span> PAIDHOUR,</span>
<span id="cb50-38">                          <span class="at" style="color: #657422;">hourly_wage =</span> HOURWAGE,</span>
<span id="cb50-39">                          <span class="at" style="color: #657422;">hours_worked_hourly_rate =</span> HRSATRATE,</span>
<span id="cb50-40">                          <span class="at" style="color: #657422;">time_spent_caring_household =</span> ACT_CAREHH,</span>
<span id="cb50-41">                          <span class="at" style="color: #657422;">time_spent_caring_non_household =</span> ACT_CARENHH,</span>
<span id="cb50-42">                          <span class="at" style="color: #657422;">time_spent_education =</span> ACT_EDUC,</span>
<span id="cb50-43">                          <span class="at" style="color: #657422;">time_spent_eating =</span> ACT_FOOD,</span>
<span id="cb50-44">                          <span class="at" style="color: #657422;">time_spent_gov =</span> ACT_GOVSERV,</span>
<span id="cb50-45">                          <span class="at" style="color: #657422;">time_spent_household_activities =</span> ACT_HHACT,</span>
<span id="cb50-46">                          <span class="at" style="color: #657422;">time_spent_household_services =</span> ACT_HHSERV,</span>
<span id="cb50-47">                          <span class="at" style="color: #657422;">time_spent_personal_care =</span> ACT_PCARE,</span>
<span id="cb50-48">                          <span class="at" style="color: #657422;">time_spent_phone =</span> ACT_PHONE,</span>
<span id="cb50-49">                          <span class="at" style="color: #657422;">time_spent_personal_care_services =</span> ACT_PROFSERV,</span>
<span id="cb50-50">                          <span class="at" style="color: #657422;">time_spent_shopping =</span> ACT_PURCH,</span>
<span id="cb50-51">                          <span class="at" style="color: #657422;">time_spent_religion =</span> ACT_RELIG,</span>
<span id="cb50-52">                          <span class="at" style="color: #657422;">time_spent_leisure =</span> ACT_SOCIAL,</span>
<span id="cb50-53">                          <span class="at" style="color: #657422;">time_spent_sports =</span> ACT_SPORTS,</span>
<span id="cb50-54">                          <span class="at" style="color: #657422;">time_spent_travelling =</span> ACT_TRAVEL,</span>
<span id="cb50-55">                          <span class="at" style="color: #657422;">time_spent_volunteer =</span> ACT_VOL,</span>
<span id="cb50-56">                          <span class="at" style="color: #657422;">time_spent_working =</span> ACT_WORK)</span>
<span id="cb50-57">  <span class="fu" style="color: #4758AB;">return</span>(data)    </span>
<span id="cb50-58">}</span>
<span id="cb50-59"></span>
<span id="cb50-60"><span class="co" style="color: #5E5E5E;"># identify missing values equal to 99, 999, etc</span></span>
<span id="cb50-61">equalFun <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, value) {</span>
<span id="cb50-62">  x <span class="sc" style="color: #5E5E5E;">==</span> value</span>
<span id="cb50-63">}</span>
<span id="cb50-64"></span>
<span id="cb50-65"><span class="co" style="color: #5E5E5E;"># identify if the max of a variable is equal to 99, 999, etc</span></span>
<span id="cb50-66">maxFun <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, value) {</span>
<span id="cb50-67">  <span class="fu" style="color: #4758AB;">max</span>(x, <span class="at" style="color: #657422;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;">==</span> value</span>
<span id="cb50-68">}</span>
<span id="cb50-69"></span>
<span id="cb50-70"><span class="co" style="color: #5E5E5E;"># convert weird missing values to NA</span></span>
<span id="cb50-71">convertMissing <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(data) {</span>
<span id="cb50-72">  <span class="co" style="color: #5E5E5E;"># convert missing values to NA</span></span>
<span id="cb50-73">  data <span class="ot" style="color: #003B4F;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb50-74">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 99 to NA</span></span>
<span id="cb50-75">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="dv" style="color: #AD0000;">99</span>), </span>
<span id="cb50-76">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="dv" style="color: #AD0000;">99</span>), <span class="cn" style="color: #8f5902;">NA_integer_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb50-77">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 999 to NA</span></span>
<span id="cb50-78">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="dv" style="color: #AD0000;">999</span>), </span>
<span id="cb50-79">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="dv" style="color: #AD0000;">999</span>), <span class="cn" style="color: #8f5902;">NA_integer_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb50-80">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 9999 to NA</span></span>
<span id="cb50-81">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="dv" style="color: #AD0000;">9999</span>), </span>
<span id="cb50-82">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="dv" style="color: #AD0000;">9999</span>), <span class="cn" style="color: #8f5902;">NA_integer_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb50-83">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 999.99 to NA</span></span>
<span id="cb50-84">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="fl" style="color: #AD0000;">999.99</span>), </span>
<span id="cb50-85">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="fl" style="color: #AD0000;">999.99</span>), <span class="cn" style="color: #8f5902;">NA_real_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb50-86">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 99999.99 to NA</span></span>
<span id="cb50-87">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="fl" style="color: #AD0000;">99999.99</span>), </span>
<span id="cb50-88">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="fl" style="color: #AD0000;">99999.99</span>), <span class="cn" style="color: #8f5902;">NA_real_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb50-89">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 998 to NA</span></span>
<span id="cb50-90">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="dv" style="color: #AD0000;">998</span>), </span>
<span id="cb50-91">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="dv" style="color: #AD0000;">998</span>), <span class="cn" style="color: #8f5902;">NA_integer_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb50-92">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 997 to NA</span></span>
<span id="cb50-93">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="dv" style="color: #AD0000;">997</span>), </span>
<span id="cb50-94">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="dv" style="color: #AD0000;">997</span>), <span class="cn" style="color: #8f5902;">NA_integer_</span>, .))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb50-95">    <span class="co" style="color: #5E5E5E;"># mutate all missing values coded as 9995 to NA</span></span>
<span id="cb50-96">    <span class="fu" style="color: #4758AB;">mutate_if</span>(<span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">maxFun</span>(x, <span class="dv" style="color: #AD0000;">9995</span>), </span>
<span id="cb50-97">              <span class="fu" style="color: #4758AB;">funs</span>(<span class="fu" style="color: #4758AB;">if_else</span>(<span class="fu" style="color: #4758AB;">equalFun</span>(., <span class="dv" style="color: #AD0000;">9995</span>), <span class="cn" style="color: #8f5902;">NA_integer_</span>, .))) </span>
<span id="cb50-98">  <span class="fu" style="color: #4758AB;">return</span>(data)</span>
<span id="cb50-99">}</span>
<span id="cb50-100"></span>
<span id="cb50-101"><span class="co" style="color: #5E5E5E;"># change numerics to meaningful factors</span></span>
<span id="cb50-102">convertClass <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(data, <span class="at" style="color: #657422;">path_to_codes =</span> <span class="st" style="color: #20794D;">"data/"</span>) {</span>
<span id="cb50-103">  <span class="co" style="color: #5E5E5E;"># convert id to a factor</span></span>
<span id="cb50-104">  data <span class="ot" style="color: #003B4F;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">as.factor</span>(id))</span>
<span id="cb50-105">  <span class="co" style="color: #5E5E5E;"># loop through each of the factor variables</span></span>
<span id="cb50-106">  <span class="cf" style="color: #003B4F;">for</span> (variable <span class="cf" style="color: #003B4F;">in</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"state"</span>, <span class="st" style="color: #20794D;">"occupation_industry"</span>, <span class="st" style="color: #20794D;">"occupation_category"</span>,</span>
<span id="cb50-107">                       <span class="st" style="color: #20794D;">"education_level"</span>, <span class="st" style="color: #20794D;">"race"</span>, <span class="st" style="color: #20794D;">"marital_status"</span>, <span class="st" style="color: #20794D;">"sex"</span>,</span>
<span id="cb50-108">                       <span class="st" style="color: #20794D;">"employment_status"</span>, <span class="st" style="color: #20794D;">"family_income"</span>)) {</span>
<span id="cb50-109">    <span class="co" style="color: #5E5E5E;"># identify the path to the code file</span></span>
<span id="cb50-110">    path <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(path_to_codes, variable, <span class="st" style="color: #20794D;">".txt"</span>)</span>
<span id="cb50-111">    <span class="co" style="color: #5E5E5E;"># read in the code file</span></span>
<span id="cb50-112">    codes <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.table</span>(path, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\t</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb50-113">    <span class="co" style="color: #5E5E5E;"># remove the second column (the entries are separated by two \t's)</span></span>
<span id="cb50-114">    codes <span class="ot" style="color: #003B4F;">&lt;-</span> codes[, <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb50-115">    <span class="co" style="color: #5E5E5E;"># convert the column names</span></span>
<span id="cb50-116">    <span class="fu" style="color: #4758AB;">colnames</span>(codes) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(variable, <span class="fu" style="color: #4758AB;">paste0</span>(variable, <span class="st" style="color: #20794D;">"_name"</span>))</span>
<span id="cb50-117">    <span class="co" style="color: #5E5E5E;"># add the code to the original data frame</span></span>
<span id="cb50-118">    data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">left_join</span>(data, codes, <span class="at" style="color: #657422;">by =</span> variable)</span>
<span id="cb50-119">    <span class="co" style="color: #5E5E5E;"># remove old variable and replace with new variable</span></span>
<span id="cb50-120">    data[, variable] <span class="ot" style="color: #003B4F;">&lt;-</span> data[, <span class="fu" style="color: #4758AB;">paste0</span>(variable, <span class="st" style="color: #20794D;">"_name"</span>)]</span>
<span id="cb50-121">    data <span class="ot" style="color: #003B4F;">&lt;-</span> data[, <span class="sc" style="color: #5E5E5E;">!</span>(<span class="fu" style="color: #4758AB;">colnames</span>(data) <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">paste0</span>(variable, <span class="st" style="color: #20794D;">"_name"</span>))]</span>
<span id="cb50-122">  }</span>
<span id="cb50-123">  <span class="fu" style="color: #4758AB;">return</span>(data)</span>
<span id="cb50-124">}</span></code></pre></div>
</div>
</section>
</section>
</section>
<section id="analysis-eda.rmd" class="level1">
<h1>Analysis: <code>eda.Rmd</code></h1>
<p>Where I go from here depends strongly on what questions I want to ask. If I already know the category of questions I’m planning to ask, and, for example, I know that they fall into two groups, then I will probably make two .Rmd files, one for each question.</p>
<p>If, however, I just want to play around with the data for a while, as is the case here, I will make a .Rmd file called <code>eda.Rmd</code> (or something along those lines).</p>
<p>Sometimes I end up separating my initial exploration file into several separate files when I start to go down several diverging paths.</p>
<p>Regardless of the analysis I decide to conduct, each of my <code>.Rmd</code> files will start with the following code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb51-2"><span class="fu" style="color: #4758AB;">source</span>(<span class="st" style="color: #20794D;">"R/load.R"</span>)</span>
<span id="cb51-3"><span class="fu" style="color: #4758AB;">source</span>(<span class="st" style="color: #20794D;">"R/clean.R"</span>)</span>
<span id="cb51-4"></span>
<span id="cb51-5"><span class="co" style="color: #5E5E5E;"># laod the data</span></span>
<span id="cb51-6">time_use_orig <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">loadData</span>()</span>
<span id="cb51-7"><span class="co" style="color: #5E5E5E;"># clean the data</span></span>
<span id="cb51-8">time_use <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cleanData</span>(time_use_orig)</span></code></pre></div>
</div>
<p>The opportunities for analysis are wide open!</p>
</section>
<section id="variables" class="level1">
<h1>List of variables downloaded from ATUX-X</h1>
<ul>
<li>CASEID (ATUS Case ID)</li>
<li>YEAR (Survey year)</li>
<li>NUMCONTACTS_CPS8 (Number of actual and attempted personal contacts)</li>
<li>HRHHID_CPS8 (Household ID (CPS))</li>
<li>HRHHID2_CPS8 (Household ID part 2 (CPS))</li>
<li>STATEFIP (FIPS State Code)</li>
<li>HH_SIZE (Number of people in household)</li>
<li>FAMINCOME (Family income)</li>
<li>HH_NUMKIDS (Number of children under 18 in household)</li>
<li>HH_NUMADULTS (Number of adults in household)</li>
<li>PERNUM (Person number (general))</li>
<li>LINENO (Person line number)</li>
<li>WT06 (Person weight, 2006 methodology)</li>
<li>AGE (Age)</li>
<li>SEX (Sex)</li>
<li>RACE (Race)</li>
<li>HISPAN (Hispanic origin)</li>
<li>ASIAN (Asian origin)</li>
<li>MARST (Marital status)</li>
<li>AGE_CPS8 (Age (CPS))</li>
<li>SEX_CPS8 (Sex (CPS))</li>
<li>EDUC (Highest level of school completed)</li>
<li>EDUCYRS (Years of education)</li>
<li>SCHLCOLL (Enrollment in school or college)</li>
<li>SCHLCOLL_CPS8 (Enrollment in school or college (CPS))</li>
<li>EMPSTAT (Labor force status)</li>
<li>OCC2 (General occupation category, main job)</li>
<li>OCC (Detailed occupation category, main job)</li>
<li>IND2 (General industry classification, main job)</li>
<li>IND (Detailed industry classification, main job)</li>
<li>FULLPART (Full time/part time employment status)</li>
<li>UHRSWORKT (Hours usually worked per week)</li>
<li>UHRSWORK1 (Hours usually worked per week at main job)</li>
<li>UHRSWORK2 (Hours usually worked per week at other jobs)</li>
<li>EARNWEEK (Weekly earnings)</li>
<li>PAIDHOUR (Hourly or non-hourly pay)</li>
<li>EARNRPT (Easiest way to report earnings)</li>
<li>HOURWAGE (Hourly earnings)</li>
<li>HRSATRATE (Hours worked at hourly rate)</li>
<li>OTUSUAL (Usually receives overtime, tips, commission at main job)</li>
<li>OTPAY (Weekly overtime earnings)</li>
<li>UHRSWORKT_CPS8 (Hours usually worked per week (CPS))</li>
<li>UHRSWORK1_CPS8 (Hours usually worked per week at main job (CPS))</li>
<li>UHRSWORK2_CPS8 (Hours usually worked per week at other jobs (CPS))</li>
<li>HRSWORKT_CPS8 (Hours worked last week (CPS))</li>
<li>ACT_CAREHH (ACT: Caring for and helping household members)</li>
<li>ACT_CARENHH (ACT: Caring for and helping non-household members)</li>
<li>ACT_EDUC (ACT: Educational activities)</li>
<li>ACT_FOOD (ACT: Eat and drinking)</li>
<li>ACT_GOVSERV (ACT: Government services and civic obligations)</li>
<li>ACT_HHACT (ACT: Household activities)</li>
<li>ACT_HHSERV (ACT: Household services)</li>
<li>ACT_PCARE (ACT: Personal care)</li>
<li>ACT_PHONE (ACT: Telephone calls)</li>
<li>ACT_PROFSERV (ACT: Professional and personal care services)</li>
<li>ACT_PURCH (ACT: Consumer purchases)</li>
<li>ACT_RELIG (ACT: Religious and spiritual activities)</li>
<li>ACT_SOCIAL (ACT: Socializing, relaxing, and leisure)</li>
<li>ACT_SPORTS (ACT: Sports, exercise, and recreation)</li>
<li>ACT_TRAVEL (ACT: Traveling)</li>
<li>ACT_VOL (ACT: Volunteer activities)</li>
<li>ACT_WORK (ACT: Working and Work-related Activities)</li>
<li>ERS_ASSOC (ERS: Activities associated with primary eating and drinking (travel and waiting))</li>
<li>ERS_PRIM (ERS: Primary eating and drinking)</li>
</ul>


</section>

 ]]></description>
  <category>R</category>
  <category>workflow</category>
  <guid>https://www.rebeccabarter.com/blog/2017-08-16-data-science-workflow.html</guid>
  <pubDate>Fri, 18 Aug 2017 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Confounding in causal inference: what is it, and what to do about it?</title>
  <dc:creator>Rebecca Barter</dc:creator>
  <link>https://www.rebeccabarter.com/blog/2017-07-05-confounding.html</link>
  <description><![CDATA[ 




<p>Often in science we want to be able to quantify the <em>effect</em> of an action on some outcome. For example, perhaps we are interested in estimating the effect of a drug on blood pressure. While it is easy to show whether or not taking the drug is <em>associated</em> with an increase in blood pressure, it is surprisingly difficult to show that taking the drug actually <em>caused</em> an increase (or decrease) in blood pressure.</p>
<p>Causal inference is the field of statistics (or economics, depending on who you ask) that is concerned with estimating the <em>causal effect</em> of a treatment.[^check]</p>
<section id="the-fundamental-problem-of-causal-inference" class="level1">
<h1>The fundamental problem of causal inference</h1>
<p>Why is estimating a causal effect difficult? To put it simply, the fundamental problem is that we can never actually <em>observe</em> a causal effect. The causal effect is defined to be the difference between the outcome when the treatment was applied and the outcome when it was not. This difference is a fundamentally unobservable quantity. For any individual, we can only ever observe their blood pressure either in the situation (1) when they take the drug or (2) when they don’t. <strong>We can never observe both</strong> since an individual cannot simultaneously both take the drug and not take the drug.</p>
<p>Introducing some notation, the outcome we would observe for an individual had they received the treatment (in which case we set the treatment indicator, <img src="https://latex.codecogs.com/png.latex?T%20=%201">) is denoted <img src="https://latex.codecogs.com/png.latex?Y(1)"> and the outcome for an individual had they not received treatment (treatment indicator, <img src="https://latex.codecogs.com/png.latex?T%20=%200">) is denoted <img src="https://latex.codecogs.com/png.latex?Y(0)">.</p>
<p>The outcome that we actually observe (<img src="https://latex.codecogs.com/png.latex?Y">) can be written as a linear combination of these quantities:</p>
<p><img src="https://latex.codecogs.com/png.latex?Y%20%20=%20T%20%5Ctimes%20Y(1)%20+%20(1%20-%20T)%20%5Ctimes%20Y(0)."></p>
<p>Since we can only ever observe one of the two <em>potential outcomes</em>, <img src="https://latex.codecogs.com/png.latex?Y(1)"> or <img src="https://latex.codecogs.com/png.latex?Y(0)">, how can we estimate the <em>causal effect</em> (i.e.&nbsp;the expected difference between the two potential outcomes)?</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctau%20=%20E%5BY(1)%20-%20Y(0)%5D"></p>
<p>This is a very unique type of missing data problem, and the key to estimating casual effects lies in understanding the principles of randomized experiments.</p>
<section id="confounders-are-the-worst" class="level2">
<h2 class="anchored" data-anchor-id="confounders-are-the-worst">Confounders are the worst!</h2>
<p>Suppose that we have conducted a randomized experiment in which we measure some outcome (say mortality) within two groups, treated and untreated, into which individuals were randomly assigned. In this case, the random assignment of treatment means that there should, <em>on average</em>, be no significant differences between the treated and untreated groups. Thus, any difference in mortality that we observe between the treated group and the untreated group must be due to the treatment itself (as this is the only thing that differs between the treated and untreated groups).</p>
<p>One of the primary problems that arise when attempting to estimate average causal effects in an <strong>observational study</strong> (i.e.&nbsp;a study in which the individuals assign themselves into a treatment group, e.g.&nbsp;because they themselves choose to smoke or not, rather than a scientist choosing for them) is that there may exist differences between the treated group and the untreated group, other than the treatment itself, such as gender (males are more likely to smoke).</p>
<p>Why is this a problem? Basically, if there is something other than the treatment that differs between the treated and untreated groups, then we cannot conclusively say that any difference observed in mortality (or any other outcome of interest) between the two groups is due solely to the treatment. Such a difference could also plausibly be due to these other variables that differ between these groups. These variables that differ between the treatment and control groups are called <strong>confounders</strong> if they also influence the outcome.</p>
<p>For a simplified example, it is known that males are more likely to smoke than females, but males are also more likely to die young as a result of other general risk-raking behavior. In this case, if we notice a difference in mortality between smokers and non-smokers, we cannot be sure that this difference is due to the smoking rather than the fact that the group of smokers consists more of males than the control group and subsequently (as a result of the risk-taking behavior, rather than just the smoking) the treatment group has a higher mortality rate than the untreated group. In this case, the higher mortality rate among smokers has nothing to do with (or at least is not entirely due to) the smoking itself, but rather is to do gender discrepancies and the differences in risk-taking behaviors afforded by such a discrepancy.</p>
<p>In the graph below, our example corresponds to the outcome, <img src="https://latex.codecogs.com/png.latex?Y">, mortality; the treatment, <img src="https://latex.codecogs.com/png.latex?T">, smoking, and the confounder, <img src="https://latex.codecogs.com/png.latex?X">, gender.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.rebeccabarter.com/blog/img/causal-inference/confounder.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Note that if gender differed between the treatment and untreated group (e.g.&nbsp;smokers vs non-smokers), but had no association with the outcome (e.g.&nbsp;mortality), then gender would not be considered a confounder (as it would not be a common cause of treatment the and outcome).</p>
<p>Clearly estimating causal effects in the presence of confounders is going to be a problem!</p>
</section>
</section>
<section id="so-when-is-our-estimator-identifiable" class="level1">
<h1>So when is our estimator “identifiable”?</h1>
<p>The goal is to estimate the expected potential outcomes in (1) the situation that <em>all</em> individuals in the entire population (of which our study is a small subset) were assigned the treatment, and (2) the situation that <em>none</em> of the individuals in the population were assigned the treatment, and take the difference between these two quantities:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctau%20=%20E%5BY(1)%5D%20-%20E%5BY(0)%5D"></p>
<p>This quantity is referred to as the population average causal effect.</p>
<p>Typically, the way we would want to estimate this quantity is using the conditional sample averages:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cwidehat%7B%5Ctau%7D%20=%20%5Cwidehat%7BE%7D%5BY%20%7C%20T%20=%201%5D%20-%20%5Cwidehat%7BE%7D%5BY%20%7C%20T%20=%200%5D."></p>
<p>Note that while <img src="https://latex.codecogs.com/png.latex?E%5BY(1)%5D"> referred to the expected outcome in the hypothetical situation that everyone in the population was assigned to treatment, <img src="https://latex.codecogs.com/png.latex?E%5BY%20%7C%20T%20=%201%5D"> refers to the expected outcome for all individuals in the population who are <em>actually assigned to treatment</em>.</p>
<p>where we take the observed average outcome of all treated individuals in our study subset and subtract the observed average outcome of all untreated individuals in our study subset.</p>
<p>However, this quantity is only an unbiased estimator of the true average causal effect, <img src="https://latex.codecogs.com/png.latex?%5Ctau">, when the following <strong>identifiability conditions</strong> hold:</p>
<ol type="1">
<li><p>The treated and untreated individuals are <strong>exchangeable</strong> wherein the assignment of treatment does not depend on the potential outcomes (i.e.&nbsp;that there are no unmeasured confounders that are a common cause of both treatment and the outcome):<sup>1</sup> <img src="https://latex.codecogs.com/png.latex?Y(1),%20Y(0)%20%5Cperp%20T"></p></li>
<li><p>The probability of receiving every level of treatment is positive for every individual, known as <strong>positivity</strong>. This means that there is no individual for whom receiving the treatment is impossible (and vice versa for the control).</p></li>
<li><p>The treatment is defined unambiguously, i.e.&nbsp;that the potential outcome that corresponds to the treatment that the individual actually received is “factual”. This is called <strong>consistency</strong>. In particular, this is often taken to mean that there are not multiple versions of treatment, i.e.&nbsp;that if an individual, <img src="https://latex.codecogs.com/png.latex?j">, received treatment <img src="https://latex.codecogs.com/png.latex?t"> by means (route, condition, etc) <img src="https://latex.codecogs.com/png.latex?k">, then consistency means that <img src="https://latex.codecogs.com/png.latex?Y_j%20=%20Y_j(t,%20k)~~%20%5Ctextrm%7B%20%20%20if%20%20%20%7D~~%20t%20=%20T_j%20~%5Ctextrm%7B%20no%20matter%20the%20value%20of%20%7D%20k"> Cole and Frangakis from UNC provide a nice <a href="http://www.unc.edu/~colesr/consistency.12jun08.pdf">discussion on consistency</a> if you’re interested in understanding this condition more deeply.</p></li>
</ol>
<p>The key is that the value of <img src="https://latex.codecogs.com/png.latex?E%5BY%20%7C%20T%20=%201%5D%20-%20E%5BY%20%7C%20T%20=%200%5D"> is only equal to the <em>causal effect</em>, <img src="https://latex.codecogs.com/png.latex?E%5BY(1)%20-%20Y(0)%5D"> if there are no confounders present, measured or unmeasured (and the other identifiability assumptions of positivity and consistency hold). Recall that a confounder can be thought of a variable, <img src="https://latex.codecogs.com/png.latex?X"> that differs between the treatment (<img src="https://latex.codecogs.com/png.latex?T%20=%201">) and control (<img src="https://latex.codecogs.com/png.latex?T%20=%200">) groups and also influences the outcome, <img src="https://latex.codecogs.com/png.latex?Y">. That is, a confounder is a common cause of both the treatment and the outcome.</p>
<p>Basically, if there are confounders present, then the treatment and control groups are no longer <em>exchangeable</em>. In particular, the expected outcome for the individuals that were actually treated, <img src="https://latex.codecogs.com/png.latex?E%5BY%20%7C%20T%20=%201%5D">, may not be equal to the potential outcome under treatment for the entire population (regardless of actual treatment assignment), <img src="https://latex.codecogs.com/png.latex?E%5BY(1)%5D">.</p>
</section>
<section id="dealing-with-measured-confounding" class="level1">
<h1>Dealing with measured confounding</h1>
<p>If there are confounders present, then the quantity, <img src="https://latex.codecogs.com/png.latex?E%5BY%20%7C%20T%20=%201%5D%20-%20E%5BY%20%7C%20T%20=%200%5D">, provides a measure of association (rather than causation). Fortunately, in the situation where all confounders are <em>measured</em>, there do exist methods for adjusting the estimate so that we can actually estimate a causal effect.</p>
<p>If all confounders are measured, and we can assume that exchangeability holds <em>within the strata dictated by the confounders</em> (this is called <strong>conditional exchangeabiliity</strong>) then we can still estimate the causal effect using methods that eliminate the confounding. Conditional exchangeability essentially means that, even if there are confounding variables that differ between the treatment and control groups that affect the outcome, if we only look at individuals who take a single value for that confounding variable, then the treatment assignment within each strata is “as if” random. We can then replace the first ignorability condition with the following:</p>
<ol type="1">
<li>The treated and untreated individuals are <strong>exchangeable</strong> wherein the assignment of treatment depends only on the measured covariates, <img src="https://latex.codecogs.com/png.latex?X"> (i.e.&nbsp;that there are no unmeasured confounders and no informative censoring). This is commonly known as <strong>ignorability</strong>, and is typically presented as <img src="https://latex.codecogs.com/png.latex?Y(1),%20Y(0)%20%5Cperp%20T%20%7C%20X"> (this is technically <strong>strong ignorability</strong>; ignorability actually refers to the weaker restriction where treatment assignment mechanism can be written in terms of <img src="https://latex.codecogs.com/png.latex?X">, <img src="https://latex.codecogs.com/png.latex?T"> and the observed <img src="https://latex.codecogs.com/png.latex?Y"> without dependence on the missing outcomes).</li>
</ol>
<p>Under this condition (as well as positivity and consistency), there are alternative versions of the estimator, <img src="https://latex.codecogs.com/png.latex?%5Chat%7BE%7D%5BY%7CT%20=%201%5D%20-%20%5Chat%7BE%7D%5BY%7CT%20=%200%5D"> that we can use to obtain an unbiased estimate of the causal effect.</p>
<p>The most common methods for adjusting the estimator to eliminate the confounding are:</p>
<ul>
<li><p>Matching, restriction, and stratification (note that an example of stratification is adjustment via regression): methods that exploit conditional exchangeability in subsets defined by some confounder to estimate the association between treatment and outcome <em>in those subsets only</em>.</p></li>
<li><p>Standardization, inverse-probability (or inverse-propensity) weighting, and G-estimation: methods that exploit conditional exchangeability in subsets defined by some confounder to estimate the causal effect <em>in the entire population or in any subset of the population</em>.</p></li>
</ul>
<p>However, note that we must be careful when selecting/identifying confounders on which to adjust, since in certain circumstances, conditioning on non-confounders can actually introduce confounding into the problem! As such, subject-matter knowledge becomes necessary to identify possible confounders. In observational studies, causal inference relies on the uncheckable assumption of no unmeasured confounding or of conditional exchangeability.</p>
<section id="what-about-unmeasured-confounders" class="level2">
<h2 class="anchored" data-anchor-id="what-about-unmeasured-confounders">What about unmeasured confounders?</h2>
<p>If there exist <em>unmeasured</em> confounders that may be a common cause of both the outcome and the treatment, then <strong>it is impossible to accurately estimate the causal effect</strong>. Period. Moreover, it is impossible to actually check whether there exists unobserved confounding. Everything relies on the validity of your assumptions. Sorry about that.</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I know the <img src="https://latex.codecogs.com/png.latex?%5Cperp"> symbol means perpendicular not independent, but I couldn’t be bothered figuring out how to add LaTeX preamble to markdown to define the double vertical line independent symbol. Don’t judge me!↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>causal inference</category>
  <category>statistics</category>
  <guid>https://www.rebeccabarter.com/blog/2017-07-05-confounding.html</guid>
  <pubDate>Wed, 05 Jul 2017 06:00:00 GMT</pubDate>
</item>
</channel>
</rss>
