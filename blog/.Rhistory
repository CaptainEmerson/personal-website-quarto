reticulate::repl_python()
pandas_df.columns
pandas_df.columns
import pandas as pd
pandas_df = pd.DataFrame({'a': [1,2],
'b': [3,4]})
pandas_df
pandas_df.columns
my_list = [1, "a", [3, 4]]
my_list
my_py_list = [1, "a", [3, 4]]
my_py_list
my_py_list[0]
my_py_list[0] = "one"
my_py_list
my_py_dict = {"name": ["Jane", "Joe", "Jerry"],
"age": [13, 15, 12]}
my_py_dict
my_py_dict[0]
my_py_dict = {'name': ['Jane', 'Joe', 'Jerry'],
'age': [13, 15, 12]}
my_py_dict
my_py_dict['name']
my_py_dict['name'] = ['Jane', 'Joe', 'Jerrie']
my_py_dict
my_py_dict['name']
my_py_dict['name][0]
my_py_dict['name'][0]
pandas_df.shape
pandas_df.mean
pandas_df.mean()
pandas_df.sum()
pandas_df.index
list(pandas_df.index)
r_df
pandas_df
pandas_df.index
pandas_df.columns
list(pandas_df.index)
list(pandas_df.columns)
list(pandas_df.columns)
list(pandas_df.index)
pandas_df.mean()
pandas_df.sum()
mean(pandas_df)
sum(pandas_df)
py_list = [1, 3, 4]
py_list.mean()
pandas_df.mean()
py_df['a']
pandas_df['a']
pandas_df['a']
pandas_df['a']
type(pandas_df['a'])
pandas_df['a'].index
pandas_df['a'].columns
pandas_df['c'] = [5, 6]
pandas_df
pandas_df_new = pandas_df
pandas_df_new['d'] = [7, 8]
pandas_df_new
pandas_df
pandas_df_new = pandas_df.copy()
pandas_df_new['c'] = [5, 6]
pandas_df_new
pandas_df
pandas_df = pd.DataFrame({'a': [1,2],
'b': [3,4]})
pandas_df
pandas_df_new = pandas_df.copy()
pandas_df_new['c'] = [5, 6]
pandas_df_new
pandas_df
r_df.a
python_df.a
pandas_df.a
pandas_df[pandas_df.a == 1]
pandas_df.loc[pandas_df.a == 1, :]
pandas_df.a == 1
pandas_df['a'] == 1
pandas_df['a'] == 1
pandas_df.loc[pandas_df.a == 1,:]
pandas_df[pandas_df.a == 1,]
pandas_df.loc[pandas_df.a == 1,:]
pandas_df.loc[pandas_df.a == 1,1]
pandas_df.loc[pandas_df.a == 1,:]
pandas_df.loc[pandas_df.a == 1,1]
pandas_df.loc[pandas_df.a == 1,0]
pandas_df.loc[pandas_df.a == 1,"b"]
pandas_df.iloc[pandas_df.a == 1,:]
pandas_df.loc[pandas_df.a == 1,'b']
pandas_df
pandas_df.loc[pandas_df.a == 1,1]
pandas_df.iloc[pandas_df.a == 1,1]
which(pandas_df.a == 1)
where(pandas_df.a == 1)
(pandas_df.a == 1).which
where(pandas_df.a == 1)
(pandas_df.a == 1).where()
pandas_df.a == 1
pandas_df.where(pandas_df.a == 1)
pd.where(pandas_df.a == 1)
np.where(pandas_df.a == 1)
import numpy as np
np.where(pandas_df.a == 1)
pandas_df.a == 1
np.where(pandas_df.a == 1)
# Chunk 1
#| message: false
library(dplyr)
# Chunk 2
# I can use `filter()` from dplyr without having to specify that it comes from dplyr
filter(iris, Species == "virginica")
# Chunk 3
# I can explicitly specify that `filter()` comes from dplyr using `::`
dplyr::filter(iris, Species == "virginica")
# Chunk 4
import pandas as pd
import numpy as np
# Chunk 5
np.log(7)
# Chunk 6
r_df <- data.frame(a = c(1, 2, 3, 4),
b = c(5, 6, 7, 8))
r_df
# Chunk 7
pandas_df = pd.DataFrame({'a': [1,2,3,4],
'b': [5,6,7,8]})
pandas_df
pandas_df = pd.DataFrame({'a': [1,2,3,4],
'b': [5,6,7,8]})
my_py_list = [1, "a", [3, 4]]
my_py_list
my_py_list[0]
my_py_list[0] = "one"
my_py_list
my_py_dict = {'name': ['Jane', 'Joe', 'Jerry'],
'age': [13, 15, 12]}
my_py_dict
my_py_dict[0]
my_py_dict['name']
my_py_dict['name'][0]
[1,2,3] + 2
np.log([1,2,3])
[1,2,3] + 2
py_list = [1, 3, 4]
py_list.mean()
pandas_df.mean()
pandas_df.sum()
pandas_df
pandas_df['c'] = [9, 10, 11, 12]
pandas_df
pandas_df_new = pandas_df
pandas_df_new['d'] = [7, 8]
pandas_df_new = pandas_df
pandas_df_new['d'] = [13,14,15,16]
pandas_df_new
pandas_df
pandas_df = pd.DataFrame({'a': [1,2,3,4],
'b': [5,6,7,8]})
pandas_df
pandas_df_new = pandas_df.copy()
pandas_df_new['c'] = [9,10,11,12]
pandas_df_new
pandas_df
pandas_df['a'] == 1
pandas_df[pandas_df.a == 1,]
pandas_df.loc[pandas_df.a == 1,:]
pandas_df.loc[pandas_df.a == 1,'b']
pandas_df['a'] > 1
pandas_df[pandas_df.a > 1,]
pandas_df.loc[pandas_df.a > 1,:]
pandas_df.loc[pandas_df.a > 1,'b']
pandas_df.loc[pandas_df.a > 1,1]
np.where(pandas_df.a == 1)
np.where(pandas_df.a > 1)
pandas_df.iloc[np.where(pandas_df.a > 1),1]
np.where(pandas_df.a > 1)
np.where(pandas_df.a > 1)[0]
np.where(pandas_df.a > 1)[0][0]
pandas_df.iloc[pandas_df.a > 1,1]
pandas_df[pandas_df.a > 1][1]
pandas_df[pandas_df.a > 1][1]
pandas_df.loc[pandas_df.a > 1,:].iloc[:,1]
pandas_df.iloc[[1,2,3],1]
pandas_df.query('a > 1')
thresh = 1
pandas_df.query('a > @thresh')
pandas_df["cat"] = ["red","red","yellow","yellow"]
pandas_df
pandas_df.groupby('cat').mean()
pandas_df.groupby('cat')["a"].mean()
pandas_df.groupby('cat')["a"].mean()
pandas_df.group_by('cat').mean()
pandas_df.groupby('cat').mean()
pandas_df.query('a > 1').groupby(cat)["b"].mean()
pandas_df.query('a > 1').groupby('cat')['b'].mean()
pandas_df.query('a > 1').groupby('cat').mean('b')
pandas_df.query('a > 1').groupby('cat')['b']
pd.Series(pandas_df.query('a > 1').groupby('cat')['b'])
from gapminder import gapminder
pip install pandas
quit()
gapminder = pd.read_csv("https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder-FiveYearData.csv")
gapminder = pd.read_csv("https://raw.githubusercontent.com/rlbarter/gapminder-data/main/gapminder.csv")
gapminder.head
gapminder.head()
gapminder.query('country == "Australia"')["lifeExp"].mean()
gapminder.groupby('continent')['gdpPercap'].mean()
gapminder.groupby('continent')['gdpPercap'].mean().plot()
import matplotlib as plt
gapminder.groupby('continent')['gdpPercap'].mean().plot()
gapminder.groupby('continent')['gdpPercap'].mean().plot()
gapminder.groupby('continent')['gdpPercap'].mean().plot.bar()
gapminder.groupby('continent')['gdpPercap'].mean().plot(type="bar")
gapminder.groupby('continent')['gdpPercap'].mean().plot(kind="bar")
qujit
gapminder.groupby('continent')['gdpPercap'].mean().plot(kind="bar")
gapminder.groupby('continent')['gdpPercap'].mean().plot(kind='bar')
gapminder.groupby('continent')['gdpPercap'].mean().plot.bar()
gapminder.groupby('continent')['gdpPercap'].mean().plot.bar()
gapminder.plot.box(x='continent', y='gdpPercap')
gapminder.plot.box(group='continent', y='gdpPercap')
gdp_by_continent.index
gdp_by_continent = gapminder.groupby('continent')['gdpPercap'].mean()
gdp_by_continent
gdp_by_continent.index
my_py_dict = {'name': ['Jane', 'Joe', 'Jerry'],
'age': [13, 15, 12]}
my_py_dict
my_py_dict[0]
mean(pandas_df)
sum(pandas_df)
