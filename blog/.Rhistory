# I can use `filter()` from dplyr without having to specify that it comes from dplyr
filter(iris, Species == "Versicolor")
iris
# I can use `filter()` from dplyr without having to specify that it comes from dplyr
filter(iris, Species == "virginica")
# I can use `filter()` from dplyr without having to specify that it comes from dplyr
filter(iris, species == "virginica")
# I can use `filter()` from dplyr without having to specify that it comes from dplyr
filter(iris, Species == "virginica")
#| message: false
library(dplyr)
# I can use `filter()` from dplyr without having to specify that it comes from dplyr
filter(iris, Species == "virginica")
pd.DataFrame(iris)
data.frame(a = c(1, 2),
b = c(3, 4))
library(reticulate)
py_install("pandas")
py_install("numpy")
# print the R column names
colnames(r_df)
reticulate::repl_python()
# Chunk 1
#| message: false
library(dplyr)
# Chunk 2
# I can use `filter()` from dplyr without having to specify that it comes from dplyr
filter(iris, Species == "virginica")
# Chunk 3
# I can explicitly specify that `filter()` comes from dplyr using `::`
dplyr::filter(iris, Species == "virginica")
# Chunk 4
import pandas as pd
reticulate::repl_python()
pandas_df.mean
reticulate::repl_python()
pandas_df.index
reticulate::repl_python()
list(pandas_df.index)
reticulate::repl_python()
r_df
r_df <- data.frame(a = c(1, 2),
b = c(3, 4))
r_df
pandas_df
reticulate::repl_python()
pandas_df.Index
reticulate::repl_python()
list(pandas_df.index)
reticulate::repl_python()
py_list = [1, 3, 4]
py_list.mean()
reticulate::repl_python()
The output of these functions are a "Series" type object, which is like a vector column of a data frame.
reticulate::repl_python()
r_df["a"]
reticulate::repl_python()
class(r_df["a"])
reticulate::repl_python()
pandas_df['a'].columns
reticulate::repl_python()
pandas_df['c'] = [5, 6]
reticulate::repl_python()
r_df.a
reticulate::repl_python()
pandas_df[pandas_df.a == 1]
reticulate::repl_python()
pandas_df.a == 1
reticulate::repl_python()
r_df["a"] == 1
r_df[r_df["a"] == 1, ]
r_df[r_df["a"] == 1]
reticulate::repl_python()
pandas_df.loc[pandas_df.a == 1,1]
reticulate::repl_python()
r_df <- data.frame(a = c(1, 2, 3, 4),
b = c(5, 6, 7, 8))
r_df
reticulate::repl_python()
[1,2,3] + 2
reticulate::repl_python()
np.log([1,2,3])
#| error: true
np.log([1,2,3])
reticulate::repl_python()
r_df["a"] == 1
r_df[r_df["a"] == 1, ]
reticulate::repl_python()
r_df["a"] > 1
r_df[r_df["a"] > 1, ]
reticulate::repl_python()
r_df |> filter(a > 1)
reticulate::repl_python()
thresh = 1
pandas_df.query('a > @thresh')
reticulate::repl_python()
r_df["cat"] = c("red", "red", "yellow", "yellow")
r_df
r_df |> group_by(cat) |> summarize(mean_a = mean(a))
reticulate::repl_python()
r_df |> group_by(cat) |> summarize(mean_a = mean(a))
reticulate::repl_python()
r_df |> filter(a > 1) |> group_by(cat) |> summarize(mean_b = mean(b))
reticulate::repl_python()
reticulate::py_install("gapminder")
reticulate::py_install("r-gapminder")
reticulate::repl_python()
reticulate::py_install("matplotlib")
reticulate::repl_python()
reticulate::py_install("seaborn")
reticulate::repl_python()
## Wrapping up
reticulate::repl_python()
