{
  "hash": "87041734b5c504298981aae18d720d96",
  "result": {
    "markdown": "---\ntitle: \"5 useful R tips from rstudio::conf(2020) - tidy eval, piping, conflicts, bar charts and colors\"\nauthor: \"Rebecca Barter\"\noutput:\n  html:\n    toc: true\ncategories: [R, rstudioconf, tidyverse, ggplot2, tidyeval, visualization]\ndate: 2020-02-06\ndescription: \"Last week I had the pleasure of attending rstudio::conf(2020) in San Francisco. Throughout the course of the week I met many wonderful people and learnt many things. This post covers some of the little tips and tricks that I learnt throughout the conference.\" \n---\n\n\n\nThis was my second year attending rstudio::conf() as a diversity scholar (and my first time as a [speaker](http://www.rebeccabarter.com/blog/2020-02-03_blogger/)), and I was yet again blown away by the friendliness of the community and the quality of the talks. Over the course of the week, I met so many wonderful and talented humans, and learnt so many incredibly useful things. This post is all about the little tips and tricks that I picked up from watching many fantastic presentations, attendees live tweeting, and having many insightful conversations. \n\n\n# Tip 1: Tidy evaluation\n\nTidy eval is one of those terms that seems to float around a lot in the R community, but I feel like 99% of us don't really get what tidy eval is, nor why we should care about it. Turns out, unless we're getting deep into package development, we probably don't need to be up to speed with tidy eval. The only part of tidy eval that I know is this: how to supply column names as unquoted arguments in functions. All of the resources I found on tidy eval go into waaay more detail about how it works, and maybe one day I'll care about that, but that time is not now.\n\n\nFor this (and the next few) example, I'll use the `midwest` dataset from the ggplot2 package, the first 6 rows of which are shown below. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(midwest)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 28\n    PID county    state  area poptotal popdens…¹ popwh…² popbl…³ popam…⁴ popas…⁵\n  <int> <chr>     <chr> <dbl>    <int>     <dbl>   <int>   <int>   <int>   <int>\n1   561 ADAMS     IL    0.052    66090     1271.   63917    1702      98     249\n2   562 ALEXANDER IL    0.014    10626      759     7054    3496      19      48\n3   563 BOND      IL    0.022    14991      681.   14477     429      35      16\n4   564 BOONE     IL    0.017    30806     1812.   29344     127      46     150\n5   565 BROWN     IL    0.018     5836      324.    5264     547      14       5\n6   566 BUREAU    IL    0.05     35688      714.   35157      50      65     195\n# … with 18 more variables: popother <int>, percwhite <dbl>, percblack <dbl>,\n#   percamerindan <dbl>, percasian <dbl>, percother <dbl>, popadults <int>,\n#   perchsd <dbl>, percollege <dbl>, percprof <dbl>, poppovertyknown <int>,\n#   percpovertyknown <dbl>, percbelowpoverty <dbl>, percchildbelowpovert <dbl>,\n#   percadultpoverty <dbl>, percelderlypoverty <dbl>, inmetro <int>,\n#   category <chr>, and abbreviated variable names ¹​popdensity, ²​popwhite,\n#   ³​popblack, ⁴​popamerindian, ⁵​popasian\n```\n:::\n:::\n\n\n\nSuppose that you want to write a function that plays nicely with the tidyverse (e.g. can take unquoted column names just like tidyverse functions do). Such an example might be one that makes a plot where the user supplies the variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotMidwest <- function(var1, var2) {\n  ggplot(midwest) +\n    geom_point(aes(x = var1, y = var2))\n}\n```\n:::\n\n\nTheoretically, this plot should be able to take the arguments `popdensity` and `percbelowpoverty` and provide me with a scatterplot of these two columns against one another:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplotMidwest(popdensity, percbelowpoverty)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `geom_point()`:\n! Problem while computing aesthetics.\nℹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'popdensity' not found\n```\n:::\n:::\n\n\nbut this doesn't work! Perhaps if I quote the variable names it will work:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplotMidwest(\"popdensity\", \"percbelowpoverty\")\n```\n\n::: {.cell-output-display}\n![](2020-02-05_rstudio_conf_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nThe above code didn't throw an error, but this is literally plotting the *word* \"popdensity\" against the *word* \"percbelowpoverty\", which isn't what I wanted to do!\n\nThe secret to providing column names as arguments to a function is.... tidy eval! Fortunately even without understanding *why* it works (something about delaying evaluation until later in the execution path blah blah blah), you can use tidy eval. The way you do this is to envelop your arguments within the function in curly braces `{{ }}`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotMidwestTidy <- function(var1, var2) {\n  ggplot(midwest) +\n    geom_point(aes(x = {{ var1 }}, y = {{ var2 }}))\n}\n```\n:::\n\n\nNow when I provide my column names as unquoted variables, I actually get the scatterplot I wanted!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplotMidwestTidy(popdensity, percbelowpoverty)\n```\n\n::: {.cell-output-display}\n![](2020-02-05_rstudio_conf_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nNote that my tidy eval version of my `plotMidwest()` function isn't designed to take *quoted* variable names. The following code yields the same plot as before of the *word* \"popdensity\" against the *word* \"percbelowpoverty\".\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplotMidwestTidy(\"popdensity\", \"percbelowpoverty\")\n```\n\n::: {.cell-output-display}\n![](2020-02-05_rstudio_conf_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nA neat little trick I learned from [Dewey Dunnington](https://twitter.com/paleolimbot?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor)'s talk is that you can use `.data` as placeholder for the data object inside `aes()`. This means that, if `var` is a character column name, you can access the quoted column from the data object using `.data[[var]]`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplotMidwestQuoted <- function(var1, var2) {\n  ggplot(midwest) +\n    geom_point(aes(x = .data[[var1]], y = .data[[var2]]))\n}\nplotMidwestQuoted(\"popdensity\", \"percbelowpoverty\") \n```\n\n::: {.cell-output-display}\n![](2020-02-05_rstudio_conf_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nDewey's talk is full of gems (check out his slides: https://fishandwhistle.net/slides/rstudioconf2020/#1).\n\n\n\n\n# Tip 2: Pipe into later arguments of a function using `.`\n\nWhile I didn't technically learn this one from a talk at rstudio::conf(2020), I did run into an old friend [Garth Tarr](https://twitter.com/garthtarr) who told me about this piping trick: if you want to pipe an object into any argument other than the first one, you can do so using the `.` placeholder. For instance, let's say that you want to use the `lm()` function to fit a linear model, and because you, like me, are pipe-obsessed, you want to pipe the data into `lm()`. \n\n\nSadly, when I try to pipe the midwest data into my `lm()` function for regressing population density (`popdensity`) against poverty rate (`percbelowpoverty`), I get an error.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmidwest %>%\n  lm(popdensity ~ percbelowpoverty)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in as.data.frame.default(data): cannot coerce class '\"formula\"' to a data.frame\n```\n:::\n:::\n\n\n\nWhat's going wrong? There are two things you need to understand about what's happening here:\n\n1. The argument order of `lm()` is: `lm(formula, data)`, i.e. the data is the *second* argument of the `lm` function (whereas all tidyverse functions have the data as the *first* argument)\n\n1. The pipe, `%>%`, automatically places the *object* to the left of the pipe into the *first argument* of the function to the right of the pipe\n\nso `midwest %>% lm(popdensity ~ percbelowpoverty)` above is equivalent to `lm(formula = iris, data = Sepal.Length ~ Sepal.Width)`, which has the arguments reversed.\n\nInstead of abandoning the trusty pipe (the thought of which fills me with sadness), I can instead pipe the data into the *second* argument using `.` as a placeholder for the position into which I want to pipe the data: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmidwest %>% lm(popdensity ~ percbelowpoverty, .)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = popdensity ~ percbelowpoverty, data = .)\n\nCoefficients:\n     (Intercept)  percbelowpoverty  \n         4068.06            -77.56  \n```\n:::\n:::\n\n\n\nNote that I could alternatively *name* the `formula` argument, which would automatically pipe the object into the first *unassigned* argument (which in our case is the data argument), but this becomes cumbersome when you have many arguments. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmidwest %>% lm(formula = popdensity ~ percbelowpoverty)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = popdensity ~ percbelowpoverty, data = .)\n\nCoefficients:\n     (Intercept)  percbelowpoverty  \n         4068.06            -77.56  \n```\n:::\n:::\n\n\n\n\n\n# Tip 3: Function conflicts workaround (no more dplyr::select())\n\nHave you ever loaded the `MASS` R package and found that `select()` from `dplyr` no longer works? I regularly get this type of error when functions from different packages have the same name as tidyverse functions I use on the reg. Let's pretend that I really want to select the `cut` variable from the `diamonds` dataset from the `ggplot2` package.  \n\n\nThe first 6 rows of the diamonds dataset are shown below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 10\n  carat cut       color clarity depth table price     x     y     z\n  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n```\n:::\n:::\n\n\nSadly if I loaded the `MASS` library before trying to select `cut` from `diamonds`, I get the following error:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'MASS'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    select\n```\n:::\n\n```{.r .cell-code}\ndiamonds %>% select(cut)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in select(., cut): unused argument (cut)\n```\n:::\n:::\n\n\nThis is because by loading `MASS`, I have overwritten `dplyr`'s `select()` function (hence the warning). The normal workaround is to be explicit about what `select()` function you want using `dplyr::select()` as in \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% dplyr::select(cut)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 1\n   cut      \n   <ord>    \n 1 Ideal    \n 2 Premium  \n 3 Good     \n 4 Premium  \n 5 Good     \n 6 Very Good\n 7 Very Good\n 8 Very Good\n 9 Fair     \n10 Very Good\n# … with 53,930 more rows\n```\n:::\n:::\n\n\nBut this can be really annoying if you have a lot of `select()`s in your code (because you have to go through and apply `dplyr::` to each one). It turns out (as [tweeted by Birunda Chelliah](https://twitter.com/cbirunda/status/1221954540544507906?s=20) - I'm not where she learned it though) that a better workaround is to set conflict hierarchies at the top of your document (`conflict_prefer(\"select\", \"dplyr\")`) to specify that the `select()` function should always come from the `dplyr` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"conflicted\")\nlibrary(conflicted)\n# set conflict preference\nconflict_prefer(\"select\", \"dplyr\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n[conflicted] Will prefer dplyr::select over any other package.\n```\n:::\n:::\n\n\nNow when I use `select()` it works just fine!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# no more error!\ndiamonds %>% select(cut)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 × 1\n   cut      \n   <ord>    \n 1 Ideal    \n 2 Premium  \n 3 Good     \n 4 Premium  \n 5 Good     \n 6 Very Good\n 7 Very Good\n 8 Very Good\n 9 Fair     \n10 Very Good\n# … with 53,930 more rows\n```\n:::\n:::\n\n\n\n\n# Tip 4: `geom_col()`: you'll never have to specify \"stat = identity\" for your bar plots ever again!\n\nMost of the time when I want to make a bar chart, I want to provide an `x` variable for the bar categories, and a `y` variable for the height of the bar for each category. Sadly, this isn't what `geom_bar()` does by default - its default behaviour is to *count* each level of the provided `x` aesthetic. For instance, in the `diamonds` dataset, the `cut` variable takes 5 unique values: fair, good, very good, premium and ideal. Providing `cut` as the x-aesthetic for `geom_bar()` will, by default, count the number of times each of these unique values appear in the data and use these counts as the heights.\n\n\nThe default usage of `geom_bar()` is as follows\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndiamonds %>%\n  ggplot() +\n  geom_bar(aes(x = cut))\n```\n\n::: {.cell-output-display}\n![](2020-02-05_rstudio_conf_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nwhich automatically counts the number of time each `cut` appears in the data.\n\nHowever (putting aside arguments about what types of data bar charts are appropriate for), I frequently want to use a bar chart to display something other than a count. For instance, the average price of each cut, shown below.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\naverage_price <- diamonds %>% \n  group_by(cut) %>%\n  summarise(average_price = mean(price)) %>%\n  ungroup() \naverage_price\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  cut       average_price\n  <ord>             <dbl>\n1 Fair              4359.\n2 Good              3929.\n3 Very Good         3982.\n4 Premium           4584.\n5 Ideal             3458.\n```\n:::\n:::\n\n\nIf I try to set the `y` aesthetic of `geom_bar` to `y = average_price`, I get an annoying error:\n\n\n::: {.cell}\n\n```{.r .cell-code}\naverage_price %>% \n  ggplot() +\n  geom_bar(aes(x = cut, y = average_price))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `geom_bar()`:\n! Problem while computing stat.\nℹ Error occurred in the 1st layer.\nCaused by error in `setup_params()`:\n! `stat_count()` must only have an x or y aesthetic.\n```\n:::\n:::\n\n\n\nThe typical fix for this is to include `stat = 'identity'` as an argument of `geom_bar()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\naverage_price %>% \n  ggplot() +\n  geom_bar(aes(x = cut, y = average_price), stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](2020-02-05_rstudio_conf_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nBut it turns out *there's a better way*!\n\nDuring his fantastic talk on his `ggtext` package, [Claus Wilke](https://twitter.com/ClausWilke)) casually used the `geom_col()` function to create a *column chart* (is that what `geom_col()` stands for?), which, as it turns out, is what I've been trying to make the whole time:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\naverage_price %>% \n  ggplot() +\n  geom_col(aes(x = cut, y = average_price))\n```\n\n::: {.cell-output-display}\n![](2020-02-05_rstudio_conf_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nThis probably wasn't what Claus imagined me to take away from his talk, but I swear ggtext was super cool too!\n\n<!--  To demonstrate `geom_col()` we will use the inbuilt islands dataset consisting of the sizes of the land masses. `islands` initially comes as a named vector, so here are some bonus tips: the `enframe()` function converts a named vector to a two-column data frame, and the `gt()` function is a nice way to print a data frame in html format. -->\n\n\n<!-- ```{r} -->\n<!-- library(tidyverse) -->\n<!-- library(gt) -->\n<!-- large_islands <- islands %>% -->\n<!--   # convert the vector to a data frame -->\n<!--   enframe(name = \"island\", value = \"land_mass\") %>% -->\n<!--   # filter to the larger islands -->\n<!--   filter(land_mass > 1000)   -->\n<!-- gt(large_islands) -->\n<!-- ``` -->\n\n\n<!-- When I want to create a bar plot I usually try  -->\n\n<!-- ```{r, eval = FALSE} -->\n<!-- large_islands %>% -->\n<!--   ggplot() + -->\n<!--   geom_bar(aes(x = island, y = land_mass)) -->\n<!-- ``` -->\n\n<!-- and fix the error by specifying `stat = \"identity\"`.  -->\n\n<!-- ```{r, eval = FALSE, fig.align=\"center\"} -->\n<!-- large_islands %>% -->\n<!--   ggplot() + -->\n<!--   geom_bar(aes(x = island, y = land_mass), stat = \"identity\") -->\n<!-- ``` -->\n\n<!-- While it seems like a very small life improvement, you have no idea how much joy simply being able to use `geom_col()` brings me. I'm never going to have to specify `stat = \"identity\"` again! I'm so pathetically excited! -->\n\n<!-- ```{r, eval = FALSE, fig.align=\"center\"} -->\n<!-- large_islands %>% -->\n<!--   ggplot() + -->\n<!--   geom_col(aes(x = island, y = land_mass)) -->\n<!-- ``` -->\n\n\n\n# Tip 5: Using `show_col()` for viewing colour palettes\n\nLast but not least, [Dana Paige Seidel](https://twitter.com/dpseidel) gave a great talk on the scales package, which does a lot of great things under the hood of ggplot. But scales also let's you look at colours! The `show_col()` function shows you what colours look like:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(scales)\nshow_col(c(\"#9C89B8\", \"#F0A6CA\", \"#EFC3E6\", \"#F0E6EF\"))\n```\n\n::: {.cell-output-display}\n![](2020-02-05_rstudio_conf_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nAlso a quick plug for how I chose these colours (and how I choose colours in general): https://coolors.co/app. \n\n\nI'm super excited for rstudio::conf(2021)!!\n",
    "supporting": [
      "2020-02-05_rstudio_conf_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}