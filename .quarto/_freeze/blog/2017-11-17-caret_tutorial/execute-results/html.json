{
  "hash": "98ff9d797dee6b25a72acd2511905f4b",
  "result": {
    "markdown": "---\ntitle:  \"A basic tutorial of caret: the machine learning package in R\"\nauthor: \"Rebecca Barter\"\ncategories: [R, machine learning]\noutput:\n  html:\n    toc: true\ndate: 2017-11-17\ndescription: \"R has a wide number of packages for machine learning (ML), which is great, but also quite frustrating since each package was designed independently and has very different syntax, inputs and outputs. Caret unifies these packages into a single package with constant syntax, saving everyone a lot of frustration and time!\" \n---\n\n\nNote: If you're new to caret, I suggest learning tidymodels instead [http://www.rebeccabarter.com/blog/2020-03-25_machine_learning/](http://www.rebeccabarter.com/blog/2020-03-25_machine_learning/). Tidymodels is essentially caret's successor. Don't worry though, your caret code will still work!\n\nOlder note: This tutorial was based on an older version of the abalone data that had a binary `old` varibale rather than a numeric `age` variable. It has been modified lightly so that it uses a manual `old` variable (is the abalone older than 10 or not) and ignores the numeric `age` variable.\n\nMaterials prepared by Rebecca Barter. Package developed by Max Kuhn.\n\nAn interactive Jupyter Notebook version of this tutorial can be found at https://github.com/rlbarter/STAT-215A-Fall-2017/tree/master/week11. Feel free to download it and use for your own learning or teaching adventures!\n\nR has a wide number of packages for machine learning (ML), which is great, but also quite frustrating since each package was designed independently and has very different syntax, inputs and outputs.\n\nThis means that if you want to do machine learning in R, you have to learn a large number of separate methods.\n\nRecognizing this, Max Kuhn (at the time working in drug discovery at Pfizer, now at RStudio) put together a single package for performing any machine learning method you like. This package is called `caret`. Caret stands for **C**lassification **A**nd **Re**gression **T**raining. Apparently caret has little to do with our orange friend, the carrot.\n\n<!-- ```{r echo = FALSE} -->\n<!-- knitr::include_graphics(\"img/caret/caret.png\") -->\n<!-- ``` -->\n\nNot only does caret allow you to run a plethora of ML methods, it also provides tools for auxiliary techniques such as:\n\n* Data preparation (imputation, centering/scaling data, removing correlated predictors, reducing skewness)\n\n* Data splitting\n\n* Variable selection\n\n* Model evaluation\n\nAn extensive vignette for caret can be found here: https://topepo.github.io/caret/index.html\n\n\n\n## A simple view of caret: the default `train` function\n\nTo implement your machine learning model of choice using caret you will use the `train` function. The types of modeling options available are many and are listed here: https://topepo.github.io/caret/available-models.html. In the example below, we will use the ranger implementation of random forest to predict whether abalone are \"old\" or not based on a bunch of physical properties of the abalone (sex, height, weight, diameter, etc). The abalone data came from the [UCI Machine Learning repository](https://archive.ics.uci.edu/ml/datasets/abalone) (we split the data into a training and test set).\n\nFirst we load the data into R: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load in packages\nlibrary(caret)\nlibrary(ranger)\nlibrary(tidyverse)\nlibrary(e1071)\n# load in abalone dataset\nabalone_data <- read.table(\"data/abalone.data\", sep = \",\")\n# load in column names\ncolnames(abalone_data) <- c(\"sex\", \"length\", \"diameter\", \"height\", \n                            \"whole.weight\", \"shucked.weight\", \n                            \"viscera.weight\", \"shell.weight\", \"age\")\n# add a logical variable for \"old\" (age > 10)\nabalone_data <- abalone_data %>%\n  mutate(old = age > 10) %>%\n  # remove the \"age\" variable\n  select(-age)\n# split into training and testing\nset.seed(23489)\ntrain_index <- sample(1:nrow(abalone_data), 0.9 * nrow(abalone_data))\nabalone_train <- abalone_data[train_index, ]\nabalone_test <- abalone_data[-train_index, ]\n# remove the original dataset\nrm(abalone_data)\n# view the first 6 rows of the training data\nhead(abalone_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     sex length diameter height whole.weight shucked.weight viscera.weight\n232    M  0.565    0.440  0.175       0.9025         0.3100         0.1930\n3906   M  0.380    0.270  0.095       0.2190         0.0835         0.0515\n1179   F  0.650    0.500  0.190       1.4640         0.6415         0.3390\n2296   F  0.520    0.415  0.145       0.8045         0.3325         0.1725\n1513   F  0.650    0.500  0.160       1.3825         0.7020         0.3040\n1023   F  0.640    0.500  0.170       1.5175         0.6930         0.3260\n     shell.weight   old\n232        0.3250  TRUE\n3906       0.0700 FALSE\n1179       0.4245 FALSE\n2296       0.2850 FALSE\n1513       0.3195 FALSE\n1023       0.4090  TRUE\n```\n:::\n:::\n\n\nIt looks like we have 3,759 abalone:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(abalone_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3759    9\n```\n:::\n:::\n\n\nTime to fit a random forest model using caret. Anytime we want to fit a model using `train` we tell it which model to fit by providing a formula for the first argument (`as.factor(old) ~ .` means that we want to model `old` as a function of all of the other variables). Then we need to provide a method (we specify `\"ranger\"` to implement randomForest).\n\n\n::: {.cell hash='2017-11-17-caret_tutorial_cache/html/unnamed-chunk-3_6a88e047b4a7d98e0e4f25071f2e365b'}\n\n```{.r .cell-code}\n# fit a random forest model (using ranger)\nrf_fit <- train(as.factor(old) ~ ., \n                data = abalone_train, \n                method = \"ranger\")\n```\n:::\n\n\nBy default, the `train` function without any arguments re-runs the model over 25 bootstrap samples and across 3 options of the tuning parameter (the tuning parameter for `ranger` is `mtry`; the number of randomly selected predictors at each cut in the tree).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRandom Forest \n\n3759 samples\n   8 predictor\n   2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Bootstrapped (25 reps) \nSummary of sample sizes: 3759, 3759, 3759, 3759, 3759, 3759, ... \nResampling results across tuning parameters:\n\n  mtry  splitrule   Accuracy   Kappa    \n  2     gini        0.7794339  0.4982012\n  2     extratrees  0.7788261  0.4867672\n  5     gini        0.7722038  0.4853445\n  5     extratrees  0.7784925  0.4974177\n  9     gini        0.7665692  0.4738511\n  9     extratrees  0.7759596  0.4933252\n\nTuning parameter 'min.node.size' was held constant at a value of 1\nAccuracy was used to select the optimal model using the largest value.\nThe final values used for the model were mtry = 2, splitrule = gini\n and min.node.size = 1.\n```\n:::\n:::\n\n\n\nTo test the data on an independent test set is equally as simple using the inbuilt `predict` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# predict the outcome on a test set\nabalone_rf_pred <- predict(rf_fit, abalone_test)\n# compare predicted outcome and true outcome\nconfusionMatrix(abalone_rf_pred, as.factor(abalone_test$old))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction FALSE TRUE\n     FALSE   229   60\n     TRUE     33   96\n                                          \n               Accuracy : 0.7775          \n                 95% CI : (0.7346, 0.8165)\n    No Information Rate : 0.6268          \n    P-Value [Acc > NIR] : 2.672e-11       \n                                          \n                  Kappa : 0.5072          \n                                          \n Mcnemar's Test P-Value : 0.007016        \n                                          \n            Sensitivity : 0.8740          \n            Specificity : 0.6154          \n         Pos Pred Value : 0.7924          \n         Neg Pred Value : 0.7442          \n             Prevalence : 0.6268          \n         Detection Rate : 0.5478          \n   Detection Prevalence : 0.6914          \n      Balanced Accuracy : 0.7447          \n                                          \n       'Positive' Class : FALSE           \n                                          \n```\n:::\n:::\n\n\n\n# Getting a little fancier with caret\n\nWe have now seen how to fit a model along with the default resampling implementation (bootstrapping) and parameter selection. While this is great, there are many more things we could do with caret. \n\n\n## Pre-processing (`preProcess`)\n\n\nThere are a number of pre-processing steps that are easily implemented by caret. Several stand-alone functions from caret target specific issues that might arise when setting up the model. These include\n\n* `dummyVars`: creating dummy variables from categorical variables with multiple categories\n\n* `nearZeroVar`: identifying zero- and near zero-variance predictors (these may cause issues when subsampling)\n\n* `findCorrelation`: identifying correlated predictors\n\n* `findLinearCombos`: identify linear dependencies between predictors\n\nIn addition to these individual functions, there also exists the **`preProcess`** function which can be used to perform more common tasks such as centering and scaling, imputation and transformation. `preProcess` takes in a data frame to be processed and a method which can be any of \"BoxCox\", \"YeoJohnson\", \"expoTrans\", \"center\", \"scale\", \"range\", \"knnImpute\", \"bagImpute\", \"medianImpute\", \"pca\", \"ica\", \"spatialSign\", \"corr\", \"zv\", \"nzv\", and \"conditionalX\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# center, scale and perform a YeoJohnson transformation\n# identify and remove variables with near zero variance\n# perform pca\nabalone_no_nzv_pca <- preProcess(select(abalone_train, - old), \n                        method = c(\"center\", \"scale\", \"nzv\", \"pca\"))\nabalone_no_nzv_pca\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCreated from 3759 samples and 8 variables\n\nPre-processing:\n  - centered (7)\n  - ignored (1)\n  - principal component signal extraction (7)\n  - scaled (7)\n\nPCA needed 3 components to capture 95 percent of the variance\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# identify which variables were ignored, centered, scaled, etc\nabalone_no_nzv_pca$method\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$center\n[1] \"length\"         \"diameter\"       \"height\"         \"whole.weight\"  \n[5] \"shucked.weight\" \"viscera.weight\" \"shell.weight\"  \n\n$scale\n[1] \"length\"         \"diameter\"       \"height\"         \"whole.weight\"  \n[5] \"shucked.weight\" \"viscera.weight\" \"shell.weight\"  \n\n$pca\n[1] \"length\"         \"diameter\"       \"height\"         \"whole.weight\"  \n[5] \"shucked.weight\" \"viscera.weight\" \"shell.weight\"  \n\n$ignore\n[1] \"sex\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# identify the principal components\nabalone_no_nzv_pca$rotation\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      PC1         PC2        PC3\nlength         -0.3835950  0.01308476 -0.5915192\ndiameter       -0.3838966  0.03978406 -0.5874657\nheight         -0.3458509  0.88289420  0.2793599\nwhole.weight   -0.3910710 -0.22191114  0.2394200\nshucked.weight -0.3784382 -0.33048177  0.2601988\nviscera.weight -0.3819522 -0.23798574  0.2841819\nshell.weight   -0.3792439 -0.06036456  0.1454731\n```\n:::\n:::\n\n\n\n## Data splitting (`createDataPartition` and `groupKFold`)\n\nGenerating subsets of the data is easy with the **`createDataPartition`** function. While this function can be used to simply generate training and testing sets, it can also be used to subset the data while respecting important groupings that exist within the data.\n\nFirst, we show an example of performing general sample splitting to generate 10 different 80% subsamples.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# identify the indices of 10 80% subsamples of the iris data\ntrain_index <- createDataPartition(iris$Species,\n                                   p = 0.8,\n                                   list = FALSE,\n                                   times = 10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# look at the first 6 indices of each subsample\nhead(train_index)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Resample01 Resample02 Resample03 Resample04 Resample05 Resample06\n[1,]          3          3          1          1          1          2\n[2,]          4          4          2          2          2          3\n[3,]          5          5          3          3          3          4\n[4,]          6          6          5          4          4          5\n[5,]          7          9          6          5          6          6\n[6,]          8         10         10          6          7          7\n     Resample07 Resample08 Resample09 Resample10\n[1,]          2          2          1          2\n[2,]          4          3          3          5\n[3,]          5          4          4          6\n[4,]          6          5          5          7\n[5,]          8          6          8          9\n[6,]          9          7          9         11\n```\n:::\n:::\n\n\nWhile the above is incredibly useful, it is also very easy to do using a for loop. Not so exciting.\n\n\nSomething that IS more exciting is the ability to do K-fold cross validation which respects groupings in the data. The **`groupKFold`** function does just that! \n\n\nAs an example, let's consider the following made-up abalone groups so that each sequential set of 5 abalone that appear in the dataset together are in the same group. For simplicity we will only consider the first 50 abalone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add a madeup grouping variable that groupes each subsequent 5 abalone together\n# filter to the first 50 abalone for simplicity\nabalone_grouped <- cbind(abalone_train[1:50, ], group = rep(1:10, each = 5))\nhead(abalone_grouped, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     sex length diameter height whole.weight shucked.weight viscera.weight\n232    M  0.565    0.440  0.175       0.9025         0.3100         0.1930\n3906   M  0.380    0.270  0.095       0.2190         0.0835         0.0515\n1179   F  0.650    0.500  0.190       1.4640         0.6415         0.3390\n2296   F  0.520    0.415  0.145       0.8045         0.3325         0.1725\n1513   F  0.650    0.500  0.160       1.3825         0.7020         0.3040\n1023   F  0.640    0.500  0.170       1.5175         0.6930         0.3260\n2390   M  0.420    0.340  0.125       0.4495         0.1650         0.1125\n856    F  0.575    0.465  0.140       0.9580         0.4420         0.1815\n2462   F  0.500    0.385  0.130       0.7680         0.2625         0.0950\n2756   F  0.525    0.415  0.150       0.7055         0.3290         0.1470\n     shell.weight   old group\n232        0.3250  TRUE     1\n3906       0.0700 FALSE     1\n1179       0.4245 FALSE     1\n2296       0.2850 FALSE     1\n1513       0.3195 FALSE     1\n1023       0.4090  TRUE     2\n2390       0.1440  TRUE     2\n856        0.2705 FALSE     2\n2462       0.2700  TRUE     2\n2756       0.1990 FALSE     2\n```\n:::\n:::\n\n\n\nThe following code performs 10-fold cross-validation while respecting the groups in the abalone data. That is, each group of abalone must always appear in the same group together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# perform grouped K means\ngroup_folds <- groupKFold(abalone_grouped$group, k = 10)\ngroup_folds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Fold1\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 21 22 23 24 25 26 27 28 29 30\n[26] 31 32 33 34 35 41 42 43 44 45 46 47 48 49 50\n\n$Fold2\n [1]  1  2  3  4  5  6  7  8  9 10 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n[26] 36 37 38 39 40 41 42 43 44 45\n\n$Fold3\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 46 47 48 49 50\n\n$Fold4\n [1]  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 26 27 28 29 30 31 32 33 34 35\n[26] 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n\n$Fold5\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n\n$Fold6\n [1]  1  2  3  4  5 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n[26] 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n```\n:::\n:::\n\n\n\n## Resampling options (`trainControl`)\n\nOne of the most important part of training ML models is tuning parameters. You can use the **`trainControl`** function to specify a number of parameters (including sampling parameters) in your model. The object that is outputted from `trainControl` will be provided as an argument for `train`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(998)\n# create a testing and training set\nin_training <- createDataPartition(abalone_train$old, p = .75, list = FALSE)\ntraining <- abalone_train[ in_training,]\ntesting  <- abalone_train[-in_training,]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# specify that the resampling method is \nfit_control <- trainControl(## 10-fold CV\n                           method = \"cv\",\n                           number = 10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# run a random forest model\nset.seed(825)\nrf_fit <- train(as.factor(old) ~ ., \n                data = abalone_train, \n                method = \"ranger\",\n                trControl = fit_control)\nrf_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRandom Forest \n\n3759 samples\n   8 predictor\n   2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Cross-Validated (10 fold) \nSummary of sample sizes: 3384, 3383, 3383, 3382, 3383, 3383, ... \nResampling results across tuning parameters:\n\n  mtry  splitrule   Accuracy   Kappa    \n  2     gini        0.7826656  0.5054371\n  2     extratrees  0.7853266  0.5032091\n  5     gini        0.7765528  0.4953944\n  5     extratrees  0.7850614  0.5120121\n  9     gini        0.7683032  0.4787823\n  9     extratrees  0.7810713  0.5057059\n\nTuning parameter 'min.node.size' was held constant at a value of 1\nAccuracy was used to select the optimal model using the largest value.\nThe final values used for the model were mtry = 2, splitrule = extratrees\n and min.node.size = 1.\n```\n:::\n:::\n\n\nWe could instead use our **grouped folds** (rather than random CV folds) by assigning the `index` argument of `trainControl` to be `grouped_folds`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# specify that the resampling method is \ngroup_fit_control <- trainControl(## use grouped CV folds\n                                  index = group_folds,\n                                  method = \"cv\")\nset.seed(825)\nrf_fit <- train(as.factor(old) ~ ., \n                data = select(abalone_grouped, - group), \n                method = \"ranger\",\n                trControl = group_fit_control)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRandom Forest \n\n50 samples\n 8 predictor\n 2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Cross-Validated (10 fold) \nSummary of sample sizes: 40, 35, 45, 40, 45, 45, ... \nResampling results across tuning parameters:\n\n  mtry  splitrule   Accuracy   Kappa     \n  2     gini        0.5222222  0.03968254\n  2     extratrees  0.5111111  0.03784970\n  5     gini        0.5444444  0.01758658\n  5     extratrees  0.5333333  0.08743687\n  9     gini        0.5777778  0.08071789\n  9     extratrees  0.5555556  0.13952020\n\nTuning parameter 'min.node.size' was held constant at a value of 1\nAccuracy was used to select the optimal model using the largest value.\nThe final values used for the model were mtry = 9, splitrule = gini\n and min.node.size = 1.\n```\n:::\n:::\n\n\n\nYou can also pass functions to `trainControl` that would have otherwise been passed to `preProcess`.\n\n## Model parameter tuning options (`tuneGrid = `)\n\nYou could specify your own tuning grid for model parameters using the `tuneGrid` argument of the `train` function. For example, you can define a grid of parameter combinations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define a grid of parameter options to try\nrf_grid <- expand.grid(mtry = c(2, 3, 4, 5),\n                      splitrule = c(\"gini\", \"extratrees\"),\n                      min.node.size = c(1, 3, 5))\nrf_grid\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   mtry  splitrule min.node.size\n1     2       gini             1\n2     3       gini             1\n3     4       gini             1\n4     5       gini             1\n5     2 extratrees             1\n6     3 extratrees             1\n7     4 extratrees             1\n8     5 extratrees             1\n9     2       gini             3\n10    3       gini             3\n11    4       gini             3\n12    5       gini             3\n13    2 extratrees             3\n14    3 extratrees             3\n15    4 extratrees             3\n16    5 extratrees             3\n17    2       gini             5\n18    3       gini             5\n19    4       gini             5\n20    5       gini             5\n21    2 extratrees             5\n22    3 extratrees             5\n23    4 extratrees             5\n24    5 extratrees             5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# re-fit the model with the parameter grid\nrf_fit <- train(as.factor(old) ~ ., \n                data = select(abalone_grouped, -group), \n                method = \"ranger\",\n                trControl = group_fit_control,\n                # provide a grid of parameters\n                tuneGrid = rf_grid)\nrf_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRandom Forest \n\n50 samples\n 8 predictor\n 2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Cross-Validated (10 fold) \nSummary of sample sizes: 40, 35, 45, 40, 45, 45, ... \nResampling results across tuning parameters:\n\n  mtry  splitrule   min.node.size  Accuracy   Kappa       \n  2     gini        1              0.5722222   0.083698830\n  2     gini        3              0.4944444  -0.009825701\n  2     gini        5              0.5388889   0.012270259\n  2     extratrees  1              0.5111111   0.037849695\n  2     extratrees  3              0.5277778   0.085035842\n  2     extratrees  5              0.5277778   0.085035842\n  3     gini        1              0.5555556   0.111111111\n  3     gini        3              0.5888889   0.111111111\n  3     gini        5              0.5722222   0.066856453\n  3     extratrees  1              0.5444444   0.112636020\n  3     extratrees  3              0.5555556   0.139520202\n  3     extratrees  5              0.5277778   0.085035842\n  4     gini        1              0.5277778  -0.009825701\n  4     gini        3              0.5444444   0.080717893\n  4     gini        5              0.5111111   0.017586580\n  4     extratrees  1              0.5444444   0.109278267\n  4     extratrees  3              0.5444444   0.109278267\n  4     extratrees  5              0.5111111   0.037849695\n  5     gini        1              0.5777778   0.089015152\n  5     gini        3              0.5777778   0.080717893\n  5     gini        5              0.6111111   0.152146465\n  5     extratrees  1              0.5444444   0.109278267\n  5     extratrees  3              0.5444444   0.109278267\n  5     extratrees  5              0.5277778   0.085035842\n\nAccuracy was used to select the optimal model using the largest value.\nThe final values used for the model were mtry = 5, splitrule = gini\n and min.node.size = 5.\n```\n:::\n:::\n\n\n# Advanced topics\n\nThis tutorial has only scratched the surface of all of the options in the caret package. To find out more, see the extensive vignette https://topepo.github.io/caret/index.html.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}