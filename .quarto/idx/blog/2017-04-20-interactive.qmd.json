{"title":"Interactive visualization in R","markdown":{"yaml":{"title":"Interactive visualization in R","author":"Rebecca Barter","categories":["visualization","R","interactivity"],"date":"2017-04-20","format":{"html":{"toc":true,"toc-location":"left"}},"description":"Learn about creating interactive visualizations in R."},"headingText":"Why be interactive?","containsRefs":false,"markdown":"\n\n\nLast week I gave an SGSA seminar on interactive visualizations in R.\n\nHere is a long-form version of the talk.\n\n\n\nInteractivity allows the viewer to engage with your data in ways impossible by static graphs. With an interactive plot, the viewer can zoom into the areas the care about, highlight the data points that are relevant to them and hide the information that isn't.\n\nAbove all of that, making simple interactive plots are a sure-fire way to impress your coworkers!\n\nA word of caution: if the interactivity doesn't *add* anything to your visualization, don't do it.\n\n## Examples on the web\n\nSome super cool examples of interactive data viz on the web include:\n\n- [Olympic medals](https://www.washingtonpost.com/graphics/sports/olympics/the-1000-medals-of-the-united-states/)\n\n- [Vaccination simulation](https://www.theguardian.com/society/ng-interactive/2015/feb/05/-sp-watch-how-measles-outbreak-spreads-when-kids-get-vaccinated)\n\n- [Income](https://flowingdata.com/2016/06/28/distributions-of-annual-income/)\n\n- [America's opinions](https://projects.fivethirtyeight.com/obama-polling-trends/)\n\n- [Music](http://www.datasketch.es/december/code/nadieh/)\n\n- [Sam talks too much](http://www.datasketch.es/july/code/nadieh/)\n\n\nWhile these were mostly made using D3, there are certainly ways of making simplified versions of several of these examples directly in R.\n\n\n## Main tools in R\n\nYou can make your scatter plots, line plots, bar plots, etc interactive using the following tools:\n\n- [Plotly](https://plot.ly/r/)\n\n- [Highcharts](http://www.htmlwidgets.org/showcase_highcharts.html)\n\n- [crosstalk](https://rstudio.github.io/crosstalk/)\n\nYou can also make many D3.js plots in R (no javascript required!)\n\n- [rCharts](http://www.rpubs.com/dnchari/rcharts) \n\n- [d3scatter](https://github.com/jcheng5/d3scatter)\n\n- [networkD3](https://christophergandrud.github.io/networkD3/)\n\n# Making ggplot2 interactive\n\nIf you're already familiar with ggplot2 and want to stay that way, it is super easy to make your existing ggplot2 visualizations interactive.\n\n## ggplot2\n\nA typical ggplot viz looks like this:\n\n```{r, message=FALSE, warning = FALSE, fig.align=\"center\", fig.height = 4, fig.width = 7}\nlibrary(ggplot2)\ng <- ggplot(txhousing, aes(x = date, y = sales, group = city)) +\n  geom_line(alpha = 0.4)\ng\n```\n\n\n## ggplot2 + plotly\n\nUsing plotly directly on your ggplot2 graphics makes them interactive!\n\n```{r, eval = FALSE, message=FALSE, warning = FALSE, fig.align=\"center\", fig.height = 4, fig.width = 7}\nlibrary(plotly)\ng <- ggplot(txhousing, aes(x = date, y = sales, group = city)) +\n  geom_line(alpha = 0.4) \nggplotly(g, tooltip = c(\"city\"))\n```\n\n<center>\n```{r, echo = FALSE, message=FALSE, warning = FALSE, fig.align=\"center\", fig.height = 4, fig.width = 7}\nlibrary(plotly)\ng <- ggplot(txhousing, aes(x = date, y = sales, group = city)) +\n  geom_line(alpha = 0.4) \nggplotly(g, tooltip = c(\"city\"))\n```\n</center>\n\n\n\n\n## plotly\n\nHowever, plotly can be used as a stand-alone function (integrated with the magrittr piping syntax rather than the ggplot `+` syntax), to create some powerful interactive visualizations based on line charts, scatterplots and barcharts.\n\n```{r eval = FALSE}\ng <- txhousing %>% \n  # group by city\n  group_by(city) %>%\n  # initiate a plotly object with date on x and median on y\n  plot_ly(x = ~date, y = ~median) %>%\n  # add a line plot for all texan cities\n  add_lines(name = \"Texan Cities\", hoverinfo = \"none\", \n            type = \"scatter\", mode = \"lines\", \n            line = list(color = 'rgba(192,192,192,0.4)')) %>%\n  # plot separate lines for Dallas and Houston\n  add_lines(name = \"Houston\", \n            data = filter(txhousing, \n                          city %in% c(\"Dallas\", \"Houston\")),\n            hoverinfo = \"city\",\n            line = list(color = c(\"red\", \"blue\")),\n            color = ~city)\ng\n```\n\n\n\n<center>\n```{r echo = FALSE, warning=FALSE, fig.height = 5, fig.width = 8}\ng <- txhousing %>% \n  # group by city\n  group_by(city) %>%\n  \n  # initiate a plotly object with date on x and median on y\n  plot_ly(x = ~date, y = ~median) %>%\n  \n  add_lines(name = \"Texan Cities\", hoverinfo = \"none\", \n          type = \"scatter\", mode = \"lines\", \n          line = list(color = 'rgba(192,192,192,0.3)')) %>%\n  # plots one line per city since p knows city is a grouping variable\n  add_lines(name = \"Houston\", \n            data = filter(txhousing, city %in% c(\"Dallas\", \"Houston\")),\n            color = ~city, hoverinfo = \"city\",\n            line = list(color = c(\"red\", \"blue\")))\ng\n```\n</center>\n\nIt is also super easy to add a range slider to your visualization using `rangeslider()`.\n\n\n\n\n## Linking with Crosstalk\n\nSometimes you have two plots of the same data and you want to be able to link the data from one plot to the data in the other plot. This, unsurprisingly, is called \"linking\", and can be achieved using the `crosstalk` package.\n\n\n\n\n```{r eval = FALSE}\nlibrary(crosstalk)\n# define a shared data object\nd <- SharedData$new(mtcars)\n# make a scatterplot of disp vs mpg\nscatterplot <- plot_ly(d, x = ~mpg, y = ~disp) %>%\n  add_markers(color = I(\"navy\"))\n# define two subplots: boxplot and scatterplot\nsubplot(\n  # boxplot of disp\n  plot_ly(d, y = ~disp) %>% \n    add_boxplot(name = \"overall\", \n                color = I(\"navy\")),\n  # scatterplot of disp vs mpg\n  scatterplot, \n  shareY = TRUE, titleX = T) %>% \n  layout(dragmode = \"select\")\n\n\n```\n\n\n<center>\n\n```{r echo = FALSE}\nlibrary(crosstalk)\n# define a shared data object\nd <- SharedData$new(mtcars)\n# make a scatterplot of disp vs mpg\nscatterplot <- plot_ly(d, x = ~mpg, y = ~disp) %>%\n  add_markers(color = I(\"navy\"))\n# define two subplots: boxplot and scatterplot\nsubplot(\n  # boxplot of disp\n  plot_ly(d, y = ~disp) %>% \n    add_boxplot(name = \"overall\", \n                color = I(\"navy\")),\n  # scatterplot of disp vs mpg\n  scatterplot, shareY = TRUE, titleX = T) %>% \n  layout(dragmode = \"select\")\n\n```\n\n</center>\n```{r, message=FALSE, eval = FALSE}\n# make subplots\np <- subplot(\n  # histogram (counts) of gear\n  plot_ly(d, x = ~factor(gear)) %>% \n    add_histogram(color = I(\"grey50\")),\n  # scatterplot of disp vs mpg\n  scatterplot, \n  titleX = T\n) \nlayout(p, barmode = \"overlay\")\n```\n\n<center>\n\n\n```{r, message=FALSE, echo = FALSE}\np <- subplot(\n  plot_ly(d, x = ~factor(gear)) %>% \n    add_histogram(color = I(\"grey50\")),\n  scatterplot, titleX = T\n) \nlayout(p, barmode = \"overlay\")\n```\n</center>\n## Easy D3.js in R: Force networks\n\nFor those who want to create cool D3 graphs directly in R, fortunately there are a few packages that do just that.\n\n \n\nMaking those jiggly force-directed networks can be achieved using the `networkD3` package.\n\n```{r}\nlibrary(networkD3)\ndata(MisLinks, MisNodes)\nhead(MisLinks, 3)\nhead(MisNodes, 3)\n```\n\n\n```{r eval = FALSE}\nforceNetwork(Links = MisLinks, Nodes = MisNodes, Source = \"source\",\n             Target = \"target\", Value = \"value\", NodeID = \"name\",\n             Group = \"group\", opacity = 0.9, Nodesize = 3, \n             linkDistance = 100, fontSize = 20)\n```\n\n<center>\n\n```{r, echo = FALSE}\nlibrary(networkD3)\ndata(MisLinks, MisNodes)\nforceNetwork(Links = MisLinks, \n             Nodes = MisNodes, \n             Source = \"source\", Target = \"target\", \n             Value = \"value\", NodeID = \"name\",\n             Group = \"group\", opacity = 0.9, Nodesize = 3, \n             linkDistance = 100, fontSize = 20)\n```\n\n</center>\n\n## References\n\nplotly references:\n\nhttps://cpsievert.github.io/plotly_book/\n\nhttps://plot.ly/r/\n\ncrosstalk:\n\nhttps://rstudio.github.io/crosstalk/using.html\n\nchord diagram example: \n\nhttp://stackoverflow.com/questions/14599150/chord-diagram-in-r\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"2017-04-20-interactive.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.280","theme":"flatly","title-block-banner":true,"title":"Interactive visualization in R","author":"Rebecca Barter","categories":["visualization","R","interactivity"],"date":"2017-04-20","description":"Learn about creating interactive visualizations in R.","toc-location":"left"},"extensions":{"book":{"multiFile":true}}}}}